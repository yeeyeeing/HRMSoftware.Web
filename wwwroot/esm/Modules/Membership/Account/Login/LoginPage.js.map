{
  "version": 3,
  "sources": ["../../../../../../Modules/Membership/Account/Login/LoginPage.tsx"],
  "sourcesContent": ["import { LoginForm, LoginRequest } from \"@/ServerTypes/Membership\";\nimport { Texts } from \"@/ServerTypes/Texts\";\nimport { PropertyPanel } from \"@serenity-is/corelib\";\nimport { ErrorHandling, notifyError, parseQueryString, resolveUrl, serviceCall } from \"@serenity-is/corelib/q\";\nimport { PromptDialog } from \"@serenity-is/extensions\";\nimport { AccountPanelTitle } from \"../AccountPanelTitle\";\n\nexport default function pageInit(opt?: { activated: string, isPublicDemo: boolean }) {\n    var loginPanel = new LoginPanel($('#LoginPanel'));\n\n    if (opt?.isPublicDemo) {\n        loginPanel.form.Username.element.val('admin').attr('placeholder', 'admin')\n        loginPanel.form.Password.element.val('serenity').attr('placeholder', 'serenity');\n    }\n\n    if (opt?.activated) {\n        loginPanel.form.Username.value = opt.activated;\n        loginPanel.form.Password.element.focus();\n    }\n}\n\nclass LoginPanel extends PropertyPanel<LoginRequest, any> {\n\n    public readonly form = new LoginForm(this.idPrefix);\n\n    protected getFormKey() { return LoginForm.formKey; }\n\n    protected loginClick() {\n        if (!this.validateForm())\n            return;\n\n        var request = this.getSaveEntity();\n\n        serviceCall({\n            url: resolveUrl('~/Account/Login'),\n            request: request,\n            onSuccess: () => {\n                this.redirectToReturnUrl();\n            },\n            onError: response => {\n                if (response?.Error?.Code === \"TwoFactorAuthenticationRequired\") {\n                    var args = response.Error.Arguments.split('|');\n                    this.handleTwoFactorAuthentication(request.Username, request.Password, args[1], args[0]);\n                    return;\n                }\n\n                if (response?.Error?.Code === \"RedirectUserTo\") {\n                    window.location.href = response.Error.Arguments;\n                    return;\n                }\n\n                if (response?.Error?.Message?.length) {\n                    notifyError(response.Error.Message);\n                    this.form.Password.element.focus();\n\n                    return;\n                }\n\n                ErrorHandling.showServiceError(response.Error);\n            }\n        });\n\n    }\n\n    protected redirectToReturnUrl() {\n        var q = parseQueryString();\n        var returnUrl = q['returnUrl'] || q['ReturnUrl'];\n        if (returnUrl) {\n            var hash = window.location.hash;\n            if (hash != null && hash != '#')\n                returnUrl += hash;\n            window.location.href = returnUrl;\n        }\n        else {\n            window.location.href = resolveUrl('~/');\n        }\n    }\n\n    protected handleTwoFactorAuthentication(user: string, pass: string, twoFactorGuid: string, info: string) {\n        var tries = 0;\n        var remaining = 120;\n\n        var dialog = null;\n\n        var showDialog = () => {\n            dialog = new PromptDialog({\n                title: \"Two Factor Authentication\",\n                editorOptions: {\n                    maxLength: 4,\n                },\n                editorType: \"Integer\",\n                message: info,\n                isHtml: true,\n                required: true,\n                validateValue: (x) => {\n                    if (x >= 1000 && x <= 9999) {\n                        tries++;\n\n                        serviceCall({\n                            url: resolveUrl('~/Account/Login'),\n                            request: {\n                                Username: user,\n                                Password: pass,\n                                TwoFactorGuid: twoFactorGuid,\n                                TwoFactorCode: x\n                            },\n                            onSuccess: () => {\n                                this.redirectToReturnUrl();\n                                return;\n                            },\n                            onError: z => {\n                                notifyError(z.Error.Message);\n\n                                if (tries > 2) {\n                                    notifyError(\"Code entered is invalid! You can't try more than 3 times!\");\n                                    dialog = null;\n                                    return;\n                                }\n\n                                showDialog();\n                            }\n                        });\n\n                        return true;\n                    }\n\n                    notifyError(\"Please enter a valid code!\");\n                    return false;\n                }\n            });\n\n            dialog.dialogOpen();\n            dialog.element.on(\"dialogclose.me\", function() {\n                if (dialog != null) {\n                    dialog.element.off(\"dialogclose.me\");\n                    dialog = null;\n                }\n            });\n        };\n\n        function updateCounter() {\n            remaining -= 1;\n            if (dialog != null) {\n                dialog.element.find(\"span.counter\").text(remaining.toString());\n            }\n\n            if (remaining >= 0)\n                setTimeout(updateCounter, 1000);\n            else if (dialog != null)\n                dialog.dialogClose();\n        };\n\n        showDialog();\n        window.setTimeout(updateCounter, 1000);\n    }\n\n    protected renderContents() {\n        const id = this.useIdPrefix();\n        const myTexts = Texts.Forms.Membership.Login;\n        this.element.empty().append(<>\n            <AccountPanelTitle />\n            <div class=\"s-Panel p-4\">\n                <h5 class=\"text-center my-4\">{myTexts.LoginToYourAccount}</h5>\n                <form id={id.Form} action=\"\">\n                    <div id={id.PropertyGrid}></div>\n                    <div class=\"px-field\">\n                        <a class=\"float-end text-decoration-none\" href={resolveUrl('~/Account/ForgotPassword')}>\n                            {myTexts.ForgotPassword}\n                        </a>\n                    </div>\n                    <div class=\"px-field\">\n                        <button id={id.LoginButton} type=\"submit\" class=\"btn btn-primary my-3 w-100\"\n                            onClick={e => { e.preventDefault(); this.loginClick(); }}>\n                            {myTexts.SignInButton}\n                        </button>\n                    </div>\n                </form>\n            </div>\n            <div class=\"text-center mt-2\">\n                <a class=\"text-decoration-none\" href={resolveUrl('~/Account/SignUp')}>{myTexts.SignUpButton}</a>\n            </div>\n        </>);\n    }\n}"],
  "mappings": "mXAEA,IAAAA,EAA8B,SAC9BC,EAAsF,SACtFC,EAA6B,SAGd,SAARC,EAA0BC,EAAoD,CACjF,IAAIC,EAAa,IAAIC,EAAW,EAAE,aAAa,CAAC,EAE5CF,GAAA,MAAAA,EAAK,eACLC,EAAW,KAAK,SAAS,QAAQ,IAAI,OAAO,EAAE,KAAK,cAAe,OAAO,EACzEA,EAAW,KAAK,SAAS,QAAQ,IAAI,UAAU,EAAE,KAAK,cAAe,UAAU,GAG/ED,GAAA,MAAAA,EAAK,YACLC,EAAW,KAAK,SAAS,MAAQD,EAAI,UACrCC,EAAW,KAAK,SAAS,QAAQ,MAAM,EAE/C,CAZwBE,EAAAJ,EAAA,YAcxB,IAAMG,EAAN,cAAyB,eAAiC,CAA1D,kCAEI,KAAgB,KAAO,IAAIE,EAAU,KAAK,QAAQ,EAExC,YAAa,CAAE,OAAOA,EAAU,OAAS,CAEzC,YAAa,CACnB,GAAK,KAAK,aAAa,EAGvB,KAAIC,EAAU,KAAK,cAAc,KAEjC,eAAY,CACR,OAAK,cAAW,iBAAiB,EACjC,QAASA,EACT,UAAW,IAAM,CACb,KAAK,oBAAoB,CAC7B,EACA,QAASC,GAAY,CAvCjC,IAAAC,EAAAC,EAAAC,EAAAC,EAwCgB,KAAIH,EAAAD,GAAA,YAAAA,EAAU,QAAV,YAAAC,EAAiB,QAAS,kCAAmC,CAC7D,IAAII,EAAOL,EAAS,MAAM,UAAU,MAAM,GAAG,EAC7C,KAAK,8BAA8BD,EAAQ,SAAUA,EAAQ,SAAUM,EAAK,CAAC,EAAGA,EAAK,CAAC,CAAC,EACvF,MACJ,CAEA,KAAIH,EAAAF,GAAA,YAAAA,EAAU,QAAV,YAAAE,EAAiB,QAAS,iBAAkB,CAC5C,OAAO,SAAS,KAAOF,EAAS,MAAM,UACtC,MACJ,CAEA,IAAII,GAAAD,EAAAH,GAAA,YAAAA,EAAU,QAAV,YAAAG,EAAiB,UAAjB,MAAAC,EAA0B,OAAQ,IAClC,eAAYJ,EAAS,MAAM,OAAO,EAClC,KAAK,KAAK,SAAS,QAAQ,MAAM,EAEjC,MACJ,CAEA,gBAAc,iBAAiBA,EAAS,KAAK,CACjD,CACJ,CAAC,EAEL,CAEU,qBAAsB,CAC5B,IAAIM,KAAI,oBAAiB,EACrBC,EAAYD,EAAE,WAAgBA,EAAE,UACpC,GAAIC,EAAW,CACX,IAAIC,EAAO,OAAO,SAAS,KACvBA,GAAQ,MAAQA,GAAQ,MACxBD,GAAaC,GACjB,OAAO,SAAS,KAAOD,CAC3B,MAEI,OAAO,SAAS,QAAO,cAAW,IAAI,CAE9C,CAEU,8BAA8BE,EAAcC,EAAcC,EAAuBC,EAAc,CACrG,IAAIC,EAAQ,EACRC,EAAY,IAEZC,EAAS,KAETC,EAAanB,EAAA,IAAM,CACnBkB,EAAS,IAAI,eAAa,CACtB,MAAO,4BACP,cAAe,CACX,UAAW,CACf,EACA,WAAY,UACZ,QAASH,EACT,OAAQ,GACR,SAAU,GACV,cAAgBK,GACRA,GAAK,KAAQA,GAAK,MAClBJ,OAEA,eAAY,CACR,OAAK,cAAW,iBAAiB,EACjC,QAAS,CACL,SAAUJ,EACV,SAAUC,EACV,cAAeC,EACf,cAAeM,CACnB,EACA,UAAW,IAAM,CACb,KAAK,oBAAoB,CAE7B,EACA,QAASC,GAAK,CAGV,MAFA,eAAYA,EAAE,MAAM,OAAO,EAEvBL,EAAQ,EAAG,IACX,eAAY,2DAA2D,EACvEE,EAAS,KACT,MACJ,CAEAC,EAAW,CACf,CACJ,CAAC,EAEM,QAGX,eAAY,4BAA4B,EACjC,GAEf,CAAC,EAEDD,EAAO,WAAW,EAClBA,EAAO,QAAQ,GAAG,iBAAkB,UAAW,CACvCA,GAAU,OACVA,EAAO,QAAQ,IAAI,gBAAgB,EACnCA,EAAS,KAEjB,CAAC,CACL,EAtDiB,cAwDjB,SAASI,GAAgB,CACrBL,GAAa,EACTC,GAAU,MACVA,EAAO,QAAQ,KAAK,cAAc,EAAE,KAAKD,EAAU,SAAS,CAAC,EAG7DA,GAAa,EACb,WAAWK,EAAe,GAAI,EACzBJ,GAAU,MACfA,EAAO,YAAY,CAC3B,CAVSlB,EAAAsB,EAAA,iBAYTH,EAAW,EACX,OAAO,WAAWG,EAAe,GAAI,CACzC,CAEU,gBAAiB,CACvB,IAAMC,EAAK,KAAK,YAAY,EACtBC,EAAUC,EAAM,MAAM,WAAW,MACvC,KAAK,QAAQ,MAAM,EAAE,OAAOC,EAAAC,EAAA,CACxB,UAAAD,EAACE,EAAA,EAAkB,EACnBF,EAAC,OAAI,MAAM,cACP,UAAAA,EAAC,MAAG,MAAM,mBAAoB,SAAAF,EAAQ,mBAAmB,EACzDE,EAAC,QAAK,GAAIH,EAAG,KAAM,OAAO,GACtB,UAAAG,EAAC,OAAI,GAAIH,EAAG,aAAc,EAC1BG,EAAC,OAAI,MAAM,WACP,SAAAA,EAAC,KAAE,MAAM,iCAAiC,QAAM,cAAW,0BAA0B,EAChF,SAAAF,EAAQ,eACb,EACJ,EACAE,EAAC,OAAI,MAAM,WACP,SAAAA,EAAC,UAAO,GAAIH,EAAG,YAAa,KAAK,SAAS,MAAM,6BAC5C,QAASM,GAAK,CAAEA,EAAE,eAAe,EAAG,KAAK,WAAW,CAAG,EACtD,SAAAL,EAAQ,aACb,EACJ,GACJ,GACJ,EACAE,EAAC,OAAI,MAAM,mBACP,SAAAA,EAAC,KAAE,MAAM,uBAAuB,QAAM,cAAW,kBAAkB,EAAI,SAAAF,EAAQ,aAAa,EAChG,GACJ,CAAG,CACP,CACJ,EAlKMxB,EAAAD,EAAA",
  "names": ["import_corelib", "import_q", "import_extensions", "pageInit", "opt", "loginPanel", "LoginPanel", "__name", "LoginForm", "request", "response", "_a", "_b", "_c", "_d", "args", "q", "returnUrl", "hash", "user", "pass", "twoFactorGuid", "info", "tries", "remaining", "dialog", "showDialog", "x", "z", "updateCounter", "id", "myTexts", "Texts", "jsx", "Fragment", "AccountPanelTitle", "e"]
}
