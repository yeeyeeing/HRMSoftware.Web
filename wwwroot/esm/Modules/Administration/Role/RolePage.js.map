{
  "version": 3,
  "sources": ["../../../../../Modules/Administration/Role/RolePage.ts", "../../../../../Modules/Administration/Role/RoleGrid.ts", "../../../../../Modules/Administration/Role/RoleDialog.ts", "../../../../../Modules/Administration/RolePermission/RolePermissionDialog.ts", "../../../../../Modules/Administration/UserPermission/PermissionCheckEditor.ts"],
  "sourcesContent": ["import { initFullHeightGridPage } from \"@serenity-is/corelib/q\"\nimport { RoleGrid } from \"./RoleGrid\";\n\nexport default function pageInit() {\n    initFullHeightGridPage(new RoleGrid($('#GridDiv')).element);\n}", "import { RoleColumns, RoleRow, RoleService } from \"@/ServerTypes/Administration\";\nimport { Decorators, EntityGrid } from \"@serenity-is/corelib\";\nimport { RoleDialog } from \"./RoleDialog\";\n\n@Decorators.registerClass('HRMSoftware.Administration.RoleGrid')\nexport class RoleGrid extends EntityGrid<RoleRow, any> {\n    protected getColumnsKey() { return RoleColumns.columnsKey; }\n    protected getDialogType() { return RoleDialog; }\n    protected getRowDefinition() { return RoleRow; }\n    protected getService() { return RoleService.baseUrl; }\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n\n    protected getDefaultSortBy() {\n        return [RoleRow.Fields.RoleName];\n    }\n}", "import { RoleForm, RoleRow, RoleService } from \"@/ServerTypes/Administration\";\nimport { Texts } from \"@/ServerTypes/Texts\";\nimport { Decorators, EntityDialog } from \"@serenity-is/corelib\";\nimport { RolePermissionDialog } from \"../RolePermission/RolePermissionDialog\";\n\nconst editPermissions = \"edit-permissions\";\n\n@Decorators.registerClass('HRMSoftware.Administration.RoleDialog')\nexport class RoleDialog extends EntityDialog<RoleRow, any> {\n    protected getFormKey() { return RoleForm.formKey; }\n    protected getRowDefinition() { return RoleRow; }\n    protected getService() { return RoleService.baseUrl; }\n\n    protected form = new RoleForm(this.idPrefix);\n\n    protected getToolbarButtons()\n    {\n        let buttons = super.getToolbarButtons();\n\n        buttons.push({\n            title: Texts.Site.RolePermissionDialog.EditButton,\n            cssClass: editPermissions,\n            icon: 'fa-lock text-green',\n            onClick: () =>\n            {\n                new RolePermissionDialog({\n                    roleID: this.entity.RoleId,\n                    title: this.entity.RoleName\n                }).dialogOpen();\n            }\n        });\n\n        return buttons;\n    }\n\n    protected updateInterface() {\n        super.updateInterface();\n\n        this.toolbar.findButton(editPermissions).toggleClass(\"disabled\", this.isNewOrDeleted());\n    }\n}", "import { RolePermissionService, UserPermissionRow } from \"@/ServerTypes/Administration\";\nimport { TemplatedDialog } from \"@serenity-is/corelib\";\nimport { format, getRemoteData, localText, notifySuccess } from \"@serenity-is/corelib/q\";\nimport { PermissionCheckEditor } from \"../UserPermission/PermissionCheckEditor\";\n\nexport class RolePermissionDialog extends TemplatedDialog<RolePermissionDialogOptions> {\n\n    private permissions: PermissionCheckEditor;\n\n    constructor(opt: RolePermissionDialogOptions) {\n        super(opt);\n\n        this.permissions = new PermissionCheckEditor(this.byId('Permissions'), {\n            showRevoke: false\n        });\n\n        RolePermissionService.List({\n            RoleID: this.options.roleID,\n            Module: null,\n            Submodule: null\n        }, response => {\n            this.permissions.value = response.Entities.map(x => (<UserPermissionRow>{ PermissionKey: x }));\n        });\n\n        this.permissions.implicitPermissions = getRemoteData('Administration.ImplicitPermissions');\n    }\n\n    protected getDialogOptions(): JQueryUI.DialogOptions {\n        let opt = super.getDialogOptions();\n\n        opt.buttons = [\n            {\n                text: localText('Dialogs.OkButton'),\n                click: e => {\n                    RolePermissionService.Update({\n                        RoleID: this.options.roleID,\n                        Permissions: this.permissions.value.map(x => x.PermissionKey),\n                        Module: null,\n                        Submodule: null\n                    }, response => {\n                        this.dialogClose();\n                        window.setTimeout(() => notifySuccess(localText('Site.RolePermissionDialog.SaveSuccess')), 0);\n                    });\n                }\n            }, {\n                text: localText('Dialogs.CancelButton'),\n                click: () => this.dialogClose()\n            }];\n\n        opt.title = format(localText('Site.RolePermissionDialog.DialogTitle'),\n            this.options.title);\n\n        return opt;\n    }\n\n    protected getTemplate(): string {\n        return '<div id=\"~_Permissions\"></div>';\n    }\n}\n\nexport interface RolePermissionDialogOptions {\n    roleID?: number;\n    title?: string;\n}", "import { UserPermissionRow } from \"@/ServerTypes/Administration\";\nimport { DataGrid, Decorators, GridUtils, IGetEditValue, ISetEditValue, SlickFormatting, SlickTreeHelper, ToolButton } from \"@serenity-is/corelib\";\nimport { count, Dictionary, Grouping, toGrouping, localText, turkishLocaleCompare, htmlEncode, any, trimToNull, getRemoteData, tryGetText, getRemoteDataAsync } from \"@serenity-is/corelib/q\";\nimport { Column } from \"@serenity-is/sleekgrid\";\n\n@Decorators.registerEditor('HRMSoftware.Administration.PermissionCheckEditor', [IGetEditValue, ISetEditValue])\nexport class PermissionCheckEditor extends DataGrid<PermissionCheckItem, PermissionCheckEditorOptions> {\n\n    protected getIdProperty() { return \"Key\"; }\n\n    private searchText: string;\n    private byParentKey: Grouping<PermissionCheckItem>;\n\n    constructor(container: JQuery, opt: PermissionCheckEditorOptions) {\n        super(container, opt);\n\n        let titleByKey: Dictionary<string> = {};\n        this.getSortedGroupAndPermissionKeys(titleByKey, (permissionKeys) => {\n            if (!this.element)\n                return;\n\n            let items = permissionKeys.map(key => <PermissionCheckItem>{\n                Key: key,\n                ParentKey: this.getParentKey(key),\n                Title: titleByKey[key],\n                GrantRevoke: null,\n                IsGroup: key.charAt(key.length - 1) === ':'\n            });\n            this.byParentKey = toGrouping(items, x => x.ParentKey);\n            this.setItems(items);\n            this.value = this._value;\n        });\n    }\n\n    private getItemGrantRevokeClass(item: PermissionCheckItem, grant: boolean): string {\n        if (!item.IsGroup) {\n            return ((item.GrantRevoke === grant) ? ' checked' : '');\n        }\n\n        let desc = this.getDescendants(item, true);\n        let granted = desc.filter(x => x.GrantRevoke === grant);\n\n        if (!granted.length) {\n            return '';\n        }\n\n        if (desc.length === granted.length) {\n            return 'checked';\n        }\n\n        return 'checked partial';\n    }\n\n    private roleOrImplicit(key): boolean {\n        if (this._rolePermissions[key])\n            return true;\n\n        for (var k of Object.keys(this._rolePermissions)) {\n            var d = this._implicitPermissions[k];\n            if (d && d[key])\n                return true;\n        }\n\n        for (var i of Object.keys(this._implicitPermissions)) {\n            var item = this.view.getItemById(i);\n            if (item && item.GrantRevoke == true) {\n                var d = this._implicitPermissions[i];\n                if (d && d[key])\n                    return true;\n            }\n        }\n    }\n\n    private getItemEffectiveClass(item: PermissionCheckItem): string {\n\n        if (item.IsGroup) {\n            let desc = this.getDescendants(item, true);\n            let grantCount = count(desc, x => x.GrantRevoke === true ||\n                (x.GrantRevoke == null && this.roleOrImplicit(x.Key)));\n\n            if (grantCount === desc.length || desc.length === 0) {\n                return 'allow';\n            }\n\n            if (grantCount === 0) {\n                return 'deny';\n            }\n\n            return 'partial';\n        }\n\n        let granted = item.GrantRevoke === true ||\n            (item.GrantRevoke == null && this.roleOrImplicit(item.Key));\n\n        return (granted ? ' allow' : ' deny');\n    }\n\n    protected getColumns(): Column[] {\n        let columns: Column[] = [{\n            name: localText('Site.UserPermissionDialog.Permission'),\n            field: 'Title',\n            format: SlickFormatting.treeToggle(() => this.view, x => x.Key, ctx => {\n                let item = ctx.item;\n                let klass = this.getItemEffectiveClass(item);\n                return '<span class=\"effective-permission ' + klass + '\">' + htmlEncode(ctx.value) + '</span>';\n            }),\n            width: 495,\n            sortable: false\n        }, {\n            name: localText('Site.UserPermissionDialog.Grant'), field: 'Grant',\n            format: ctx => {\n                let item1 = ctx.item;\n                let klass1 = this.getItemGrantRevokeClass(item1, true);\n                return \"<span class='check-box grant no-float \" + klass1 + \"'></span>\";\n            },\n            width: 65,\n            sortable: false,\n            headerCssClass: 'align-center',\n            cssClass: 'align-center'\n        }];\n\n        if (this.options.showRevoke) {\n            columns.push({\n                name: localText('Site.UserPermissionDialog.Revoke'), field: 'Revoke',\n                format: ctx => {\n                    let item2 = ctx.item;\n                    let klass2 = this.getItemGrantRevokeClass(item2, false);\n                    return '<span class=\"check-box revoke no-float ' + klass2 + '\"></span>';\n                },\n                width: 65,\n                sortable: false,\n                headerCssClass: 'align-center',\n                cssClass: 'align-center'\n            });\n        }\n\n        return columns;\n    }\n\n    public setItems(items: PermissionCheckItem[]): void {\n        SlickTreeHelper.setIndents(items, x => x.Key, x => x.ParentKey, false);\n        this.view.setItems(items, true);\n    }\n\n    protected onViewSubmit() {\n        return false;\n    }\n\n    protected onViewFilter(item: PermissionCheckItem): boolean {\n        if (!super.onViewFilter(item)) {\n            return false;\n        }\n\n        if (!SlickTreeHelper.filterById(item, this.view, x => x.ParentKey))\n            return false;\n\n        if (this.searchText) {\n            return this.matchContains(item) || item.IsGroup && any(this.getDescendants(item, false), x => this.matchContains(x));\n        }\n\n        return true;\n    }\n\n    private matchContains(item: PermissionCheckItem): boolean {\n        return Select2.util.stripDiacritics(item.Title || '').toLowerCase().indexOf(this.searchText) >= 0;\n    }\n\n    private getDescendants(item: PermissionCheckItem, excludeGroups: boolean): PermissionCheckItem[] {\n        let result: PermissionCheckItem[] = [];\n        let stack = [item];\n        while (stack.length > 0) {\n            let i = stack.pop();\n            let children = this.byParentKey[i.Key];\n            if (!children)\n                continue;\n\n            for (let child of children) {\n                if (!excludeGroups || !child.IsGroup) {\n                    result.push(child);\n                }\n\n                stack.push(child);\n            }\n        }\n\n        return result;\n    }\n\n    protected onClick(e, row, cell): void {\n        super.onClick(e, row, cell);\n\n        if (!e.isDefaultPrevented()) {\n            SlickTreeHelper.toggleClick(e, row, cell, this.view, (x: any) => x.Key);\n        }\n\n        if (e.isDefaultPrevented()) {\n            return;\n        }\n\n        let target = $(e.target);\n        let grant = target.hasClass('grant');\n\n        if (grant || target.hasClass('revoke')) {\n            e.preventDefault();\n\n            let item = this.itemAt(row);\n            let checkedOrPartial = target.hasClass('checked') || target.hasClass('partial');\n\n            if (checkedOrPartial) {\n                grant = null;\n            }\n            else {\n                grant = grant !== checkedOrPartial;\n            }\n\n            if (item.IsGroup) {\n                for (var d of this.getDescendants(item, true)) {\n                    d.GrantRevoke = grant;\n                }\n            }\n            else\n                item.GrantRevoke = grant;\n\n            this.slickGrid.invalidate();\n        }\n    }\n\n    private getParentKey(key): string {\n        if (key.charAt(key.length - 1) === ':') {\n            key = key.substr(0, key.length - 1);\n        }\n\n        let idx = key.lastIndexOf(':');\n        if (idx >= 0) {\n            return key.substr(0, idx + 1);\n        }\n        return null;\n    }\n\n    protected getButtons(): ToolButton[] {\n        return [];\n    }\n\n    protected createToolbarExtensions(): void {\n        super.createToolbarExtensions();\n        GridUtils.addQuickSearchInputCustom(this.toolbar.element, (_, text) => {\n            this.searchText = Select2.util.stripDiacritics(trimToNull(text) || '').toLowerCase();\n            this.view.setItems(this.view.getItems(), true);\n        });\n    }\n\n    private getSortedGroupAndPermissionKeys(titleByKey: Dictionary<string>, then: (result: string[]) => void) {\n        getRemoteDataAsync('Administration.PermissionKeys').then((keys: string[]) => {\n            let titleWithGroup = {};\n            for (var k of keys) {\n                let s = k;\n\n                if (!s) {\n                    continue;\n                }\n\n                if (s.charAt(s.length - 1) == ':') {\n                    s = s.substring(0, s.length - 1);\n                    if (s.length === 0) {\n                        continue;\n                    }\n                }\n\n                if (titleByKey[s]) {\n                    continue;\n                }\n\n                titleByKey[s] = tryGetText('Permission.' + s) ?? s;\n                let parts = s.split(':');\n                let group = '';\n                let groupTitle = '';\n                for (let i = 0; i < parts.length - 1; i++) {\n                    group = group + parts[i] + ':';\n                    let txt = tryGetText('Permission.' + group);\n                    if (txt == null) {\n                        txt = parts[i];\n                    }\n                    titleByKey[group] = txt;\n                    groupTitle = groupTitle + titleByKey[group] + ':';\n                    titleWithGroup[group] = groupTitle;\n                }\n\n                titleWithGroup[s] = groupTitle + titleByKey[s];\n            }\n\n            keys = Object.keys(titleByKey);\n            keys = keys.sort((x, y) => turkishLocaleCompare(titleWithGroup[x], titleWithGroup[y]));\n\n            then(keys);\n        });\n    }\n\n    get value(): UserPermissionRow[] {\n\n        let result: UserPermissionRow[] = [];\n\n        if (!this.view.getItems().length) {\n            // probably permission keys not loaded yet\n            return (this._value || []).map(x => ({\n                PermissionKey: x.PermissionKey,\n                Granted: x.Granted\n            }));\n        }\n\n        for (let item of this.view.getItems()) {\n            if (item.GrantRevoke != null && item.Key.charAt(item.Key.length - 1) != ':') {\n                result.push({ PermissionKey: item.Key, Granted: item.GrantRevoke });\n            }\n        }\n\n        return result;\n    }\n\n    private _value: UserPermissionRow[];\n\n    set value(value: UserPermissionRow[]) {\n\n        this._value = value;\n\n        for (let item of this.view.getItems()) {\n            item.GrantRevoke = null;\n        }\n\n        if (value != null) {\n            for (let row of value) {\n                let r = this.view.getItemById(row.PermissionKey);\n                if (r) {\n                    r.GrantRevoke = row.Granted ?? true;\n                }\n            }\n        }\n\n        this.setItems(this.getItems());\n    }\n\n    private _rolePermissions: Dictionary<boolean> = {};\n\n    get rolePermissions(): string[] {\n        return Object.keys(this._rolePermissions);\n    }\n\n    set rolePermissions(value: string[]) {\n        this._rolePermissions = {};\n\n        if (value) {\n            for (let k of value) {\n                this._rolePermissions[k] = true;\n            }\n        }\n\n        this.setItems(this.getItems());\n    }\n\n    private _implicitPermissions: Dictionary<Dictionary<boolean>> = {};\n\n    set implicitPermissions(value: Dictionary<string[]>) {\n        this._implicitPermissions = {};\n\n        if (value) {\n            for (var k of Object.keys(value)) {\n                this._implicitPermissions[k] = this._implicitPermissions[k] || {};\n                var l = value[k];\n                if (l) {\n                    for (var s of l)\n                        this._implicitPermissions[k][s] = true;\n                }\n            }\n        }\n    }\n}\n\nexport interface PermissionCheckEditorOptions {\n    showRevoke?: boolean;\n}\n\nexport interface PermissionCheckItem {\n    ParentKey?: string;\n    Key?: string;\n    Title?: string;\n    IsGroup?: boolean;\n    GrantRevoke?: boolean;\n}\n"],
  "mappings": "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",
  "names": ["import_q", "import_corelib", "import_corelib", "import_corelib", "import_q", "import_corelib", "import_q", "PermissionCheckEditor", "container", "opt", "titleByKey", "permissionKeys", "items", "key", "x", "item", "grant", "desc", "granted", "k", "d", "i", "grantCount", "columns", "ctx", "item1", "item2", "excludeGroups", "result", "stack", "children", "child", "row", "cell", "target", "checkedOrPartial", "idx", "_", "text", "then", "keys", "_a", "titleWithGroup", "s", "parts", "group", "groupTitle", "txt", "y", "value", "r", "l", "__name", "__decorateClass", "RolePermissionDialog", "opt", "PermissionCheckEditor", "RolePermissionService", "response", "x", "e", "__name", "editPermissions", "RoleDialog", "RoleForm", "RoleRow", "RoleService", "buttons", "Texts", "RolePermissionDialog", "__name", "__decorateClass", "RoleGrid", "RoleColumns", "RoleDialog", "RoleRow", "RoleService", "container", "__name", "__decorateClass", "pageInit", "RoleGrid", "__name"]
}
