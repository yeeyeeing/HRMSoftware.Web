{
  "version": 3,
  "sources": ["../../../../../Modules/Administration/User/UserPage.ts", "../../../../../Modules/Administration/User/UserGrid.ts", "../../../../../Modules/Administration/User/UserDialog.ts", "../../../../../Modules/Administration/UserPermission/UserPermissionDialog.ts"],
  "sourcesContent": ["import { initFullHeightGridPage } from \"@serenity-is/corelib/q\"\nimport { UserGrid } from \"./UserGrid\";\n\nexport default function pageInit() {\n    initFullHeightGridPage(new UserGrid($('#GridDiv')).element);\n}", "import { RoleRow, UserColumns, UserRow, UserService } from \"@/ServerTypes/Administration\";\nimport { Decorators, EntityGrid } from \"@serenity-is/corelib\";\nimport { Lookup, resolveUrl, tryFirst } from \"@serenity-is/corelib/q\";\nimport { UserDialog } from \"./UserDialog\";\n\n@Decorators.registerClass()\nexport class UserGrid extends EntityGrid<UserRow, any> {\n    protected getColumnsKey() { return UserColumns.columnsKey; }\n    protected getDialogType() { return UserDialog; }\n    protected getIdProperty() { return UserRow.idProperty; }\n    protected getIsActiveProperty() { return UserRow.isActiveProperty; }\n    protected getLocalTextPrefix() { return UserRow.localTextPrefix; }\n    protected getService() { return UserService.baseUrl; }\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n\n    protected getDefaultSortBy() {\n        return [UserRow.Fields.Username];\n    }\n\n    protected getColumns() {\n        var columns = super.getColumns();\n\n        var impersonate = tryFirst(columns, x => x.field == \"ImpersonationToken\");\n        if (impersonate != null) {\n            impersonate.format = ctx => {\n                if (!ctx.value)\n                    return \"\";\n\n                return `<a target=\"_blank\" href=\"${resolveUrl('~/Account/ImpersonateAs?token=')}${ctx.value}\">`\n                    + `<i class=\"fa fa-user-secret text-blue\"></i></a>`;\n            };\n        }\n\n        var roles = tryFirst(columns, x => x.field == UserRow.Fields.Roles);\n        if (roles) {\n            var rolesLookup: Lookup<RoleRow>;\n            RoleRow.getLookupAsync().then(lookup => {\n                rolesLookup = lookup;\n                this.slickGrid.invalidate();\n            });\n\n            roles.format = ctx => {\n                if (!rolesLookup)\n                    return `<i class=\"fa fa-spinner\"></i>`;\n\n                var roleList = (ctx.value || []).map(x => (rolesLookup.itemById[x] || {}).RoleName || \"\");\n                roleList.sort();\n                return roleList.join(\", \");\n            };\n        }\n\n        return columns;\n    }\n}\n", "import { UserForm, UserRow, UserService } from \"@/ServerTypes/Administration\";\nimport { Texts } from \"@/ServerTypes/Texts\";\nimport { Decorators, EditorUtils, EntityDialog } from \"@serenity-is/corelib\";\nimport { format, localText } from \"@serenity-is/corelib/q\";\nimport { UserPermissionDialog } from \"../UserPermission/UserPermissionDialog\";\nimport {  Select2Editor } from '@serenity-is/corelib';\nimport { EmployeeProfileService } from \"../../ServerTypes/EmployeeProfile\";\nimport { alertDialog, isEmptyOrNull } from '@serenity-is/corelib/q';\n\n@Decorators.registerClass()\nexport class UserDialog extends EntityDialog<UserRow, any> {\n    protected getFormKey() { return UserForm.formKey; }\n    protected getIdProperty() { return UserRow.idProperty; }\n    protected getIsActiveProperty() { return UserRow.isActiveProperty; }\n    protected getLocalTextPrefix() { return UserRow.localTextPrefix; }\n    protected getNameProperty() { return UserRow.nameProperty; }\n    protected getService() { return UserService.baseUrl; }\n\n    protected form = new UserForm(this.idPrefix);\n    public originalOwner: number;\n    constructor() {\n        super();\n\n        this.form.Password.element.attr(\"autocomplete\", \"new-password\");\n\n        this.form.Password.change(() => {\n            EditorUtils.setRequired(this.form.PasswordConfirm, this.form.Password.value.length > 0);\n        });\n\n        this.form.Password.addValidationRule(this.uniqueName, e => {\n            if (this.form.Password.value.length < 6)\n                return format(localText(Texts.Validation.MinRequiredPasswordLength), 6);\n        });\n\n        this.form.PasswordConfirm.addValidationRule(this.uniqueName, e => {\n            if (this.form.Password.value != this.form.PasswordConfirm.value)\n                return localText(Texts.Validation.PasswordConfirmMismatch);\n        });\n    }\n\n    protected getToolbarButtons()\n    {\n        let buttons = super.getToolbarButtons();\n\n        buttons.push({\n            title: localText(Texts.Site.UserDialog.EditPermissionsButton),\n            cssClass: 'edit-permissions-button',\n            icon: 'fa-lock text-green',\n            onClick: () =>\n            {\n                new UserPermissionDialog({\n                    userID: this.entity.UserId,\n                    username: this.entity.Username\n                }).dialogOpen();\n            }\n        });\n\n        return buttons;\n    }\n\n    protected updateInterface() {\n        super.updateInterface();\n        this.toolbar.findButton(\"edit-permissions-button\").toggleClass(\"disabled\", this.isNewOrDeleted());\n    }\n    \n    public dialogOpen(asPanel?: boolean): void {\n        super.dialogOpen(asPanel);\n        \n        var self = this\n        self.originalOwner = self.form.EmployeeRowID.value\n        var CurrentEmployeeRowId = self.form.EmployeeRowID.value\n        var EmployeeRowID = document.getElementById(this.idPrefix + 'EmployeeRowID')\n        let EmployeeRowEditor = new Select2Editor($(EmployeeRowID))\n        \n        EmployeeProfileService.List({\n        }, response => {\n            for (var index in response.Entities) {\n                if (response.Entities[index].CreateUser == false || response.Entities[index].Id == CurrentEmployeeRowId)//if no account yet\n                EmployeeRowEditor.addItem({ id: (response.Entities[index].Id).toString(), text: (response.Entities[index].EmployeeID).toString(), });\n            }\n            if (!isEmptyOrNull(CurrentEmployeeRowId)) \n                $(EmployeeRowID).val(CurrentEmployeeRowId.toString()).trigger('change');\n\n            \n        });\n        \n    }\n    \n    protected afterLoadEntity() {\n        super.afterLoadEntity();\n\n        // these fields are only required in new record mode\n        this.form.Password.element.toggleClass('required', this.isNew())\n            .closest('.field').find('sup').toggle(this.isNew());\n        this.form.PasswordConfirm.element.toggleClass('required', this.isNew())\n            .closest('.field').find('sup').toggle(this.isNew());\n    }\n\n    protected save_submitHandler(response): void {\n        var self = this\n        super.save_submitHandler(response);\n        \n    }\n    protected onSaveSuccess(response): void {\n        var self = this\n        if (!isEmptyOrNull(this.form.EmployeeRowID.value)) {\n            EmployeeProfileService.Update({\n                EntityId: this.form.EmployeeRowID.value,\n                Entity:\n                {\n                    \"UserRowID\": self.entityId,\n                    \"UserName\": self.form.Username.value,\n                    \"CreateUser\": true,\n                    \"UserPassword\": self.form.Password.value\n                },\n            });\n        }\n\n        if (self.form.EmployeeRowID.value != self.originalOwner\n            && !isEmptyOrNull(self.originalOwner)) {\n            EmployeeProfileService.Update({\n                EntityId: self.originalOwner,\n                Entity:\n                {\n                    \"UserRowID\": null,\n                    \"UserName\": null,\n                    \"CreateUser\": false,\n                    \"UserPassword\": null\n                },\n            });\n        }\n\n        super.onSaveSuccess(response)\n    }\n\n    protected onDeleteSuccess(response): void\n    {\n        if (!isEmptyOrNull(this.originalOwner))\n        {\n            EmployeeProfileService.Update({\n                EntityId: this.originalOwner,\n                Entity:\n                {\n                    \"UserRowID\": null,\n                    \"UserName\": null,\n                    \"CreateUser\": false,\n                    \"UserPassword\": null,\n                    \"GrantHRPrivilege\": false\n                },\n            });\n        }\n\n\n        super.onDeleteSuccess(response)\n\n\n    }\n}\n", "import { UserPermissionService } from \"@/ServerTypes/Administration\";\nimport { TemplatedDialog } from \"@serenity-is/corelib\";\nimport { format, getRemoteData, localText, notifySuccess } from \"@serenity-is/corelib/q\";\nimport { PermissionCheckEditor } from \"./PermissionCheckEditor\";\n\nexport class UserPermissionDialog extends TemplatedDialog<UserPermissionDialogOptions>\n{\n\n    private permissions: PermissionCheckEditor;\n\n    constructor(opt: UserPermissionDialogOptions) {\n        super(opt);\n\n        this.permissions = new PermissionCheckEditor(this.byId('Permissions'), {\n            showRevoke: true\n        });\n\n\n\n\n        UserPermissionService.List({\n            UserID: this.options.userID,\n            Module: null,\n            Submodule: null\n        }, response => {\n            this.permissions.value = response.Entities;\n        });\n\n\n\n\n\n\n        UserPermissionService.ListRolePermissions({\n            UserID: this.options.userID,\n            Module: null,\n            Submodule: null,\n        }, response => {\n            this.permissions.rolePermissions = response.Entities;\n        });\n\n\n\n\n\n        this.permissions.implicitPermissions = getRemoteData('Administration.ImplicitPermissions');\n\n\n\n        this.dialogTitle = format(localText('Site.UserPermissionDialog.DialogTitle'),\n            this.options.username);\n\n\n\n\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    protected getDialogButtons() {\n        return [\n            {\n                text: localText('Dialogs.OkButton'),\n                cssClass: 'btn btn-primary',\n                click: e => {\n                    UserPermissionService.Update({\n                        UserID: this.options.userID,\n                        Permissions: this.permissions.value,\n                        Module: null,\n                        Submodule: null\n                    }, response => {\n                        this.dialogClose();\n                        window.setTimeout(() => notifySuccess(localText('Site.UserPermissionDialog.SaveSuccess')), 0);\n                    });\n                }\n            }, {\n                text: localText('Dialogs.CancelButton'),\n                click: () => this.dialogClose()\n            }\n        ];\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    protected getTemplate(): string {\n        return '<div id=\"~_Permissions\"></div>';\n    }\n\n\n\n\n\n\n\n\n}\n\n\n\n\n\n\n\nexport interface UserPermissionDialogOptions {\n    userID?: number;\n    username?: string;\n}\n"],
  "mappings": "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",
  "names": ["import_q", "import_corelib", "import_q", "import_corelib", "import_q", "import_corelib", "import_q", "UserPermissionDialog", "opt", "PermissionCheckEditor", "UserPermissionService", "response", "e", "__name", "import_corelib", "import_q", "UserDialog", "UserForm", "e", "Texts", "UserRow", "UserService", "buttons", "UserPermissionDialog", "asPanel", "self", "CurrentEmployeeRowId", "EmployeeRowID", "EmployeeRowEditor", "EmployeeProfileService", "response", "index", "__name", "__decorateClass", "UserGrid", "UserColumns", "UserDialog", "UserRow", "UserService", "container", "columns", "impersonate", "x", "ctx", "roles", "rolesLookup", "RoleRow", "lookup", "roleList", "__name", "__decorateClass", "pageInit", "UserGrid", "__name"]
}
