{
  "version": 3,
  "sources": ["../../../../../../Modules/HumanResource/EmployeeProfile/EmployeeBonus/EmployeeBonusPage.ts", "../../../../../../Modules/HumanResource/EmployeeProfile/EmployeeBonus/EmployeeBonusGrid.ts", "../../../../../../Modules/HumanResource/EmployeeProfile/EmployeeBonus/EmployeeBonusDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\r\nimport { EmployeeBonusGrid } from './EmployeeBonusGrid';\r\n\r\nexport default function pageInit() {\n    initFullHeightGridPage(new EmployeeBonusGrid($('#GridDiv')).element);\n}", "import { Decorators, EntityGrid } from '@serenity-is/corelib';\r\nimport { EmployeeBonusColumns, EmployeeBonusRow, EmployeeBonusService } from '../../../ServerTypes/EmployeeProfile';\r\nimport { EmployeeBonusDialog } from './EmployeeBonusDialog';\r\nimport { Authorization, isEmptyOrNull } from '@serenity-is/corelib/q';\nimport { OccupationService, DepartmentService, JobGradeService, DivisionService, SectionService } from '../../../ServerTypes/OrganisationHierarchy';\nimport { PermissionKeys } from '../../../ServerTypes/Administration';\nimport { Select2Editor, QuickFilter, Widget } from '@serenity-is/corelib';\nimport { EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { MasterCostCentreService } from '../../../ServerTypes/Master';\n\r\n@Decorators.registerClass('HRMSoftware.EmployeeProfile.EmployeeBonusGrid')\nexport class EmployeeBonusGrid extends EntityGrid<EmployeeBonusRow, any> {\n    protected getColumnsKey() { return EmployeeBonusColumns.columnsKey; }\n    protected getDialogType() { return EmployeeBonusDialog; }\n    protected getRowDefinition() { return EmployeeBonusRow; }\n    protected getService() { return EmployeeBonusService.baseUrl; }\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n    protected getQuickFilters(): QuickFilter<Widget<any>, any>[] {\n        //Gets the Filters defined in the Columns or in parent grids.\n        let filters = super.getQuickFilters();\n        var targetedRow = EmployeeBonusRow\n        // console.log(filters[3].type = Select2Editor)\n        if (Authorization.hasPermission(PermissionKeys.HumanResources)) {\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: targetedRow.Fields.CostCentreName,\n                type: Select2Editor,\n\n                title: \"Cost Centre\",\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: targetedRow.Fields.OccupationName,\n                type: Select2Editor,\n                title: \"Occupation\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: targetedRow.Fields.JobGradeName,\n                type: Select2Editor,\n                title: \"Job Grade\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: targetedRow.Fields.DivisionName,\n                type: Select2Editor,\n                title: \"Division\",\n\n            });\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: targetedRow.Fields.DepartmentName,\n                type: Select2Editor,\n                title: \"Department\",\n\n            });\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: targetedRow.Fields.SectionName,\n                type: Select2Editor,\n                title: \"Section\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: targetedRow.Fields.EmployeeName,\n                type: Select2Editor,\n                title: \"Name\",\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: targetedRow.Fields.EmployeeID,\n                type: Select2Editor,\n                title: \"Employee ID\",\n            });\n            filters.reverse()\n\n        }\n        filters.push({\n            cssClass: \"hidden-xs\",\n            field: targetedRow.Fields.PayMonth,\n            type: Select2Editor,\n            title: \"Pay Month\",\n        });\n\n\n        filters.push({\n            cssClass: \"hidden-xs\",\n            field: targetedRow.Fields.PayYear,\n            type: Select2Editor,\n            title: \"Pay Year\",\n        });\n        return filters;\n    }\n\n    protected createQuickFilters(): void {\n        // let base class to create quick filters first\n        const months: string[] = [\n            'January',   // 0\n            'February',  // 1\n            'March',     // 2\n            'April',     // 3\n            'May',       // 4\n            'June',      // 5\n            'July',      // 6\n            'August',    // 7\n            'September', // 8\n            'October',   // 9\n            'November',  // 10\n            'December'   // 11\n        ];\n\n        super.createQuickFilters();\n\n        if (Authorization.hasPermission(PermissionKeys.HumanResources)) {\n            OccupationService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, EmployeeBonusRow.Fields.OccupationName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            JobGradeService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, EmployeeBonusRow.Fields.JobGradeName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            DepartmentService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, EmployeeBonusRow.Fields.DepartmentName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            DivisionService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, EmployeeBonusRow.Fields.DivisionName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n\n            })\n            SectionService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, EmployeeBonusRow.Fields.SectionName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n\n            })\n            EmployeeProfileService.List({\n            }, response => {\n                for (var index in response.Entities) {\n                    this.findQuickFilter(Select2Editor, EmployeeBonusRow.Fields.EmployeeName).items.push({ id: (response.Entities[index].EmployeeName).toString(), text: (response.Entities[index].EmployeeName).toString(), })\n                    this.findQuickFilter(Select2Editor, EmployeeBonusRow.Fields.EmployeeID).items.push({ id: (response.Entities[index].EmployeeID).toString(), text: (response.Entities[index].EmployeeID).toString(), })\n                }\n            })\n            MasterCostCentreService.List({\n            }, response => {\n                for (var index in response.Entities) {\n                    this.findQuickFilter(Select2Editor, EmployeeBonusRow.Fields.CostCentreName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n\n                }\n            })\n\n        }\n        else\n            this.toolbar.findButton(\"add-button\").toggle(false);\n\n        for (var index in months)\n            this.findQuickFilter(Select2Editor, EmployeeBonusRow.Fields.PayMonth).items.push({ id: (index).toString(), text: (months[index]).toString(), })\n        EmployeeBonusService.List({\n        }, response => {\n            let YearList = [];\n            for (var index in response.Entities)\n                if (YearList.indexOf(response.Entities[index].PayYear) == -1)\n                    YearList.push(response.Entities[index].PayYear)\n            for (var index in YearList)\n                this.findQuickFilter(Select2Editor, EmployeeBonusRow.Fields.PayYear).items.push({ id: (YearList[index]).toString(), text: (YearList[index]).toString(), })\n        })\n    }\n\n}", "import { EmployeeBonusForm, EmployeeBonusRow, EmployeeBonusService } from '../../../ServerTypes/EmployeeProfile';\r\nimport { EmployeeIncentiveForm, EmployeeIncentiveRow, EmployeeIncentiveService } from '../../../ServerTypes/EmployeeProfile';\r\nimport { Criteria, Decorators, EditorUtils, EntityDialog, RetrieveResponse, Select2Editor } from '@serenity-is/corelib';\nimport { ListResponse, serviceCall, Authorization } from '@serenity-is/corelib/q';\nimport { AnnouncementWizardService } from '../../../ServerTypes/Announcement';\r\n\r\n@Decorators.registerClass('HRMSoftware.EmployeeProfile.EmployeeBonusDialog')\nexport class EmployeeBonusDialog extends EntityDialog<EmployeeBonusRow, any> {\n    protected getFormKey() { return EmployeeBonusForm.formKey; }\n    protected getRowDefinition() { return EmployeeBonusRow; }\n    protected getService() { return EmployeeBonusService.baseUrl; }\n\n    protected form = new EmployeeBonusForm(this.idPrefix);\n    public dateString: string;\n\n    public dialogOpen(asPanel?: boolean): void {\n        super.dialogOpen(asPanel);\n        var gettingDatestring = true\n        var self = this;\n        serviceCall<ListResponse<any>>({\n            service: AnnouncementWizardService.baseUrl + '/GetTodayDateTime',\n            method: \"GET\",\n            data: {\n            },\n            async: false,\n            onSuccess: (response) => {\n                self.dateString = response\n                gettingDatestring = false\n            }\n        })\n        while (gettingDatestring == true);\n\n        var PayMonthElement = document.getElementById(this.idPrefix + 'PayMonth')\n        var PayYearElement = document.getElementById(this.idPrefix + 'PayYear')\n\n        let PayMonthEditor = new Select2Editor($(PayMonthElement))\n        let PayYearEditor = new Select2Editor($(PayYearElement))\n        const months: string[] = [\n            'January',   // 0\n            'February',  // 1\n            'March',     // 2\n            'April',     // 3\n            'May',       // 4\n            'June',      // 5\n            'July',      // 6\n            'August',    // 7\n            'September', // 8\n            'October',   // 9\n            'November',  // 10\n            'December'   // 11\n        ];\n        var today = new Date(self.dateString)\n        var todayYear = today.getFullYear()\n\n        var todayMonth = today.getMonth()\n        // Example usage:\n        for (let i = 0; i < months.length; i++)\n            PayMonthEditor.addItem({ id: (i).toString(), text: (months[i]).toString(), }); // 8am - 6pm , will consider lates\n        if (self.isNew())\n            PayMonthEditor.set_value(todayMonth.toString())\n        for (let i = -1; i < 2; i++)\n            PayYearEditor.addItem({ id: (todayYear + i).toString(), text: (todayYear + i).toString(), }); // 8am - 6pm , will consider lates\n        if (self.isNew())\n            PayYearEditor.set_value(todayYear.toString())\n\n    }\n\n}"],
  "mappings": "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",
  "names": ["import_q", "import_corelib", "import_corelib", "import_q", "EmployeeBonusDialog", "EmployeeBonusForm", "EmployeeBonusRow", "EmployeeBonusService", "asPanel", "gettingDatestring", "self", "AnnouncementWizardService", "response", "PayMonthElement", "PayYearElement", "PayMonthEditor", "PayYearEditor", "months", "today", "todayYear", "todayMonth", "i", "__name", "__decorateClass", "import_q", "import_corelib", "EmployeeBonusGrid", "EmployeeBonusColumns", "EmployeeBonusDialog", "EmployeeBonusRow", "EmployeeBonusService", "container", "filters", "targetedRow", "PermissionKeys", "months", "OccupationService", "response", "index", "JobGradeService", "DepartmentService", "DivisionService", "SectionService", "EmployeeProfileService", "MasterCostCentreService", "YearList", "__name", "__decorateClass", "pageInit", "EmployeeBonusGrid", "__name"]
}
