{
  "version": 3,
  "sources": ["../../../../../../Modules/HumanResource/EmployeeLate/EmployeeLate/EmployeeLatePage.ts", "../../../../../../Modules/HumanResource/EmployeeLate/EmployeeLate/EmployeeLateGrid.ts", "../../../../../../Modules/HumanResource/EmployeeLate/EmployeeLate/EmployeeLateDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\nimport { EmployeeLateGrid } from './EmployeeLateGrid';\n\nexport default function pageInit() {\n    initFullHeightGridPage(new EmployeeLateGrid($('#GridDiv')).element);\n}", "import { Decorators, EntityGrid, ListResponse } from '@serenity-is/corelib';\nimport { EmployeeLateColumns, EmployeeLateRow, EmployeeLateService } from '../../../ServerTypes/EmployeeLate';\nimport { EmployeeLateDialog } from './EmployeeLateDialog';\n\nimport { PermissionKeys } from '../../../ServerTypes/Administration';\nimport { Authorization } from '@serenity-is/corelib/q';\nimport { Select2Editor, QuickFilter, Widget } from '@serenity-is/corelib';\nimport { EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { OccupationService, JobGradeService, DepartmentService, DivisionService } from '../../../ServerTypes/OrganisationHierarchy';\n\n@Decorators.registerClass('HRMSoftware.EmployeeLate.EmployeeLateGrid')\nexport class EmployeeLateGrid extends EntityGrid<EmployeeLateRow, any> {\n    protected getColumnsKey() { return EmployeeLateColumns.columnsKey; }\n    protected getDialogType() { return EmployeeLateDialog; }\n    protected getRowDefinition() { return EmployeeLateRow; }\n    protected getService() { return EmployeeLateService.baseUrl; }\n\n    protected getQuickFilters(): QuickFilter<Widget<any>, any>[] {\n\n        //Gets the Filters defined in the Columns or in parent grids.\n        let filters = super.getQuickFilters();\n        var thisrow = EmployeeLateRow\n        // console.log(filters[3].type = Select2Editor)\n        if (Authorization.hasPermission(PermissionKeys.HumanResources)) {\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: thisrow.Fields.OccupationName,\n                type: Select2Editor,\n                title: \"Occupation\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: thisrow.Fields.JobGradeName,\n                type: Select2Editor,\n                title: \"Job Grade\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: thisrow.Fields.DivisionName,\n                type: Select2Editor,\n                title: \"Division\",\n\n            });\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: thisrow.Fields.DepartmentName,\n                type: Select2Editor,\n                title: \"Department\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: thisrow.Fields.EmployeeName,\n                type: Select2Editor,\n                title: \"Name\",\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: thisrow.Fields.EmployeeId,\n                type: Select2Editor,\n                title: \"Employee ID\",\n            });\n            filters.reverse()\n\n        }\n        return filters;\n    }\n    protected createQuickFilters(): void {\n        // let base class to create quick filters first\n    \n        super.createQuickFilters();\n        var thisrow = EmployeeLateRow\n        if (Authorization.hasPermission(PermissionKeys.HumanResources)) {\n\n            OccupationService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, thisrow.Fields.OccupationName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            JobGradeService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, thisrow.Fields.JobGradeName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            DepartmentService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, thisrow.Fields.DepartmentName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            DivisionService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, thisrow.Fields.DivisionName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n\n            })\n            EmployeeProfileService.List({\n            }, response => {\n                for (var index in response.Entities) {\n                    this.findQuickFilter(Select2Editor, thisrow.Fields.EmployeeName).items.push({ id: (response.Entities[index].EmployeeName).toString(), text: (response.Entities[index].EmployeeName).toString(), })\n                    this.findQuickFilter(Select2Editor, thisrow.Fields.EmployeeId).items.push({ id: (response.Entities[index].EmployeeID).toString(), text: (response.Entities[index].EmployeeID).toString(), })\n\n                }\n            })\n        }\n        else\n            this.toolbar.findButton(\"add-button\").toggle(false);\n\n    }\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n    protected onViewProcessData(response: ListResponse<EmployeeLateRow>) {\n        response = super.onViewProcessData(response);\n        this.toolbar.findButton(\"column-picker-button\").toggle(false);\n        return response;\n\n    }\n}", "import { Decorators, EditorUtils, EntityDialog, Select2Editor } from '@serenity-is/corelib';\nimport { EmployeeLateForm, EmployeeLateRow, EmployeeLateService } from '../../../ServerTypes/EmployeeLate';\nimport { EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\n\n@Decorators.registerClass('HRMSoftware.EmployeeLate.EmployeeLateDialog')\nexport class EmployeeLateDialog extends EntityDialog<EmployeeLateRow, any> {\n    protected getFormKey() { return EmployeeLateForm.formKey; }\n    protected getRowDefinition() { return EmployeeLateRow; }\n    protected getService() { return EmployeeLateService.baseUrl; }\n\n    protected form = new EmployeeLateForm(this.idPrefix);\n    public dialogOpen(asPanel?: boolean): void {\n\n\n\n        super.dialogOpen(asPanel);\n        var EmployeeRowIdValue = this.form.EmployeeRowId.value\n        EditorUtils.setReadonly(this.form.EmployeeName.element, true);\n\n        EmployeeProfileService.List({\n        }, response => {\n\n            var EmployeeRowIdElement = document.getElementById(this.idPrefix + 'EmployeeRowId')\n            let EmployeeRowIdEditor = new Select2Editor($(EmployeeRowIdElement))\n\n            var PersonNameElement = document.getElementById(this.idPrefix + 'EmployeeName')\n            interface Item {\n                id: number;\n                name: string;\n            }\n            let listOfDicts: Item[] = [];\n\n            for (var index in response.Entities) {\n                EmployeeRowIdEditor.addItem({ id: (response.Entities[index].Id).toString(), text: (response.Entities[index].EmployeeID).toString(), }); // 8am - 6pm , will consider lates\n                listOfDicts.push({ id: response.Entities[index].Id, name: response.Entities[index].EmployeeName });\n            }\n\n            $(EmployeeRowIdElement).on('change', async function () {\n\n\n                for (var index in listOfDicts) {\n                    if (listOfDicts[index].id == $(EmployeeRowIdElement).val())\n                        $(PersonNameElement).val(listOfDicts[index].name)\n                }\n            })\n            if (EmployeeRowIdValue != null)\n                $(EmployeeRowIdElement).val(EmployeeRowIdValue.toString()).trigger('change');\n\n        });\n\n\n    }\n\n}"],
  "mappings": "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",
  "names": ["import_q", "import_corelib", "import_corelib", "EmployeeLateDialog", "EmployeeLateForm", "EmployeeLateRow", "EmployeeLateService", "asPanel", "EmployeeRowIdValue", "EmployeeProfileService", "response", "EmployeeRowIdElement", "EmployeeRowIdEditor", "PersonNameElement", "listOfDicts", "index", "__async", "__name", "__decorateClass", "import_q", "import_corelib", "EmployeeLateGrid", "EmployeeLateColumns", "EmployeeLateDialog", "EmployeeLateRow", "EmployeeLateService", "filters", "thisrow", "PermissionKeys", "OccupationService", "response", "index", "JobGradeService", "DepartmentService", "DivisionService", "EmployeeProfileService", "container", "__name", "__decorateClass", "pageInit", "EmployeeLateGrid", "__name"]
}
