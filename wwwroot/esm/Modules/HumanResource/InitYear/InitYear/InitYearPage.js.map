{
  "version": 3,
  "sources": ["../../../../../../Modules/HumanResource/InitYear/InitYear/InitYearPage.ts", "../../../../../../Modules/HumanResource/InitYear/InitYear/InitYearGrid.ts", "../../../../../../Modules/HumanResource/InitYear/InitYear/InitYearDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\nimport { InitYearGrid } from './InitYearGrid';\n\nexport default function pageInit() {\n    initFullHeightGridPage(new InitYearGrid($('#GridDiv')).element);\n}", "import { Decorators, EntityGrid, ListResponse } from '@serenity-is/corelib';\nimport { InitYearColumns, InitYearRow, InitYearService } from '../../../ServerTypes/InitYear';\nimport { InitYearDialog } from './InitYearDialog';\n\n@Decorators.registerClass('HRMSoftware.InitYear.InitYearGrid')\nexport class InitYearGrid extends EntityGrid<InitYearRow, any> {\n    protected getColumnsKey() { return InitYearColumns.columnsKey; }\n    protected getDialogType() { return InitYearDialog; }\n    protected getRowDefinition() { return InitYearRow; }\n    protected getService() { return InitYearService.baseUrl; }\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n    protected onViewProcessData(response: ListResponse<InitYearRow>) {\n        response = super.onViewProcessData(response);\n        this.toolbar.findButton(\"column-picker-button\").toggle(false);\n        return response;\n\n    }\n}", "import { Decorators, EntityDialog, RetrieveResponse, SaveResponse, Select2Editor, EditorUtils } from '@serenity-is/corelib';\nimport { InitYearForm, InitYearRow, InitYearService } from '../../../ServerTypes/InitYear';\nimport Holidays from 'date-holidays'\nimport { AnnualLeavePolicyService } from '../../../../ServerTypes/AnnualLeavePolicy';\nimport { alertDialog } from '@serenity-is/corelib/q';\nimport { serviceCall, isEmptyOrNull } from '@serenity-is/corelib/q';\nimport { CompanySettingsService } from '../../../ServerTypes/CompanySettings';\nimport { AnnualLeaveJobGradePolicyService } from '../../../ServerTypes/AnnualLeaveJobGradePolicy';\nimport { SickLeavePolicyService } from '../../../ServerTypes/SickLeavePolicy';\nimport { JobGradeService } from '../../../ServerTypes/OrganisationHierarchy';\n\n@Decorators.registerClass('HRMSoftware.InitYear.InitYearDialog')\nexport class InitYearDialog extends EntityDialog<InitYearRow, any> {\n    protected getFormKey() { return InitYearForm.formKey; }\n    protected getRowDefinition() { return InitYearRow; }\n    protected getService() { return InitYearService.baseUrl; }\n    public AlreadyInitYear: number[] = [];\n    public JobGradeList: number[] = [];\n\n    public StartingRange: number[] = [];\n    public EndingRange: number[] = [];\n    protected form = new InitYearForm(this.idPrefix);\n    public max: number;\n    public check_job_grade_annual_leave: number;\n\n\n    constructor() {\n        super();\n        this.deleteButton.remove()\n        this.cloneButton.remove()\n\n\n        CompanySettingsService.List({\n        }, response => {\n\n            for (var index in response.Entities)\n            {\n                if (response.Entities[index].IsActive==1)\n                {\n                    if (response.Entities[index].EntitleAnnualBasedOnJobGrade == true) {\n                        EditorUtils.setReadonly(this.form.PolicyList.element, true);\n                        this.check_job_grade_annual_leave = 1\n\n                    }\n                    if (response.Entities[index].EntitleAnnualBasedOnYearOfService == true) \n                        EditorUtils.setReadonly(this.form.AnnulLeaveBasedOnJobGrade.element, true);\n\n                }\n            }\n        });\n\n\n\n\n\n        JobGradeService.List({\n        }, response => {\n            for (var index in response.Entities) \n                this.JobGradeList.push(response.Entities[index].Id)\n            \n        });\n        \n\n    }\n\n\n    \n\n    protected onDialogOpen()\n    {\n\n        if (!isEmptyOrNull(this.entityId))\n            this.dialogTitle = this.form.Year.value.toString() +\" Year\"\n\n        else\n            this.dialogTitle = \"\"\n\n        if (this.isNew())\n        {\n            serviceCall<RetrieveResponse<any>>({\n                service: InitYearService.baseUrl + '/ListYear',\n                data: {\n\n                },\n                method: \"GET\",\n                async: true,\n                onSuccess: (response) => {\n\n                    console.log(response.Entities[0].YearString)\n                    let yearString = response.Entities[0].YearString\n                    let yearsArray = yearString.split(',');\n\n                    // Map over the array to remove '-' and parse into numbers\n\n                    // Map over the array to extract the numeric part of each year\n\n                    // Filter out years that contain '-'\n                    yearsArray = yearsArray.filter(year => !year.includes('-'));\n                    console.log(yearsArray)\n                    // Join the filtered array back into a string\n\n                    var YearElement = document.getElementById(this.idPrefix + 'Year')\n                    var YearEditor = new Select2Editor($(YearElement))\n                    for (var i = 0; i < yearsArray.length; i++) {\n                        YearEditor.addItem({ id: (yearsArray[i]).toString(), text: (yearsArray[i]).toString(), });\n                    }\n                },\n                onError: (error) => {\n                }\n            });\n\n            InitYearService.List({\n            }, response => {\n\n                for (var entities in response.Entities) {\n                    this.AlreadyInitYear.push(response.Entities[entities].Year)\n                }\n              \n            });\n\n\n        }\n\n\n        else {\n            this.saveAndCloseButton.remove()\n            EditorUtils.setReadonly(this.form.Year.element, true);\n\n        }\n\n\n        super.onDialogOpen()\n\n\n     \n\n        //var LeaveBringForwardMethodElement = '.LeaveBringForwardMethod';\n        var LeaveBringForwardMethodElement = document.getElementById(this.idPrefix + 'LeaveBringForwardMethod')\n\n\n\n\n        //var BringForwardPercentageElement = '.BringForwardPercentage';\n        var BringForwardPercentageElement = document.getElementById(this.idPrefix + 'BringForwardPercentage')\n\n\n\n        //var BringForwardDaysElement =  '.BringForwardDays';\n        var BringForwardDaysElement = document.getElementById(this.idPrefix + 'BringForwardDays')\n\n\n\n\n        //var RoundUpElement = '.LeaveRoundUp';\n        var RoundUpElement = document.getElementById(this.idPrefix + 'LeaveRoundUp')\n\n        $('.LeaveRoundUp').hide();\n\n\n        this.process_form()\n\n        var this_reference = this\n        $(LeaveBringForwardMethodElement).on('change', async function () {\n            console.log($(LeaveBringForwardMethodElement).val())\n            /*\n            if ($(LeaveBringForwardMethodElement).val() == 3)//Manual\n            {\n                $('.BringForwardDays').show();\n                $(BringForwardPercentageElement).val('');\n                $('.BringForwardPercentage').hide()\n                $('.LeaveRoundUp').hide();\n\n            }\n\n            else if ($(LeaveBringForwardMethodElement).val() == 6)//MaximumDaysCarryForwardByPercentage\n            {\n                $('.BringForwardPercentage').show();\n                $('.LeaveRoundUp').show();\n                $(BringForwardDaysElement).val('')\n                $('.BringForwardDays').hide()\n            }\n\n            else {\n                $('.BringForwardDays').hide();\n                $('.BringForwardPercentage').hide();\n                $('.LeaveRoundUp').hide();\n            }\n            */\n            this_reference.process_form()\n        })\n\n\n\n\n\n\n\n    }\n\n    public process_form()\n    {\n        var LeaveBringForwardMethodElement = document.getElementById(this.idPrefix + 'LeaveBringForwardMethod')\n        var BringForwardPercentageElement = document.getElementById(this.idPrefix + 'BringForwardPercentage')\n        var BringForwardDaysElement = document.getElementById(this.idPrefix + 'BringForwardDays')\n\n        if ($(LeaveBringForwardMethodElement).val() == 3)//Manual\n        {\n            $('.BringForwardDays').show();\n            $(BringForwardPercentageElement).val('');\n            $('.BringForwardPercentage').hide()\n            $('.LeaveRoundUp').hide();\n\n        }\n\n        else if ($(LeaveBringForwardMethodElement).val() == 6)//MaximumDaysCarryForwardByPercentage\n        {\n            $('.BringForwardPercentage').show();\n            $('.LeaveRoundUp').show();\n            $(BringForwardDaysElement).val('')\n            $('.BringForwardDays').hide()\n        }\n\n        else {\n            $('.BringForwardDays').hide();\n            $('.BringForwardPercentage').hide();\n            $('.LeaveRoundUp').hide();\n        }\n\n    }\n\n\n    protected save_submitHandler(response): void\n    {\n        const CarryForwardMethod = parseInt(this.form.LeaveBringForwardMethod.value);\n        if (this.form.BringForwardPercentage.value < 0 && CarryForwardMethod == 6)\n        {\n            alertDialog('The carry forward percentage must be greater than 0')\n            return\n        }\n        function checkRangeClash(name:string,start: number[], end: number[]): boolean {\n            for (let i = 0; i < start.length; i++) {\n                for (let j = i + 1; j < start.length; j++) {\n                    if ((start[i] >= start[j] && start[i] <= end[j]) ||\n                        (end[i] >= start[j] && end[i] <= end[j]) ||\n                        (start[j] <= start[i] && end[j] >= end[i])) {\n                        alertDialog('interval overlapping in ' + start[i] + ' until ' + end[i] + ' and ' + start[j] + ' until ' + end[j] +' at '+name)\n\n                        return true; // Clash found\n                    }\n                }\n            }\n            return false; // No clash\n        }\n        var AnnualLeavePolicyList = this.form.PolicyList.value\n        this.StartingRange = []\n        this.EndingRange = []\n        for (var index in AnnualLeavePolicyList)\n        {this.StartingRange.push(AnnualLeavePolicyList[index].ServiceFromYear)\n            this.EndingRange.push(AnnualLeavePolicyList[index].ServiceUntilYear)}\n        if (checkRangeClash(\"Annual Leave\",this.StartingRange, this.EndingRange) == true)\n            return\n        var SickLeavePolicyList = this.form.SickLeavePolicyList.value\n        this.StartingRange = []\n        this.EndingRange = []\n        for (var index in SickLeavePolicyList) {\n            this.StartingRange.push(SickLeavePolicyList[index].ServiceFromYear)\n            this.EndingRange.push(SickLeavePolicyList[index].ServiceUntilYear)\n        }\n        if (checkRangeClash(\"Sick Leave\", this.StartingRange, this.EndingRange) == true) \n            return\n        for (var index in this.AlreadyInitYear)\n        {\n            if (this.AlreadyInitYear[index] == this.form.Year.value)\n            {\n                alertDialog('the working calendar for' + this.form.Year.value + ' has already been completed')\n                return\n            }\n        }\n        if (this.check_job_grade_annual_leave == 1)\n        {\n            let dynamicList: number[] = []; // Initialize an empty array\n            for (var index in this.form.AnnulLeaveBasedOnJobGrade)\n                dynamicList.push(this.form.AnnulLeaveBasedOnJobGrade[index].JobGradeLevel)\n            function hasDuplicates(array: number[]): boolean {\n                let encountered: { [key: number]: boolean } = {};\n\n                for (let num of array) {\n                    if (encountered[num]) {\n                        // If the number is already encountered, return true\n                        return true;\n                    } else {\n                        // Mark the number as encountered\n                        encountered[num] = true;\n                    }\n                }\n\n                // If no duplicates found, return false\n                return false;\n            }\n            if (hasDuplicates(dynamicList)) {\n                alertDialog('Annual Leave Entitlement Based on job grade have duplicated job grade records')\n                return\n            }\n            if (this.JobGradeList.length != dynamicList.length)\n            {\n                alertDialog('Please assign annual leaves for all currently existing JobGrade')\n                return\n            }\n        }\n\n         super.save_submitHandler(response)\n\n            /*\n            serviceCall<RetrieveResponse<any>>({\n            service: AnnualLeavePolicyService.baseUrl + '/ListAnnualLeavePolicy',\n            data: {\n\n            },\n            method: \"GET\",\n            async: false,\n            onSuccess: (response) => {\n             \n                \n                for (var x in AnnualLeavePolicy)\n                {\n                    var FromYear = AnnualLeavePolicy[x].ServiceFromYear\n                    var Until = AnnualLeavePolicy[x].ServiceUntilYear\n                    var interval1: number[] = generateRange(FromYear, Until);\n                    console.log(FromYear)\n                    console.log(Until)\n                    for (var index in this.StartingRange)\n                    {\n                        var StartingNumber = this.StartingRange[index]\n                        var EndingNumber = this.EndingRange[index]\n                        var interval2: number[] = generateRange(StartingNumber, EndingNumber);\n                        console.log(interval1, interval2)\n                        if (checkOverlap(interval1, interval2))\n                        {\n                            alertDialog('interval overlapping in ' + FromYear + ' until ' + Until)\n                            return\n                        }\n                    }\n                }\n                \n                console.log(response)\n            },\n            onError: (error) => {\n                console.log(error.Error);\n            }\n        });\n        */\n\n       // super.save_submitHandler(response)\n\n\n    }\n\n\n    /*\n    protected onSaveSuccess(response): void {\n\n\n            super.onSaveSuccess(response);\n\n        for (var index in this.form.PolicyList.value) {\n            var RowID = this.form.PolicyList.value[index].Id\n            AnnualLeavePolicyService.Update({\n                EntityId: RowID,\n                Entity:\n                {\n                    \"Year\": this.form.Year.value\n                },\n            });\n\n\n        }\n\n        for (var index in this.form.SickLeavePolicyList.value) {\n            var RowID = this.form.SickLeavePolicyList.value[index].Id\n\n            SickLeavePolicyService.Update({\n                EntityId: RowID,\n                Entity:\n                {\n                    \"Year\": this.form.Year.value\n                },\n            });\n        }\n        for (var index in this.form.AnnulLeaveBasedOnJobGrade.value) {\n            var RowID = this.form.AnnulLeaveBasedOnJobGrade.value[index].Id\n            AnnualLeaveJobGradePolicyService.Update({\n                EntityId: RowID,\n                Entity:\n                {\n                    \"Year\": this.form.Year.value\n                },\n            });\n        }\n    }\n    */\n    /*\n    protected onDialogClose()\n    {\n        for (var index in this.form.PolicyList.value)\n        {\n            var RowID = this.form.PolicyList.value[index].Id\n            AnnualLeavePolicyService.Update({\n                EntityId: RowID,\n                Entity:\n                {\n                    \"Year\": this.form.Year.value\n                },\n            });\n        }\n        for (var index in this.form.SickLeavePolicyList.value) {\n            var RowID = this.form.SickLeavePolicyList.value[index].Id\n            SickLeavePolicyService.Update({\n                EntityId: RowID,\n                Entity:\n                {\n                    \"Year\": this.form.Year.value\n                },\n            });\n        }\n        for (var index in this.form.AnnulLeaveBasedOnJobGrade.value) {\n            var RowID = this.form.AnnulLeaveBasedOnJobGrade.value[index].Id\n            AnnualLeaveJobGradePolicyService.Update({\n                EntityId: RowID,\n                Entity:\n                {\n                    \"Year\": this.form.Year.value\n                },\n            });\n        }\n        super.onDialogClose()\n    }\n    */\n\n    protected afterLoadEntity()\n    {\n        super.afterLoadEntity();\n    }\n}"],
  "mappings": "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",
  "names": ["import_q", "import_corelib", "import_corelib", "import_q", "InitYearDialog", "InitYearForm", "CompanySettingsService", "response", "index", "JobGradeService", "InitYearRow", "InitYearService", "yearsArray", "year", "YearElement", "YearEditor", "i", "error", "entities", "LeaveBringForwardMethodElement", "BringForwardPercentageElement", "BringForwardDaysElement", "RoundUpElement", "this_reference", "__async", "CarryForwardMethod", "checkRangeClash", "name", "start", "end", "j", "__name", "AnnualLeavePolicyList", "SickLeavePolicyList", "hasDuplicates", "array", "encountered", "num", "dynamicList", "__decorateClass", "InitYearGrid", "InitYearColumns", "InitYearDialog", "InitYearRow", "InitYearService", "container", "response", "__name", "__decorateClass", "pageInit", "InitYearGrid", "__name"]
}
