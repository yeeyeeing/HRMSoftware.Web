{
  "version": 3,
  "sources": ["../../../../../../Modules/HumanResource/Race/Race/RacePage.ts", "../../../../../../Modules/HumanResource/Race/Race/RaceGrid.ts", "../../../../../../Modules/ServerTypes/Race/RaceColumns.ts", "../../../../../../Modules/ServerTypes/Race/RaceForm.ts", "../../../../../../Modules/ServerTypes/Race/RaceRow.ts", "../../../../../../Modules/ServerTypes/Race/RaceService.ts", "../../../../../../Modules/HumanResource/Race/Race/RaceDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\nimport { RaceGrid } from './RaceGrid';\n\nexport default function pageInit() {\n    initFullHeightGridPage(new RaceGrid($('#GridDiv')).element);\n}", "import { Decorators, EntityGrid, ListResponse } from '@serenity-is/corelib';\nimport {  RaceColumns, RaceRow, RaceService } from '../../../ServerTypes/Race';\nimport { RaceDialog } from './RaceDialog';\n\n@Decorators.registerClass('HRMSoftware.Race.RaceGrid')\nexport class RaceGrid extends EntityGrid<RaceRow, any> {\n    protected getColumnsKey() { return RaceColumns.columnsKey; }\n    protected getDialogType() { return RaceDialog; }\n    protected getRowDefinition() { return RaceRow; }\n    protected getService() { return RaceService.baseUrl; }\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n    protected onViewProcessData(response: ListResponse<RaceRow>) {\n        response = super.onViewProcessData(response);\n        this.toolbar.findButton(\"column-picker-button\").toggle(false);\n        return response;\n\n    }\n}", "\uFEFFexport class RaceColumns {\n    static columnsKey = 'Race.Race';\n}", "\uFEFFimport { StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface RaceForm {\n    Race: StringEditor;\n}\n\nexport class RaceForm extends PrefixedContext {\n    static formKey = 'Race.Race';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!RaceForm.init)  {\n            RaceForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(RaceForm, [\n                'Race', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface RaceRow {\n    Id?: number;\n    Race?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class RaceRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'Race';\n    static readonly localTextPrefix = 'Race.Race';\n    static readonly lookupKey = 'Race.Race';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<RaceRow>('Race.Race') }\n    static async getLookupAsync() { return getLookupAsync<RaceRow>('Race.Race') }\n\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = 'Administration:HumanResources';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<RaceRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { RaceRow } from \"./RaceRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace RaceService {\n    export const baseUrl = 'Race/Race';\n\n    export declare function Create(request: SaveRequest<RaceRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<RaceRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<RaceRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<RaceRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Race/Race/Create\",\n        Update: \"Race/Race/Update\",\n        Delete: \"Race/Race/Delete\",\n        Retrieve: \"Race/Race/Retrieve\",\n        List: \"Race/Race/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>RaceService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "import { Decorators, EntityDialog, SaveResponse } from '@serenity-is/corelib';\nimport { RaceForm, RaceRow, RaceService } from '../../../ServerTypes/Race';\nimport { alertDialog, RetrieveResponse, serviceCall, notifyError } from '@serenity-is/corelib/q';\n\n@Decorators.registerClass('HRMSoftware.Race.RaceDialog')\nexport class RaceDialog extends EntityDialog<RaceRow, any> {\n    protected getFormKey() { return RaceForm.formKey; }\n    protected getRowDefinition() { return RaceRow; }\n    protected getService() { return RaceService.baseUrl; }\n\n    protected form = new RaceForm(this.idPrefix);\n    public list_of_race: string[] = [];\n    constructor() {\n        super();\n\n        RaceService.List({\n        }, response => {\n\n            for (var key in response.Entities) {\n\n                this.list_of_race.push(response.Entities[key].Race.toLowerCase())\n\n            }\n\n        });\n\n\n\n    }\n    protected save_submitHandler(response): void {\n        var list_of_errors: string[] = [];\n\n        var InsertedRace = this.form.Race.value.toLowerCase()\n        for (var item in this.list_of_race) {\n            if (this.list_of_race[item] === InsertedRace)\n                list_of_errors.push(\"This Race is inserted.\")\n        }\n\n        if (list_of_errors.length > 0) {\n            const concatenatedString: string = list_of_errors.map(item => `- ${item}`).join('\\n');\n            notifyError(concatenatedString)\n        }\n\n        else\n            super.save_submitHandler(response)\n\n\n    }\n\n}"],
  "mappings": "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",
  "names": ["import_q", "import_corelib", "RaceColumns", "__name", "import_corelib", "import_q", "_RaceForm", "prefix", "w0", "RaceForm", "__name", "import_q", "RaceRow", "__async", "__name", "import_q", "RaceService", "x", "r", "s", "o", "import_corelib", "import_q", "RaceDialog", "RaceForm", "RaceService", "response", "key", "RaceRow", "list_of_errors", "InsertedRace", "item", "concatenatedString", "__name", "__decorateClass", "RaceGrid", "RaceColumns", "RaceDialog", "RaceRow", "RaceService", "container", "response", "__name", "__decorateClass", "pageInit", "RaceGrid", "__name"]
}
