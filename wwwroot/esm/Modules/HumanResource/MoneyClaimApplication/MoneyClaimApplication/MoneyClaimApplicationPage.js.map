{
  "version": 3,
  "sources": ["../../../../../../Modules/HumanResource/MoneyClaimApplication/MoneyClaimApplication/MoneyClaimApplicationPage.ts", "../../../../../../Modules/HumanResource/MoneyClaimApplication/MoneyClaimApplication/MoneyClaimApplicationGrid.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\nimport { MoneyClaimApplicationGrid } from './MoneyClaimApplicationGrid';\n\nexport default function pageInit() {\n    initFullHeightGridPage(new MoneyClaimApplicationGrid($('#GridDiv')).element);\n}", "import { Criteria, Decorators, EntityGrid, GridRowSelectionMixin, IntegerEditor, ListResponse, LookupEditor, QuickFilter, Select2Editor, StringEditor, Widget, RetrieveResponse } from '@serenity-is/corelib';\nimport { MoneyClaimApplicationColumns, MoneyClaimApplicationRow, MoneyClaimApplicationService, MoneyClaimingStatus } from '../../../ServerTypes/MoneyClaimApplication';\nimport { MoneyClaimApplicationDialog } from './MoneyClaimApplicationDialog';\nimport { PermissionKeys } from '../../../ServerTypes/Administration';\nimport { OccupationService, JobGradeService, DepartmentService, DivisionService } from '../../../ServerTypes/OrganisationHierarchy';\nimport { EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { MasterCostCentreService } from '../../../ServerTypes/Master';\nimport { OrganisationChartService } from '../../../ServerTypes/OrganisationChart';\r\nimport { serviceCall, Authorization, isEmptyOrNull, getLookup, confirm, alertDialog, notifyInfo } from '@serenity-is/corelib/q';\nimport { MoneyClaimApplicationRejectDialog } from './MoneyClaimApplicationRejectDialog';\r\n\n@Decorators.registerClass('HRMSoftware.MoneyClaimApplication.MoneyClaimApplicationGrid')\nexport class MoneyClaimApplicationGrid extends EntityGrid<MoneyClaimApplicationRow, any> {\n    protected getColumnsKey() { return MoneyClaimApplicationColumns.columnsKey; }\n    protected getDialogType() { return MoneyClaimApplicationDialog; }\n    protected getRowDefinition() { return MoneyClaimApplicationRow; }\n    protected getService() { return MoneyClaimApplicationService.baseUrl; }\n    protected getQuickFilters(): QuickFilter<Widget<any>, any>[] {\n        //Gets the Filters defined in the Columns or in parent grids.\n        let filters = super.getQuickFilters();\n\n        // console.log(filters[3].type = Select2Editor)\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: MoneyClaimApplicationRow.Fields.OccupationName,\n                type: Select2Editor,\n                title: \"Occupation\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: MoneyClaimApplicationRow.Fields.JobGradeName,\n                type: Select2Editor,\n                title: \"Job Grade\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: MoneyClaimApplicationRow.Fields.DivisionName,\n                type: Select2Editor,\n                title: \"Division\",\n\n            });\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: MoneyClaimApplicationRow.Fields.DepartmentName,\n                type: Select2Editor,\n                title: \"Department\",\n\n            });\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: MoneyClaimApplicationRow.Fields.EmployeeName,\n                type: Select2Editor,\n                title: \"Name\",\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: MoneyClaimApplicationRow.Fields.EmployeeID,\n                type: Select2Editor,\n                title: \"Employee ID\",\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: MoneyClaimApplicationRow.Fields.CostCentreName,\n                type: Select2Editor,\n\n                title: \"Cost Centre\",\n            });\n\n            filters.reverse()\n        \n        return filters;\n    }\n    protected createQuickFilters(): void {\n        // let base class to create quick filters first\n        super.createQuickFilters();\n\n            const months: string[] = [\n                'January',   // 0\n                'February',  // 1\n                'March',     // 2\n                'April',     // 3\n                'May',       // 4\n                'June',      // 5\n                'July',      // 6\n                'August',    // 7\n                'September', // 8\n                'October',   // 9\n                'November',  // 10\n                'December'   // 11\n            ];\n\n            OccupationService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, MoneyClaimApplicationRow.Fields.OccupationName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            JobGradeService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, MoneyClaimApplicationRow.Fields.JobGradeName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            DepartmentService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, MoneyClaimApplicationRow.Fields.DepartmentName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            DivisionService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, MoneyClaimApplicationRow.Fields.DivisionName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n\n            })\n            EmployeeProfileService.List({\n            }, response => {\n                for (var index in response.Entities) {\n                    this.findQuickFilter(Select2Editor, MoneyClaimApplicationRow.Fields.EmployeeName).items.push({ id: (response.Entities[index].EmployeeName).toString(), text: (response.Entities[index].EmployeeName).toString(), })\n                    this.findQuickFilter(Select2Editor, MoneyClaimApplicationRow.Fields.EmployeeID).items.push({ id: (response.Entities[index].EmployeeID).toString(), text: (response.Entities[index].EmployeeID).toString(), })\n\n                }\n            })\n            MasterCostCentreService.List({\n            }, response => {\n                for (var index in response.Entities) {\n                    this.findQuickFilter(Select2Editor, MoneyClaimApplicationRow.Fields.CostCentreName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n\n                }\n            })\n\n\n        \n\n    }\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n\n    protected getButtons() {\n        var buttons = super.getButtons();\n        var self = this\n        /*\n        buttons.push({\n                title: 'Money Claim Batch Approve',\n             cssClass: 'fas fa-hat-wizard text-bg-success approveButton',\n             onClick: e => {\n                 if (self.rowSelection.getSelectedAsInt64().length == 0) {\n                     alertDialog('Please select at least one application to approve')\n                     return\n                 }\n                    confirm(\n                        \"Do you want to approve all selected applications?\",\n                        () => {\n                            let selectedIds = self.rowSelection.getSelectedAsInt64();\n                            let approvePromises = self.rowSelection.getSelectedAsInt64().map(dataId => {\r\n                                return MoneyClaimApplicationService.Retrieve({ EntityId: dataId })\r\n                                    .then(response => {\r\n                                        let EmployeeApproval = response.Entity.EmployeeStatus;\r\n                                        let HrApproval = response.Entity.HrStatus;\r\n                                        let entityId = response.Entity.Id;\r\n                                        let EmployeeRowId = response.Entity.EmployeeRowId;\r\n                                        let updateData: MoneyClaimApplicationRow = {};\r\n                                        // Wrap `serviceCall` in a Promise\r\n                                        return new Promise((resolve, reject) => {\r\n                                            serviceCall<RetrieveResponse<any>>({\r\n                                                service: OrganisationChartService.baseUrl + '/PermissionToAcknowledge',\r\n                                                data: {\r\n                                                    'UserEmployeeRowID': Authorization.userDefinition.EmployeeRowID,\r\n                                                    'ApplicantEmployeeRowID': EmployeeRowId\r\n                                                },\r\n                                                method: \"GET\",\r\n                                                onSuccess: (SuperiorPermission) => {\r\n                                                    if (Authorization.userDefinition.Permissions[PermissionKeys.HumanResources]) { // HR\r\n                                                        if (SuperiorPermission == true) {\r\n                                                            if (EmployeeApproval === MoneyClaimingStatus.NotNeeded || HrApproval === MoneyClaimingStatus.NotNeeded) {\r\n                                                                if (EmployeeApproval === MoneyClaimingStatus.NotNeeded) {\r\n                                                                    updateData = {\r\n                                                                        HrStatus: MoneyClaimingStatus.Approved,\r\n                                                                        HrUpdated: Authorization.userDefinition.EmployeeRowID,\r\n                                                                    };\r\n                                                                } else if (HrApproval === MoneyClaimingStatus.NotNeeded) {\r\n                                                                    updateData = {\r\n                                                                        EmployeeStatus: MoneyClaimingStatus.Approved,\r\n                                                                        EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\r\n                                                                    };\r\n                                                                }\r\n                                                            } else {\r\n                                                                if (HrApproval === MoneyClaimingStatus.Approved) {\r\n                                                                    updateData = {\r\n                                                                        EmployeeStatus: MoneyClaimingStatus.Approved,\r\n                                                                        EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\r\n                                                                    };\r\n                                                                } else if (EmployeeApproval === MoneyClaimingStatus.Approved) {\r\n                                                                    updateData = {\r\n                                                                        HrStatus: MoneyClaimingStatus.Approved,\r\n                                                                        HrUpdated: Authorization.userDefinition.EmployeeRowID,\r\n                                                                    };\r\n                                                                } else {\r\n                                                                    updateData = {\r\n                                                                        EmployeeStatus: MoneyClaimingStatus.Approved,\r\n                                                                        HrStatus: MoneyClaimingStatus.Approved,\r\n                                                                        EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\r\n                                                                        HrUpdated: Authorization.userDefinition.EmployeeRowID\r\n                                                                    };\r\n                                                                }\r\n                                                            }\r\n                                                        }\n                                                        else {\r\n                                                            updateData = {\r\n                                                                HrStatus: MoneyClaimingStatus.Approved,\r\n                                                                HrUpdated: Authorization.userDefinition.EmployeeRowID\r\n                                                            };\r\n                                                        }\r\n                                                    }\n                                                    else {\r\n                                                        updateData = {\r\n                                                            EmployeeStatus: MoneyClaimingStatus.Approved,\r\n                                                            EmployeeUpdated: Authorization.userDefinition.EmployeeRowID\r\n                                                        };\r\n                                                    }\r\n                                                    console.log(updateData)\r\n                                                    // Call `Update` and resolve the promise\r\n                                                    MoneyClaimApplicationService.Update({\n                                                        EntityId: entityId,\n                                                        Entity: updateData\n                                                    }).then(resolve).catch(reject);\r\n                                                },\r\n                                                onError: reject\r\n                                            });\r\n                                        });\r\n                                    });\r\n                            });\r\n\r\n                            // Wait for all operations to complete before refreshing\r\n                            Promise.all(approvePromises)\r\n                                .then(() => {\n                                    notifyInfo(`${selectedIds.length} records have been approved.`)\r\n                                    self.internalRefresh();\r\n                                })\r\n                                .catch(error => {\r\n                                    console.error('Error in update operations:', error);\r\n                                });\n                                    \n                            \r\n                        })\n                },\n                separator: true\n            });\n        buttons.push({\n            title: 'Money Claim Batch Reject',\n            cssClass: 'fas fa-hat-wizard text-bg-danger rejectButton',\n            onClick: e => {\n                if (self.rowSelection.getSelectedAsInt64().length == 0) {\n                    alertDialog('Please select at least one application to reject')\n                    return\n                }\n                confirm(\n                    \"Do you want to reject all selected applications?\",\n                    () => {\n                        var rejectDlg = new MoneyClaimApplicationRejectDialog()\n                        rejectDlg.dialogOpen()\n\n                        rejectDlg.element.on('dialogclose', () => {\n                            let selectedIds = self.rowSelection.getSelectedAsInt64();\n                            var rejectReason = window[\"rejectReason\"]\n                            // Create an array of promises for each delete operation\n                            let rejectPromises = self.rowSelection.getSelectedAsInt64().map(dataId => {\r\n\r\n                                return MoneyClaimApplicationService.Retrieve({\r\n                                    EntityId: dataId\r\n                                }).then(response => {\r\n                                    let EmployeeApproval = response.Entity.EmployeeStatus;\r\n                                    let HrApproval = response.Entity.HrStatus;\r\n                                    let entityId = response.Entity.Id;\r\n                                    let updateData: MoneyClaimApplicationRow = {};\n                                    let EmployeeRowId = response.Entity.EmployeeRowId\r\n                                    return new Promise((resolve, reject) => {\n                                        serviceCall<RetrieveResponse<any>>({\n                                            service: OrganisationChartService.baseUrl + '/PermissionToAcknowledge',\n                                            data: {\n                                                'UserEmployeeRowID': Authorization.userDefinition.EmployeeRowID,\n                                                'ApplicantEmployeeRowID': EmployeeRowId\n                                            },\n                                            method: \"GET\",\n                                            async: false,\n                                            onSuccess: (response) => {\n                                                console.log(response)\n                                                var SuperiorPermission = response\r\n                                                if (Authorization.userDefinition.Permissions[PermissionKeys.HumanResources]) { // is HR\n                                                    if (SuperiorPermission == true) {\n                                                        if (EmployeeApproval == MoneyClaimingStatus.NotNeeded || HrApproval == MoneyClaimingStatus.NotNeeded) {\n                                                            if (EmployeeApproval == MoneyClaimingStatus.NotNeeded) {\n                                                                updateData = {\r\n                                                                    HrStatus: MoneyClaimingStatus.Rejected,\n                                                                    HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                                    HrRejectReason:rejectReason\n                                                                };\n                                                            }\n                                                            else if (HrApproval == MoneyClaimingStatus.NotNeeded) {\n                                                                updateData = {\r\n                                                                    EmployeeStatus: MoneyClaimingStatus.Rejected,\n                                                                    EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                                    SuperiorRejectReason: rejectReason\n\n                                                                };\n                                                            }\n                                                        }\n                                                        else {\n                                                            if (HrApproval == MoneyClaimingStatus.Pending) {\n                                                                updateData = {\n                                                                    HrStatus: MoneyClaimingStatus.Rejected,\n                                                                    HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                                    HrRejectReason: rejectReason\n                                                                };\n                                                            }\n                                                            else if (EmployeeApproval == MoneyClaimingStatus.Pending) {\n                                                                updateData = {\n                                                                    EmployeeStatus: MoneyClaimingStatus.Rejected,\n                                                                    EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                                    SuperiorRejectReason: rejectReason\n\n                                                                };\n                                                            }\n                                                            else {\n                                                                updateData = {\n                                                                    EmployeeStatus: MoneyClaimingStatus.Rejected,\n                                                                    EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                                    HrStatus: MoneyClaimingStatus.Rejected,\n                                                                    HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                                    SuperiorRejectReason: rejectReason,\n                                                                    HrRejectReason: rejectReason\n\n                                                                };\n                                                            }\n                                                        }\n                                                    }\n                                                    else {\n                                                        updateData = {\r\n                                                            HrStatus: MoneyClaimingStatus.Rejected,\n                                                            HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                            HrRejectReason:rejectReason\n\n                                                        };\n                                                    }\n\r\n                                                }\n                                                else {\r\n                                                    updateData = {\n                                                        SuperiorRejectReason: rejectReason,\r\n                                                        EmployeeStatus: MoneyClaimingStatus.Rejected,\r\n                                                        EmployeeUpdated: Authorization.userDefinition.EmployeeRowID\r\n                                                    };\r\n                                                }\r\n\r\n                                                MoneyClaimApplicationService.Update({\n                                                    EntityId: entityId,\n                                                    Entity: updateData\n                                                }).then(resolve).catch(reject);\n\n                                            }\n                                        })\n                                    })\r\n                                });\r\n                            }); // Convert jQuery object to array\r\n\r\n                            // Wait for all operations to complete before refreshing\r\n                            Promise.all(rejectPromises)\r\n                                .then(() => {\n                                    notifyInfo(`${selectedIds.length} records have been rejected.`)\r\n                                    self.internalRefresh();\r\n                                })\r\n                                .catch(error => {\r\n                                    console.error('Error in update operations:', error);\r\n                                });\r\n                        })\n                    }\n                )\n            },\n            separator: true\n        });\n        */\n\n\n\n        buttons.push({\r\n            title: 'Money Claim Batch Approve',\n            cssClass: 'fas fa-hat-wizard text-bg-success approveButton hidden',\r\n            onClick: e => {\r\n                confirm(\r\n                    \"Do you want to approve all selected applications?\",\r\n                    async () => {\n                        if (self.rowSelection.getSelectedAsInt64().length == 0) {\n                            alertDialog('Please select at least one application to approve')\n                            return\n                        }\n\r\n                        let selectedIds = self.rowSelection.getSelectedAsInt64();\r\n\r\n                        for (const dataId of selectedIds) {\r\n                            try {\r\n                                let response = await MoneyClaimApplicationService.Retrieve({ EntityId: dataId });\r\n                                let EmployeeApproval = response.Entity.EmployeeStatus;\r\n                                let HrApproval = response.Entity.HrStatus;\r\n                                let entityId = response.Entity.Id;\r\n                                let EmployeeRowId = response.Entity.EmployeeRowId;\r\n                                let updateData: MoneyClaimApplicationRow = {};\r\n                                /*\r\n                                let SuperiorPermission = await new Promise((resolve, reject) => {\r\n                                    serviceCall<RetrieveResponse<any>>({\r\n                                        service: OrganisationChartService.baseUrl + '/PermissionToAcknowledge',\r\n                                        data: {\r\n                                            'UserEmployeeRowID': Authorization.userDefinition.EmployeeRowID,\r\n                                            'ApplicantEmployeeRowID': EmployeeRowId\r\n                                        },\r\n                                        method: \"GET\",\r\n                                        onSuccess: resolve,\r\n                                        onError: reject\r\n                                    });\r\n                                });\r\n                                */\n                                let SuperiorPermission = self.SuperiorOfEmployeeRowIdList.includes(EmployeeRowId)\n\r\n                                if (Authorization.userDefinition.Permissions[PermissionKeys.HumanResources]) { // HR\r\n                                    if (SuperiorPermission == true) {\r\n                                        if (EmployeeApproval === MoneyClaimingStatus.NotNeeded || HrApproval === MoneyClaimingStatus.NotNeeded) {\r\n                                            if (EmployeeApproval === MoneyClaimingStatus.NotNeeded) {\r\n                                                updateData = {\r\n                                                    HrStatus: MoneyClaimingStatus.Approved,\r\n                                                    HrUpdated: Authorization.userDefinition.EmployeeRowID,\r\n                                                };\r\n                                            } else if (HrApproval === MoneyClaimingStatus.NotNeeded) {\r\n                                                updateData = {\r\n                                                    EmployeeStatus: MoneyClaimingStatus.Approved,\r\n                                                    EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\r\n                                                };\r\n                                            }\r\n                                        } else {\r\n                                            if (HrApproval === MoneyClaimingStatus.Approved) {\r\n                                                updateData = {\r\n                                                    EmployeeStatus: MoneyClaimingStatus.Approved,\r\n                                                    EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\r\n                                                };\r\n                                            } else if (EmployeeApproval === MoneyClaimingStatus.Approved) {\r\n                                                updateData = {\r\n                                                    HrStatus: MoneyClaimingStatus.Approved,\r\n                                                    HrUpdated: Authorization.userDefinition.EmployeeRowID,\r\n                                                };\r\n                                            } else {\r\n                                                updateData = {\r\n                                                    EmployeeStatus: MoneyClaimingStatus.Approved,\r\n                                                    HrStatus: MoneyClaimingStatus.Approved,\r\n                                                    EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\r\n                                                    HrUpdated: Authorization.userDefinition.EmployeeRowID\r\n                                                };\r\n                                            }\r\n                                        }\r\n                                    }\n                                    else {\r\n                                        updateData = {\r\n                                            HrStatus: MoneyClaimingStatus.Approved,\r\n                                            HrUpdated: Authorization.userDefinition.EmployeeRowID\r\n                                        };\r\n                                    }\r\n                                }\n                                else {\r\n                                    updateData = {\r\n                                        EmployeeStatus: MoneyClaimingStatus.Approved,\r\n                                        EmployeeUpdated: Authorization.userDefinition.EmployeeRowID\r\n                                    };\r\n                                }\r\n\r\n                                await MoneyClaimApplicationService.Update({ EntityId: entityId, Entity: updateData });\r\n\r\n                            } catch (error) {\r\n                                console.error(`Error updating application ${dataId}:`, error);\r\n                            }\r\n\r\n                        }\r\n\r\n                        notifyInfo(`${selectedIds.length} records have been approved.`)\r\n                        self.internalRefresh(); // Refresh after all updates complete\r\n                    }\r\n                );\r\n            },\r\n            separator: true\r\n        });\r\n\r\n        buttons.push({\r\n            title: 'Money Claim Batch Reject',\n            cssClass: 'fas fa-hat-wizard text-bg-danger rejectButton hidden',\r\n            onClick: e => {\n                if (self.rowSelection.getSelectedAsInt64().length == 0) {\n                    alertDialog('Please select at least one application to reject')\n                    return\n                }\r\n                confirm(\r\n                    \"Do you want to reject all selected applications?\",\r\n                    async () => {\n\r\n                        let selectedIds = self.rowSelection.getSelectedAsInt64();\r\n                        var rejectDlg = new MoneyClaimApplicationRejectDialog()\n                        rejectDlg.dialogOpen()\n                        rejectDlg.element.on('dialogclose', async () => {\n                            var rejectReason = window[\"rejectReason\"]\n\r\n                            for (const dataId of selectedIds) {\r\n                                try {\r\n                                    let response = await MoneyClaimApplicationService.Retrieve({ EntityId: dataId });\r\n                                    let EmployeeApproval = response.Entity.EmployeeStatus;\r\n                                    let HrApproval = response.Entity.HrStatus;\r\n                                    let entityId = response.Entity.Id;\r\n                                    let EmployeeRowId = response.Entity.EmployeeRowId;\r\n                                    let updateData: MoneyClaimApplicationRow = {};\r\n\r\n                                    let SuperiorPermission = await new Promise((resolve, reject) => {\r\n                                        serviceCall<RetrieveResponse<any>>({\r\n                                            service: OrganisationChartService.baseUrl + '/PermissionToAcknowledge',\r\n                                            data: {\r\n                                                'UserEmployeeRowID': Authorization.userDefinition.EmployeeRowID,\r\n                                                'ApplicantEmployeeRowID': EmployeeRowId\r\n                                            },\r\n                                            method: \"GET\",\r\n                                            onSuccess: resolve,\r\n                                            onError: reject\r\n                                        });\r\n                                    });\r\n                                    if (Authorization.userDefinition.Permissions[PermissionKeys.HumanResources]) { // is HR\n                                        if (SuperiorPermission == true) {\n                                            if (EmployeeApproval == MoneyClaimingStatus.NotNeeded || HrApproval == MoneyClaimingStatus.NotNeeded) {\n                                                if (EmployeeApproval == MoneyClaimingStatus.NotNeeded) {\n                                                    updateData = {\r\n                                                        HrStatus: MoneyClaimingStatus.Rejected,\n                                                        HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                        HrRejectReason: rejectReason\n                                                    };\n                                                }\n                                                else if (HrApproval == MoneyClaimingStatus.NotNeeded) {\n                                                    updateData = {\r\n                                                        EmployeeStatus: MoneyClaimingStatus.Rejected,\n                                                        EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                        SuperiorRejectReason: rejectReason\n\n                                                    };\n                                                }\n                                            }\n                                            else {\n                                                if (HrApproval == MoneyClaimingStatus.Pending) {\n                                                    updateData = {\n                                                        HrStatus: MoneyClaimingStatus.Rejected,\n                                                        HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                        HrRejectReason: rejectReason\n                                                    };\n                                                }\n                                                else if (EmployeeApproval == MoneyClaimingStatus.Pending) {\n                                                    updateData = {\n                                                        EmployeeStatus: MoneyClaimingStatus.Rejected,\n                                                        EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                        SuperiorRejectReason: rejectReason\n\n                                                    };\n                                                }\n                                                else {\n                                                    updateData = {\n                                                        EmployeeStatus: MoneyClaimingStatus.Rejected,\n                                                        EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                        HrStatus: MoneyClaimingStatus.Rejected,\n                                                        HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                        SuperiorRejectReason: rejectReason,\n                                                        HrRejectReason: rejectReason\n\n                                                    };\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            updateData = {\r\n                                                HrStatus: MoneyClaimingStatus.Rejected,\n                                                HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                HrRejectReason: rejectReason\n\n                                            };\n                                        }\n\r\n                                    }\n                                    else {\r\n                                        updateData = {\n                                            SuperiorRejectReason: rejectReason,\r\n                                            EmployeeStatus: MoneyClaimingStatus.Rejected,\r\n                                            EmployeeUpdated: Authorization.userDefinition.EmployeeRowID\r\n                                        };\r\n                                    }\r\n\r\n                                    await MoneyClaimApplicationService.Update({ EntityId: entityId, Entity: updateData });\r\n                                }\r\n                                catch (error) {\r\n                                    console.error(`Error updating application ${dataId}:`, error);\r\n                                }\r\n                            }\r\n                            notifyInfo(`${selectedIds.length} records have been rejected.`)\r\n                            self.internalRefresh(); // Refresh after all updates complete\n                        })\n\r\n                    })\r\n            }\r\n        });\n        return buttons;\n    }\n    public rowSelection: GridRowSelectionMixin;\n    public SuperiorOfEmployeeRowIdList: number[] = [];\n\n    protected createToolbarExtensions() {\r\n        super.createToolbarExtensions();\n        /*\r\n        this.rowSelection = new GridRowSelectionMixin(this, {\r\n            // demo code\r\n            selectable: (item: MoneyClaimApplicationRow) => {\n                if (item.EmployeeRowId == Authorization.userDefinition.EmployeeRowID\n                    || (item.Status != MoneyClaimingStatus.Pending))\n                    return\r\n                var getResponse = 0\n                var superior\n               \n                const isHr = Authorization.hasPermission(PermissionKeys.HumanResources)\n                if (item.Status == MoneyClaimingStatus.Pending) {\n                    if ((item.EmployeeStatus == MoneyClaimingStatus.NotNeeded)\n                        || (isHr && item.HrStatus == MoneyClaimingStatus.NotNeeded))\n                        return\n\n                    else if ((isHr && item.HrStatus == MoneyClaimingStatus.Pending)\n                        || (item.EmployeeStatus == MoneyClaimingStatus.Pending)) //is superior\n                    {\n                        $('.approveButton, .rejectButton').removeClass(\"hidden\")\r\n\n//                        $('.approveButton, .rejectButton').show()\n                        return true;\n                    }\n                }\r\n                \r\n            }\r\n        });\n        */\n       var self = this\n        let employeeRowNumber = new Promise<number[]>((resolve, reject) => {\r\n            serviceCall<RetrieveResponse<number[]>>({\n                service: OrganisationChartService.baseUrl + '/GetEmployeeUserCanView',\n                data: {\n                    'EmployeeRowID': Authorization.userDefinition.EmployeeRowID,\n                    'PermissionKey': PermissionKeys.MoneyClaiming\n                },\n                method: \"GET\",\n                onError: (error) => reject(error), // Handle failure properly\r\n                onSuccess: (response) => resolve(response || []),  // Ensure data is resolved\r\n            })\n        });\n        employeeRowNumber\r\n            .then(response => {\r\n                self.SuperiorOfEmployeeRowIdList = response\n\n                self.rowSelection = new GridRowSelectionMixin(self, {\r\n                    // demo code\r\n                    selectable: (item: MoneyClaimApplicationRow) => {\n                        var superior = response.includes(item.EmployeeRowId)\n                        if (item.EmployeeRowId == Authorization.userDefinition.EmployeeRowID\n                            || (item.Status != MoneyClaimingStatus.Pending))\n                            return\n                        const isHr = Authorization.hasPermission(PermissionKeys.HumanResources)\n                        if (item.Status == MoneyClaimingStatus.Pending) {\n                            if ((item.EmployeeStatus == MoneyClaimingStatus.NotNeeded)\n                                || (isHr && item.HrStatus == MoneyClaimingStatus.NotNeeded))\n                                return\n\n                            else if ((isHr && item.HrStatus == MoneyClaimingStatus.Pending)\n                                || (superior&&item.EmployeeStatus == MoneyClaimingStatus.Pending)) //is superior\n                            {\n                                $('.approveButton, .rejectButton').removeClass(\"hidden\")\r\n\n                                //                        $('.approveButton, .rejectButton').show()\n                                return true;\n                            }\n                        }\r\n\r\n                    }\n                });\n\n\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error fetching data:\", error);\r\n            });\n        $(document).on('click', '.select-item.check-box.no-float', function () {\n            // Remove highlight from previously highlighted rows\n            $('.select-item.check-box.no-float').parent().parent().removeClass('highlighted-row');\n            // Add highlight to clicked row\n            $('.select-item.check-box.no-float.checked').parent().parent().addClass('highlighted-row');\n        });\n        // Add CSS for highlighting selected rows\n        $('<style>')\n            .prop('type', 'text/css')\n            .html(`\n            .slick-row.highlighted-row {\n                background-color: #D3E5FF !important;\n            }\n        `)\n            .appendTo('head');\r\n    }\n    \n    protected  getColumns() {\n        var columns = super.getColumns();\n        var index\n        columns.unshift(GridRowSelectionMixin.createSelectColumn(() => this.rowSelection));\r\n\n        if (!Authorization.hasPermission(PermissionKeys.HumanResources)) //if he is not HR guy, hide the employeeID and approved by column\n        {\n            for (index in columns) {\n                if (columns[index].name == MoneyClaimApplicationRow.Fields.EmployeeID || columns[index].name == MoneyClaimApplicationRow.Fields.ApprovedBy) {\n                    columns.splice(index, 1);\n                }\n            }\n        }\n\n        return columns;\n\n    }\n    protected onViewSubmit(): boolean {\r\n        this.slickGrid.onHeaderCellRendered.subscribe((e, args) => {\r\n            if (args.column.id === \"SelectAll\") {\r\n                $(args.node).empty().append(`<input type='checkbox' id='selectAll'/>`);\r\n            }\r\n        });\r\n\r\n        // Ensure checkbox selects/deselects all rows\r\n        $(document).on('change', '#selectAll', function () {\r\n            let checked = $(this).prop('checked');\r\n            $('.row-checkbox').prop('checked', checked);\r\n        });\r\n\r\n        return super.onViewSubmit();\r\n    }\r\n    protected createEntityDialog(itemType: string, callback: (dlg: MoneyClaimApplicationDialog) => void): MoneyClaimApplicationDialog {\r\n        let dialog = super.createEntityDialog(itemType, callback) as MoneyClaimApplicationDialog;\r\n        var self = this\r\n        // Attach 'dialogclose' event listener to refresh the grid when the dialog closes\r\n        dialog.element.on('dialogclose', () => {\r\n            self.internalRefresh();  // Refresh grid after closing the dialog\n            console.log('hahaa')\r\n        });\r\n\r\n        return dialog;  // Ensure correct return type\r\n    }\r\n\n    protected onViewProcessData(response: ListResponse<MoneyClaimApplicationRow>) {\n        response = super.onViewProcessData(response);\n        let userDefinition = Authorization.userDefinition\r\n        let userId = userDefinition.EmployeeRowID\r\n        const allSame = response.Entities.every(entity => entity.EmployeeRowId === userId);\r\n        if (allSame) {\r\n            const isHr = Authorization.hasPermission(PermissionKeys.HumanResources)\r\n            if (isHr) {\r\n                $('.approveButton, .rejectButton').removeClass(\"hidden\")\r\n            }\r\n            else {\r\n                $('.approveButton, .rejectButton').addClass(\"hidden\")\r\n            }\r\n        }\r\n        else {\r\n            $('.approveButton, .rejectButton').removeClass(\"hidden\")\r\n        }\r\n        this.toolbar.findButton(\"column-picker-button\").toggle(false);\r\n        return response;\r\n\n    }\n    protected getAddButtonCaption() {\n        return \"Apply money claiming\";\n    }\n   \n}"],
  "mappings": "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",
  "names": ["import_q", "import_corelib", "import_q", "MoneyClaimApplicationGrid", "container", "MoneyClaimApplicationColumns", "MoneyClaimApplicationDialog", "MoneyClaimApplicationRow", "MoneyClaimApplicationService", "filters", "months", "OccupationService", "response", "index", "JobGradeService", "DepartmentService", "DivisionService", "EmployeeProfileService", "MasterCostCentreService", "buttons", "self", "e", "__async", "selectedIds", "dataId", "EmployeeApproval", "HrApproval", "entityId", "EmployeeRowId", "updateData", "SuperiorPermission", "PermissionKeys", "error", "rejectDlg", "MoneyClaimApplicationRejectDialog", "rejectReason", "resolve", "reject", "OrganisationChartService", "item", "superior", "isHr", "columns", "args", "checked", "itemType", "callback", "dialog", "userId", "entity", "__name", "__decorateClass", "pageInit", "MoneyClaimApplicationGrid", "__name"]
}
