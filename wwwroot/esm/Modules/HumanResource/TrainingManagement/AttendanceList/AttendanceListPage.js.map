{
  "version": 3,
  "sources": ["../../../../../../Modules/HumanResource/TrainingManagement/AttendanceList/AttendanceListPage.ts", "../../../../../../Modules/HumanResource/TrainingManagement/AttendanceList/AttendanceListGrid.ts", "../../../../../../Modules/HumanResource/TrainingManagement/ProgramFlow/ProgramFlowAttendanceEditDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\nimport { AttendanceListGrid } from './AttendanceListGrid';\n\nexport default function pageInit() {\n    initFullHeightGridPage(new AttendanceListGrid($('#GridDiv')).element);\n}", "import {DataGrid, Decorators, EntityGrid, TabsExtensions} from '@serenity-is/corelib';\nimport { AttendanceListColumns, AttendanceListRow, AttendanceListService } from '../../../ServerTypes/TrainingManagement';\nimport { ProgramSessionDialog } from '../ProgramSession/ProgramSessionDialog';\nimport { ProgramFlowAttendanceEditDialog } from './../ProgramFlow/ProgramFlowAttendanceEditDialog';\nimport selectTab = TabsExtensions.selectTab;\nimport activeTabKey = TabsExtensions.activeTabKey;\n\n@Decorators.registerClass('HRMSoftware.TrainingManagement.AttendanceListGrid')\nexport class AttendanceListGrid extends EntityGrid<AttendanceListRow, any> {\n    protected getColumnsKey() { return AttendanceListColumns.columnsKey; }\n    protected getDialogType() { return ProgramFlowAttendanceEditDialog; }\n    protected getRowDefinition() { return AttendanceListRow; }\n    protected getService() { return AttendanceListService.baseUrl; }\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n\n    protected onClick(e: JQueryEventObject, row: number, cell: number) {\n        if (e.isDefaultPrevented())\n            return;\n        \n        // get reference to current item\n        var item = this.itemAt(row);\n        // get reference to clicked element\n        var target = $(e.target);\n\n        if (target.parent().hasClass('inline-action'))\n            target = target.parent();\n\n        if (target.hasClass('view-program')) {\n            var dlg = new ProgramSessionDialog(false);\n            \n            let FlowList = dlg.element.find('#' + dlg.idPrefix + 'FlowList');\n            dlg.selectEditorTab(FlowList);\n            \n            dlg.loadByIdAndOpenDialog(item.ProgramId, false);\n            \n        } else {\n            super.onClick(e, row, cell);\n        }\n    }\n\n    protected getColumns() {\n        DataGrid.defaultRowHeight = 60;\n        let columns = super.getColumns();\n\n        columns.splice(0, 0, {\n            field: 'Action',\n            name: 'Action',\n            format: ctx => {\n                return '<a class=\"inline-action view-program\" title=\"View Program Session\"><i class=\"fa fa-chalkboard-teacher\"></i></a>';\n            },\n            width: 60,\n            minWidth: 60,\n            maxWidth: 60\n        });\n\n        return columns;\n    }\n}", "import {Decorators, EditorUtils} from '@serenity-is/corelib';\nimport {GridEditorDialog} from \"@serenity-is/extensions\";\nimport {alertDialog} from '@serenity-is/corelib/q';\nimport {\n    ProgramFlowAttendanceForm,\n    ProgramFlowResponseService,\n    ProgramFlowRow,\n    ProgramFlowService\n} from '../../../ServerTypes/TrainingManagement';\n\n@Decorators.registerClass('RMSoftware.TrainingManagement.ProgramFlowAttendanceEditDialog')\nexport class ProgramFlowAttendanceEditDialog extends GridEditorDialog<ProgramFlowRow> {\n    protected getFormKey() {\n        return ProgramFlowAttendanceForm.formKey;\n    }\n\n    protected getLocalTextPrefix() {\n        return ProgramFlowRow.localTextPrefix;\n    }\n\n    protected getService() {\n        return ProgramFlowService.baseUrl;\n    }\n\n    protected form: ProgramFlowAttendanceForm;\n\n    constructor() {\n        super();\n        this.form = new ProgramFlowAttendanceForm(this.idPrefix);\n    }\n\n    public dialogOpen(asPanel?: boolean): void {\n        super.dialogOpen(asPanel);\n\n        EditorUtils.setReadonly(this.form.FlowType.element, true);\n        EditorUtils.setReadonly(this.form.Date.element, true);\n        EditorUtils.setReadonly(this.form.Remark.element, true);\n        $('#' + this.idPrefix + 'GradeType').parent().hide();\n        \n        this.saveAndCloseButton.hide();\n        let participantIds = {};\n        ProgramFlowResponseService.List({\n            Criteria: [\n                [\"FlowId\"], \"=\", this.entity.Id,\n            ]\n        }, response => {\n            for (var key in response.Entities) {\n                let participantId = response.Entities[key].EmployeeId.toString();\n                participantIds[participantId] = [response.Entities[key].Id, response.Entities[key].Attendance];\n            }\n            \n            var attendanceParticipantList = $('div.field.ParticipantList.AttendanceTable' +\n                ' > label[title=\"Participant List\"] + div.editor.s-ProgramAttendanceResponseEditor.s-DataGrid' +\n                ' > div.grid-container.slick-container' +\n                ' > div.slick-viewport' +\n                ' > div.grid-canvas' +\n                ' > div.ui-widget-content.slick-row' +\n                ' > div.ProgramAttendanceResponseColumnPlaceHolder' +\n                ' > div' +\n                ' > form'\n            );\n\n            attendanceParticipantList.each((index, elem) => {\n                console.log(elem)\n                let participantId = elem.getAttribute('participantId');\n                let entityId = participantIds[participantId] ? participantIds[participantId][0] : null;\n                let oldValue = participantIds[participantId] ? participantIds[participantId][1] : null;\n                elem.setAttribute('EntityId', entityId);\n                elem.setAttribute('OldValue', oldValue);\n                elem.children[0].checked = oldValue;\n            })\n        })\n    }\n\n    protected getToolbarButtons() {\n        var buttons = super.getToolbarButtons();\n\n        buttons.push({\n            title: \"Save\",\n            cssClass: 'stampe',\n            icon: 'fa-check-circle text-purple',\n            onClick: () => {\n                var attendanceParticipantList = $('div.field.ParticipantList.AttendanceTable' +\n                    ' > label[title=\"Participant List\"] + div.editor.s-ProgramAttendanceResponseEditor.s-DataGrid' +\n                    ' > div.grid-container.slick-container' +\n                    ' > div.slick-viewport' +\n                    ' > div.grid-canvas' +\n                    ' > div.ui-widget-content.slick-row' +\n                    ' > div.ProgramAttendanceResponseColumnPlaceHolder' +\n                    ' > div' +\n                    ' > form'\n                );\n                \n                attendanceParticipantList.each((index, elem) => {\n                    var participantId = elem.getAttribute('participantId');\n                    var attendanceValue = elem.children[0].checked;\n                    \n                    if (elem.getAttribute('entityId') == 'null') {\n                        if (attendanceValue) {\n                            ProgramFlowResponseService.Create({\n                                Entity:\n                                    {\n                                        \"FlowId\": this.entity.Id,\n                                        \"EmployeeId\": parseInt(participantId),\n                                        \"Attendance\": attendanceValue,\n                                    }\n                            })\n                        }\n                    } else {\n                        if ((elem.getAttribute('OldValue') === 'true') != attendanceValue) {\n                            ProgramFlowResponseService.Update({\n                                EntityId: elem.getAttribute('EntityId'),\n                                Entity:\n                                    {\n                                        \"Attendance\": attendanceValue,\n                                    }\n                            })\n                        }\n                    }\n                });\n                alertDialog(\"Attendance Save Success !\");\n                this.dialogClose();\n            },\n        });\n\n        return buttons;\n    }\n}"],
  "mappings": "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",
  "names": ["import_q", "import_corelib", "import_corelib", "import_extensions", "import_q", "ProgramFlowAttendanceEditDialog", "ProgramFlowAttendanceForm", "ProgramFlowRow", "ProgramFlowService", "asPanel", "participantIds", "ProgramFlowResponseService", "response", "key", "participantId", "attendanceParticipantList", "index", "elem", "entityId", "oldValue", "buttons", "attendanceValue", "__name", "__decorateClass", "AttendanceListGrid", "AttendanceListColumns", "ProgramFlowAttendanceEditDialog", "AttendanceListRow", "AttendanceListService", "container", "row", "cell", "item", "target", "dlg", "ProgramSessionDialog", "FlowList", "columns", "ctx", "__name", "__decorateClass", "pageInit", "AttendanceListGrid", "__name"]
}
