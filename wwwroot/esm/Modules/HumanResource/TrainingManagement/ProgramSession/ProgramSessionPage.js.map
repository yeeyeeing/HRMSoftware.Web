{
  "version": 3,
  "sources": ["../../../../../../Modules/HumanResource/TrainingManagement/ProgramSession/ProgramSessionPage.ts", "../../../../../../Modules/HumanResource/TrainingManagement/ProgramSession/ProgramSessionGrid.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\nimport { ProgramSessionGrid } from './ProgramSessionGrid';\n\nexport default function pageInit() {\n    initFullHeightGridPage(new ProgramSessionGrid($('#GridDiv')).element);\n}", "import {Decorators, EntityGrid, SubDialogHelper, ToolButton} from '@serenity-is/corelib';\nimport {Authorization} from '@serenity-is/corelib/q';\nimport {\n    ProgramSessionColumns,\n    ProgramSessionRow,\n    ProgramSessionService,\n    ProgramSessionStatusType\n} from '../../../ServerTypes/TrainingManagement';\nimport {PermissionKeys} from '../../../ServerTypes/Administration';\nimport {ProgramSessionDialog} from './ProgramSessionDialog';\nimport bindToDataChange = SubDialogHelper.bindToDataChange;\nimport { ProgramSessionApplyDialog } from './ProgramSessionApplyDialog';\n\n@Decorators.registerClass('HRMSoftware.TrainingManagement.ProgramSessionGrid')\nexport class ProgramSessionGrid extends EntityGrid<ProgramSessionRow, any> {\n    protected getColumnsKey() {\n        return ProgramSessionColumns.columnsKey;\n    }\n\n    protected getDialogType() {\n        return ProgramSessionDialog;\n    }\n\n    protected getRowDefinition() {\n        return ProgramSessionRow;\n    }\n\n    protected getService() {\n        return ProgramSessionService.baseUrl;\n    }\n\n    constructor(container: JQuery) {\n        super(container);\n\n        this.openDialogsAsPanel = true;\n    }\n\n    protected getColumns() {\n        var columns = super.getColumns();\n        \n        if (Authorization.hasPermission(PermissionKeys.HumanResources)) {\n            columns.push({\n                field: 'Edit',\n                name: 'Edit',\n                format: ctx => {\n                    return '<a class=\"inline-action Edit\" title=\"Edit\"><i class=\"fa fa-pen\"></i></a>';\n                },\n                width: 30,\n                minWidth: 12,\n                maxWidth: 60\n            });\n        } else {\n            columns = columns.filter((row)=>{\n                return !(row.name == 'Status' || row.name == 'Department');\n            });\n        }\n        \n        return columns;\n    }\n\n    protected onClick(e: JQueryEventObject, row: number, cell: number) {\n        super.onClick(e, row, cell);\n        if (e.isDefaultPrevented())\n            return;\n\n        // get reference to current item\n        var item = this.itemAt(row);\n        // get reference to clicked element\n        var target = $(e.target);\n        if (target.parent().hasClass('inline-action'))\n            target = target.parent();\n\n        if (target.hasClass('Edit')) {\n            var dlg = new ProgramSessionDialog(false);\n            dlg.loadByIdAndOpenDialog(item.Id, true);\n        }\n    }\n\n    protected getButtons(): ToolButton[] {\n        let buttons = super.getButtons();\n        \n        if (Authorization.hasPermission(PermissionKeys.HumanResources) || Authorization.hasPermission(PermissionKeys.Training)) {\n            buttons.push({\n                title: 'Apply New Session',\n                cssClass: 'apply-changes-button',\n                onClick: e => {\n                    let dlg = new ProgramSessionApplyDialog();\n                    bindToDataChange(dlg, this, (e, dci) => {\n                        this.refresh();\n                    }, true);\n                    dlg.loadEntityAndOpenDialog(<ProgramSessionRow>{\n                        DepartmentList: [2],\n                        Status: ProgramSessionStatusType.WaitingApprovalHR,\n                    }, true);\n                },\n                separator: true\n            });\n            return buttons;\n        } else {\n            return [];\n        }\n    }\n}"],
  "mappings": "4rBAAC,IAAAA,EAAuC,SCAxC,IAAAC,EAAkE,SAClEC,EAA4B,SAS5B,IAAOC,EAAmB,kBAAgB,iBAI7BC,EAAN,cAAiC,YAAmC,CAC7D,eAAgB,CACtB,OAAOC,EAAsB,UACjC,CAEU,eAAgB,CACtB,OAAOC,CACX,CAEU,kBAAmB,CACzB,OAAOC,CACX,CAEU,YAAa,CACnB,OAAOC,EAAsB,OACjC,CAEA,YAAYC,EAAmB,CAC3B,MAAMA,CAAS,EAEf,KAAK,mBAAqB,EAC9B,CAEU,YAAa,CACnB,IAAIC,EAAU,MAAM,WAAW,EAE/B,OAAI,gBAAc,cAAcC,EAAe,cAAc,EACzDD,EAAQ,KAAK,CACT,MAAO,OACP,KAAM,OACN,OAAQE,GACG,2EAEX,MAAO,GACP,SAAU,GACV,SAAU,EACd,CAAC,EAEDF,EAAUA,EAAQ,OAAQG,GACf,EAAEA,EAAI,MAAQ,UAAYA,EAAI,MAAQ,aAChD,EAGEH,CACX,CAEU,QAAQ,EAAsBG,EAAaC,EAAc,CAE/D,GADA,MAAM,QAAQ,EAAGD,EAAKC,CAAI,EACtB,GAAE,mBAAmB,EAIzB,KAAIC,EAAO,KAAK,OAAOF,CAAG,EAEtBG,EAAS,EAAE,EAAE,MAAM,EAIvB,GAHIA,EAAO,OAAO,EAAE,SAAS,eAAe,IACxCA,EAASA,EAAO,OAAO,GAEvBA,EAAO,SAAS,MAAM,EAAG,CACzB,IAAIC,EAAM,IAAIX,EAAqB,EAAK,EACxCW,EAAI,sBAAsBF,EAAK,GAAI,EAAI,CAC3C,EACJ,CAEU,YAA2B,CACjC,IAAIG,EAAU,MAAM,WAAW,EAE/B,OAAI,gBAAc,cAAcP,EAAe,cAAc,GAAK,gBAAc,cAAcA,EAAe,QAAQ,GACjHO,EAAQ,KAAK,CACT,MAAO,oBACP,SAAU,uBACV,QAASC,GAAK,CACV,IAAIF,EAAM,IAAIG,EACdjB,EAAiBc,EAAK,KAAM,CAACE,EAAGE,IAAQ,CACpC,KAAK,QAAQ,CACjB,EAAG,EAAI,EACPJ,EAAI,wBAA2C,CAC3C,eAAgB,CAAC,CAAC,EAClB,QACJ,EAAG,EAAI,CACX,EACA,UAAW,EACf,CAAC,EACMC,GAEA,CAAC,CAEhB,CACJ,EAxFaI,EAAAlB,EAAA,sBAAAA,EAANmB,EAAA,CADN,aAAW,cAAc,mDAAmD,GAChEnB,GDXE,SAARoB,GAA4B,IAC/B,0BAAuB,IAAIC,EAAmB,EAAE,UAAU,CAAC,EAAE,OAAO,CACxE,CAFwBC,EAAAF,EAAA",
  "names": ["import_q", "import_corelib", "import_q", "bindToDataChange", "ProgramSessionGrid", "ProgramSessionColumns", "ProgramSessionDialog", "ProgramSessionRow", "ProgramSessionService", "container", "columns", "PermissionKeys", "ctx", "row", "cell", "item", "target", "dlg", "buttons", "e", "ProgramSessionApplyDialog", "dci", "__name", "__decorateClass", "pageInit", "ProgramSessionGrid", "__name"]
}
