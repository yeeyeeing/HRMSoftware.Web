{
  "version": 3,
  "sources": ["../../../../../../Modules/HumanResource/TrainingManagement/Report/ReportPage.ts", "../../../../../../Modules/HumanResource/TrainingManagement/Report/ReportGrid.ts", "../../../../../../Modules/HumanResource/TrainingManagement/Report/ReportDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\nimport { ReportGrid } from './ReportGrid';\n\nexport default function pageInit() {\n    initFullHeightGridPage(new ReportGrid($('#GridDiv')).element);\n}", "import {alertDialog, Decorators, EntityGrid, ToolButton} from '@serenity-is/corelib';\nimport { ReportColumns, ReportRow, ReportService } from '../../../ServerTypes/TrainingManagement';\nimport { ReportDialog } from './ReportDialog';\n\n@Decorators.registerClass('HRMSoftware.TrainingManagement.ReportGrid')\nexport class ReportGrid extends EntityGrid<ReportRow, any> {\n    protected getColumnsKey() { return ReportColumns.columnsKey; }\n    protected getDialogType() { return ReportDialog; }\n    protected getRowDefinition() { return ReportRow; }\n    protected getService() { return ReportService.baseUrl; }\n\n    constructor(container: JQuery) {\n        super(container);\n\n        this.openDialogsAsPanel = true;\n    }\n    \n    protected getButtons(): ToolButton[] {\n        return [];\n    }\n\n    protected getColumns() {\n        let columns = super.getColumns();\n\n        columns.splice(0, 0, {\n            id: 'Print Pdf',\n            field: 'PDF Form',\n            name: '',\n            cssClass: 'align-center',\n            format: ctx => {\n                let currItem  =<ReportRow>ctx.item;\n                let button = '<a class=\"inline-action pdf-form\" data-action=\"print-pdf\" title=\"PDF\">' +\n                    '<i class=\"fa fa-file-pdf\" style=\"color: red;\"></i></a>';\n\n                // if (currItem.SubmissionStatus == 2){\n                    return button\n                // }\n            },\n\n            width: 36,\n            minWidth: 36,\n            maxWidth: 36\n        });\n\n        return columns;\n    }\n\n    protected onClick(e: JQueryEventObject, row: number, cell: number) {\n        super.onClick(e, row, cell);\n\n        if (e.isDefaultPrevented())\n            return;\n\n        var item = this.itemAt(row);\n        var target = $(e.target);\n\n        if (target.parent().hasClass('inline-action'))\n            target = target.parent();\n\n        if (target.hasClass('pdf-form')){\n            var data = {\n                FormId: item.Id,\n            }\n            \n            var now = new Date();\n            var year = now.getFullYear();\n            var month = ('0' + (now.getMonth() + 1)).slice(-2);\n            var day = ('0' + now.getDate()).slice(-2);\n            var hours = ('0' + now.getHours()).slice(-2);\n            var minutes = ('0' + now.getMinutes()).slice(-2);\n            var seconds = ('0' + now.getSeconds()).slice(-2);\n\n            var queryString = Object.keys(data)\n                .map(function (key){\n                    return key + '=' + encodeURIComponent(data[key]);\n                })\n                .join('&');\n            var url = window.location.origin + \"/TrainingManagement/PdfSharpConvert?\" + queryString;\n            var xhr = new XMLHttpRequest();\n\n            xhr.open('GET', url, true);\n            xhr.responseType = 'blob';\n            xhr.onload = function () {\n                if (xhr.status === 200) {\n                    var blob = xhr.response;\n                    const url = window.URL.createObjectURL(blob);\n\n                    const a = document.createElement('a');\n                    a.style.display = 'none';\n                    a.href = url;\n                    a.download = `report_${day}${month}${year}_${hours}${minutes}${seconds}.pdf`;\n                    document.body.appendChild(a);\n                    a.click();\n\n                }else if (xhr.status !== 200) {\n                    alertDialog('An error occurred while generating the PDF.');\n                }else {\n\n                }\n            };\n            xhr.onerror = function () {\n                alertDialog('An error occurred while making the request. Please check your network connection.');\n            };\n\n            xhr.send()\n        }\n    }\n}", "import {Criteria, Decorators, EntityDialog, ToolButton} from '@serenity-is/corelib';\nimport {ReportForm, ReportRow, ReportService} from '../../../ServerTypes/TrainingManagement';\nimport { DepartmentService } from '../../../ServerTypes/OrganisationHierarchy/DepartmentService';\n\n@Decorators.registerClass('HRMSoftware.TrainingManagement.ReportDialog')\nexport class ReportDialog extends EntityDialog<ReportRow, any> {\n    protected getFormKey() {\n        return ReportForm.formKey;\n    }\n\n    protected getRowDefinition() {\n        return ReportRow;\n    }\n\n    protected getService() {\n        return ReportService.baseUrl;\n    }\n\n    protected form = new ReportForm(this.idPrefix);\n\n    protected dialogOpen(asPanel?: boolean) {\n        super.dialogOpen(true);\n    }\n\n    protected onDialogOpen() {\n        super.onDialogOpen();\n\n        this.element.closest(\".ui-dialog\").css(\"top\", \"1%\");\n        this.element.children().hide();\n        \n        let nameField = this.form.ProgramName.value;\n        let dateField = this.form.StartDate.value + (this.form.StartDate.value == this.form.EndDate.value ? \"\":\" to \" + this.form.EndDate.value);\n\n        if(this.form.DepartmentList.values.length > 0){\n            DepartmentService.List({\n                Criteria: Criteria('Id').in(this.form.DepartmentList.values),\n            }, response => {\n                setTimeout(()=>{\n                    console.log(\"Trigged\");\n                    let departmentField = response.Entities.map((elem, idx)=>\n                        elem.Name\n                    ).join(\", \");\n\n                    $(\"#departmentPlaceholder\").first().text(departmentField);\n                }, 1000)\n            });\n        } else {\n                setTimeout(()=>{\n                $(\"#departmentPlaceholder\").first().text(\"N/A\");\n            }, 1000)\n        }\n        \n        const TemplateHtml =\n            `<div class=\"header\">\n                <h4>Training Report</h4>\n                   <p><strong>Course Name:</strong> ${nameField}</p>\n                   <p><strong>Date:</strong> ${dateField}</p>\n                   <p><strong>Department:</strong> <span id=\"departmentPlaceholder\">Loading...</span></p>\n            </div>\n            <hr>\n\n            `;\n\n        $(TemplateHtml).appendTo(this.element);\n\n    }\n\n    protected getToolbarButtons(): ToolButton[] {\n        // return super.getToolbarButtons();\n        return [];\n    }\n\n    protected updateTitle() {\n        super.updateTitle();\n        this.dialogTitle = \"View Report (\" + this.entity.ProgramName + \")\";\n    }\n}"],
  "mappings": "olBAAC,IAAAA,EAAuC,SCAxC,IAAAC,EAA8D,SCA9D,IAAAC,EAA6D,SAKtD,IAAMC,EAAN,cAA2B,cAA6B,CAAxD,kCAaH,KAAU,KAAO,IAAIC,EAAW,KAAK,QAAQ,EAZnC,YAAa,CACnB,OAAOA,EAAW,OACtB,CAEU,kBAAmB,CACzB,OAAOC,CACX,CAEU,YAAa,CACnB,OAAOC,EAAc,OACzB,CAIU,WAAWC,EAAmB,CACpC,MAAM,WAAW,EAAI,CACzB,CAEU,cAAe,CACrB,MAAM,aAAa,EAEnB,KAAK,QAAQ,QAAQ,YAAY,EAAE,IAAI,MAAO,IAAI,EAClD,KAAK,QAAQ,SAAS,EAAE,KAAK,EAE7B,IAAIC,EAAY,KAAK,KAAK,YAAY,MAClCC,EAAY,KAAK,KAAK,UAAU,OAAS,KAAK,KAAK,UAAU,OAAS,KAAK,KAAK,QAAQ,MAAQ,GAAG,OAAS,KAAK,KAAK,QAAQ,OAE/H,KAAK,KAAK,eAAe,OAAO,OAAS,EACxCC,EAAkB,KAAK,CACnB,YAAU,YAAS,IAAI,EAAE,GAAG,KAAK,KAAK,eAAe,MAAM,CAC/D,EAAGC,GAAY,CACX,WAAW,IAAI,CACX,QAAQ,IAAI,SAAS,EACrB,IAAIC,EAAkBD,EAAS,SAAS,IAAI,CAACE,EAAMC,IAC/CD,EAAK,IACT,EAAE,KAAK,IAAI,EAEX,EAAE,wBAAwB,EAAE,MAAM,EAAE,KAAKD,CAAe,CAC5D,EAAG,GAAI,CACX,CAAC,EAEG,WAAW,IAAI,CACf,EAAE,wBAAwB,EAAE,MAAM,EAAE,KAAK,KAAK,CAClD,EAAG,GAAI,EAGX,IAAMG,EACF;AAAA;AAAA,sDAE0CP;AAAA,+CACPC;AAAA;AAAA;AAAA;AAAA;AAAA,cAOvC,EAAEM,CAAY,EAAE,SAAS,KAAK,OAAO,CAEzC,CAEU,mBAAkC,CAExC,MAAO,CAAC,CACZ,CAEU,aAAc,CACpB,MAAM,YAAY,EAClB,KAAK,YAAc,gBAAkB,KAAK,OAAO,YAAc,GACnE,CACJ,EAvEaC,EAAAb,EAAA,gBAAAA,EAANc,EAAA,CADN,aAAW,cAAc,6CAA6C,GAC1Dd,GDAN,IAAMe,EAAN,cAAyB,YAA2B,CAC7C,eAAgB,CAAE,OAAOC,EAAc,UAAY,CACnD,eAAgB,CAAE,OAAOC,CAAc,CACvC,kBAAmB,CAAE,OAAOC,CAAW,CACvC,YAAa,CAAE,OAAOC,EAAc,OAAS,CAEvD,YAAYC,EAAmB,CAC3B,MAAMA,CAAS,EAEf,KAAK,mBAAqB,EAC9B,CAEU,YAA2B,CACjC,MAAO,CAAC,CACZ,CAEU,YAAa,CACnB,IAAIC,EAAU,MAAM,WAAW,EAE/B,OAAAA,EAAQ,OAAO,EAAG,EAAG,CACjB,GAAI,YACJ,MAAO,WACP,KAAM,GACN,SAAU,eACV,OAAQC,GAAO,CACX,IAAIC,EAAsBD,EAAI,KAK1B,MAJS,8HAMjB,EAEA,MAAO,GACP,SAAU,GACV,SAAU,EACd,CAAC,EAEMD,CACX,CAEU,QAAQ,EAAsBG,EAAaC,EAAc,CAG/D,GAFA,MAAM,QAAQ,EAAGD,EAAKC,CAAI,EAEtB,GAAE,mBAAmB,EAGzB,KAAIC,EAAO,KAAK,OAAOF,CAAG,EACtBG,EAAS,EAAE,EAAE,MAAM,EAKvB,GAHIA,EAAO,OAAO,EAAE,SAAS,eAAe,IACxCA,EAASA,EAAO,OAAO,GAEvBA,EAAO,SAAS,UAAU,EAAE,CAC5B,IAAIC,EAAO,CACP,OAAQF,EAAK,EACjB,EAEIG,EAAM,IAAI,KACVC,EAAOD,EAAI,YAAY,EACvBE,GAAS,KAAOF,EAAI,SAAS,EAAI,IAAI,MAAM,EAAE,EAC7CG,GAAO,IAAMH,EAAI,QAAQ,GAAG,MAAM,EAAE,EACpCI,GAAS,IAAMJ,EAAI,SAAS,GAAG,MAAM,EAAE,EACvCK,GAAW,IAAML,EAAI,WAAW,GAAG,MAAM,EAAE,EAC3CM,GAAW,IAAMN,EAAI,WAAW,GAAG,MAAM,EAAE,EAE3CO,EAAc,OAAO,KAAKR,CAAI,EAC7B,IAAI,SAAUS,EAAI,CACf,OAAOA,EAAM,IAAM,mBAAmBT,EAAKS,CAAG,CAAC,CACnD,CAAC,EACA,KAAK,GAAG,EACTC,EAAM,OAAO,SAAS,OAAS,uCAAyCF,EACxEG,EAAM,IAAI,eAEdA,EAAI,KAAK,MAAOD,EAAK,EAAI,EACzBC,EAAI,aAAe,OACnBA,EAAI,OAAS,UAAY,CACrB,GAAIA,EAAI,SAAW,IAAK,CACpB,IAAIC,EAAOD,EAAI,SACf,IAAMD,EAAM,OAAO,IAAI,gBAAgBE,CAAI,EAErCC,EAAI,SAAS,cAAc,GAAG,EACpCA,EAAE,MAAM,QAAU,OAClBA,EAAE,KAAOH,EACTG,EAAE,SAAW,UAAUT,IAAMD,IAAQD,KAAQG,IAAQC,IAAUC,QAC/D,SAAS,KAAK,YAAYM,CAAC,EAC3BA,EAAE,MAAM,CAEZ,MAAUF,EAAI,SAAW,QACrB,eAAY,6CAA6C,CAIjE,EACAA,EAAI,QAAU,UAAY,IACtB,eAAY,mFAAmF,CACnG,EAEAA,EAAI,KAAK,CACb,EACJ,CACJ,EAtGaG,EAAA3B,EAAA,cAAAA,EAAN4B,EAAA,CADN,aAAW,cAAc,2CAA2C,GACxD5B,GDFE,SAAR6B,GAA4B,IAC/B,0BAAuB,IAAIC,EAAW,EAAE,UAAU,CAAC,EAAE,OAAO,CAChE,CAFwBC,EAAAF,EAAA",
  "names": ["import_q", "import_corelib", "import_corelib", "ReportDialog", "ReportForm", "ReportRow", "ReportService", "asPanel", "nameField", "dateField", "DepartmentService", "response", "departmentField", "elem", "idx", "TemplateHtml", "__name", "__decorateClass", "ReportGrid", "ReportColumns", "ReportDialog", "ReportRow", "ReportService", "container", "columns", "ctx", "currItem", "row", "cell", "item", "target", "data", "now", "year", "month", "day", "hours", "minutes", "seconds", "queryString", "key", "url", "xhr", "blob", "a", "__name", "__decorateClass", "pageInit", "ReportGrid", "__name"]
}
