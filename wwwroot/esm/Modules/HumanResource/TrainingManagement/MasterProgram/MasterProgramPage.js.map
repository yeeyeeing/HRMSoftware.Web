{
  "version": 3,
  "sources": ["../../../../../../Modules/HumanResource/TrainingManagement/MasterProgram/MasterProgramPage.ts", "../../../../../../Modules/HumanResource/TrainingManagement/MasterProgram/MasterProgramGrid.ts", "../../../../../../Modules/HumanResource/TrainingManagement/MasterProgram/MasterProgramDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\nimport { MasterProgramGrid } from './MasterProgramGrid';\n\nexport default function pageInit() {\n    initFullHeightGridPage(new MasterProgramGrid($('#GridDiv')).element);\n}", "import {DataGrid, Decorators, EntityGrid, SubDialogHelper, ToolButton} from '@serenity-is/corelib';\nimport {\n    MasterProgramColumns,\n    MasterProgramRow,\n    MasterProgramService,\n    MasterProgramStatusType,\n    ProgramSessionRow\n} from '../../../ServerTypes/TrainingManagement';\nimport { DepartmentService } from '../../../ServerTypes/OrganisationHierarchy/DepartmentService';\n\nimport {MasterProgramDialog} from './MasterProgramDialog';\nimport bindToDataChange = SubDialogHelper.bindToDataChange;\nimport { ProgramSessionDialog } from '../ProgramSession/ProgramSessionDialog';\nimport { MasterProgramApplyDialog } from './MasterProgramApplyDialog';\n\n@Decorators.registerClass('HRMSoftware.TrainingManagement.MasterProgramGrid')\nexport class MasterProgramGrid extends EntityGrid<MasterProgramRow, any> {\n    protected getColumnsKey() {\n        return MasterProgramColumns.columnsKey;\n    }\n\n    protected getDialogType() {\n        return MasterProgramDialog;\n    }\n\n    protected getRowDefinition() {\n        return MasterProgramRow;\n    }\n\n    protected getService() {\n        return MasterProgramService.baseUrl;\n    }\n\n    constructor(container: JQuery) {\n        super(container);\n\n        this.openDialogsAsPanel = true;\n    }\n\n    protected getColumns() {\n        DataGrid.defaultRowHeight = 60;\n        let columns = super.getColumns();\n\n        columns.splice(0, 0, {\n            field: 'Action',\n            name: 'Action',\n            format: ctx => {\n                if (ctx.item.Status == MasterProgramStatusType.Approved) {\n                    return '<a class=\"inline-action New-Session button\" title=\"New Session\"><button type=\"button\" class=\"btn btn-labeled btn-warning\" style=\"padding: 0 1px;\"><span class=\"btn-label\"><i class=\"fa fa-plus-circle\"></i></span>New Session</button></a>';\n                } else {\n                    return;\n                }\n            },\n            width: 100,\n            minWidth: 30,\n            maxWidth: 120\n        });\n\n        return columns;\n    }\n\n    protected onClick(e: JQueryEventObject, row: number, cell: number) {\n        super.onClick(e, row, cell);\n        if (e.isDefaultPrevented())\n            return;\n\n        // get reference to current item\n        let item = this.itemAt(row);\n        // get reference to clicked element\n        let target = $(e.target);\n        if (target.parent().hasClass('inline-action'))\n            target = target.parent();\n\n        if (target.hasClass('New-Session')) {\n            MasterProgramService.Retrieve({\n                EntityId: item.Id\n            }, response => {\n                let dlg = new ProgramSessionDialog(false);\n                let FlowList = [];\n                for (let key in response.Entity.FlowList) {\n                    FlowList.push({\n                        'FlowType': response.Entity.FlowList[key].FlowType,\n                        'GradeType': response.Entity.FlowList[key].GradeType,\n                        'Remark': response.Entity.FlowList[key].Remark,\n                    });\n                }\n\n                if (item.AllDepartment) {\n                    DepartmentService.List({}, response => {\n                        let departmentList = [];\n                        for (let key in response.Entities) {\n                            departmentList.push(response.Entities[key].Id);\n                        }\n                        dlg.loadEntityAndOpenDialog(<ProgramSessionRow>{\n                            ProgramName: item.ProgramName,\n                            DepartmentList: departmentList,\n                            Detail: item.Detail,\n                            ExtraDocument: item.ExtraDocument,\n                            FlowList: FlowList,\n                        }, true);\n                    });\n                } else {\n                    dlg.loadEntityAndOpenDialog(<ProgramSessionRow>{\n                        ProgramName: item.ProgramName,\n                        DepartmentList: item.DepartmentList,\n                        Detail: item.Detail,\n                        ExtraDocument: item.ExtraDocument,\n                        FlowList: FlowList,\n                    }, true);\n                }\n            });\n\n        }\n    }\n\n    protected getButtons(): ToolButton[] {\n        let buttons = super.getButtons();\n\n        buttons.push({\n            title: 'Apply New Program',\n            cssClass: 'apply-changes-button',\n            onClick: e => {\n                let dlg = new MasterProgramApplyDialog();\n                bindToDataChange(dlg, this, (e, dci) => {\n                    this.refresh();\n                }, true);\n                dlg.loadEntityAndOpenDialog(<MasterProgramRow>{\n                    DepartmentList: [2],\n                    Status: MasterProgramStatusType.WaitingApproval,\n                }, true);\n            },\n            separator: true\n        });\n\n        return buttons;\n    }\n}", "import {Decorators, EditorUtils, EntityDialog} from '@serenity-is/corelib';\nimport {\n    MasterProgramForm,\n    MasterProgramRoutineType,\n    MasterProgramRow,\n    MasterProgramService,\n    MasterProgramStatusType,\n    ProgramFlowType,\n    ProgramGradeType,\n} from '../../../ServerTypes/TrainingManagement';\n\n@Decorators.registerClass('HRMSoftware.TrainingManagement.MasterProgramDialog')\nexport class MasterProgramDialog extends EntityDialog<MasterProgramRow, any> {\n    protected getFormKey() {\n        return MasterProgramForm.formKey;\n    }\n\n    protected getRowDefinition() {\n        return MasterProgramRow;\n    }\n\n    protected getService() {\n        return MasterProgramService.baseUrl;\n    }\n\n    protected form = new MasterProgramForm(this.idPrefix);\n\n    private departmentList = [];\n\n    public dialogOpen(asPanel?: boolean): void {\n        super.dialogOpen(asPanel);\n\n        if(this.isNew()){\n            this.form.FlowList.value = [{\n                FlowType: ProgramFlowType.Attendance,\n                GradeType: ProgramGradeType.Na,\n            }];\n        }\n        \n        $('div.field.FlowList' +\n            ' > div' +\n            ' > div.grid-container.slick-container.ltr.ui-widget.sleek-vars' +\n            ' > div.slick-viewport'\n        ).css({\n            'height': 'auto',\n            'min-height': '200px'\n        });\n\n        let allDepartment = $('div.field.AllDepartment' +\n            ' > label[title=\"All Department\"]' +\n            ' + input.editor.s-BooleanEditor[type=\"checkbox\"]'\n        );\n\n        allDepartment.css({\n            'flex': '0 0 auto'\n        });\n\n        EditorUtils.setReadonly(this.form.DepartmentList.element, this.form.AllDepartment.value == true);\n\n        allDepartment.on('change', (Event) => {\n            EditorUtils.setReadonly(this.form.DepartmentList.element, this.form.AllDepartment.value == true);\n            if (this.form.AllDepartment.value == true) {\n                this.departmentList = this.form.DepartmentList.values;\n                this.form.DepartmentList.values = [];\n            } else {\n                this.form.DepartmentList.values = this.departmentList;\n            }\n        });\n\n        let routine = $('#' + this.idPrefix + 'Routine');\n        let routineInterval = $('#' + this.idPrefix + 'RoutineInterval').parent();\n        let routineStartDate = $('#' + this.idPrefix + 'RoutineStartDate').parent();\n        let routineEndDate = $('#' + this.idPrefix + 'RoutineEndDate').parent();\n\n        if (this.form.Routine.get_value() == MasterProgramRoutineType.No) {\n            routineInterval.hide();\n            routineStartDate.hide();\n            routineEndDate.hide();\n        }\n\n        routine.on('change', (Event) => {\n            if (this.form.Routine.get_value() == MasterProgramRoutineType.No) {\n                routineInterval.hide();\n                routineStartDate.hide();\n                routineEndDate.hide();\n            } else {\n                routineInterval.show();\n                routineStartDate.show();\n                routineEndDate.show();\n            }\n        });\n\n        let status = $('#' + this.idPrefix + 'Status');\n        let Comment = $('#' + this.idPrefix + 'Comment').parent();\n\n        if (this.form.Status.get_value() != MasterProgramStatusType.Rejected) {\n            Comment.hide();\n        }\n\n        status.on('change', (Event) => {\n            if (this.form.Status.get_value() != MasterProgramStatusType.Rejected) {\n                Comment.hide();\n            } else {\n                Comment.show();\n            }\n        });\n    }\n}"],
  "mappings": "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",
  "names": ["import_q", "import_corelib", "import_corelib", "MasterProgramDialog", "MasterProgramForm", "MasterProgramRow", "MasterProgramService", "asPanel", "allDepartment", "Event", "routine", "routineInterval", "routineStartDate", "routineEndDate", "status", "Comment", "__name", "__decorateClass", "bindToDataChange", "MasterProgramGrid", "MasterProgramColumns", "MasterProgramDialog", "MasterProgramRow", "MasterProgramService", "container", "columns", "ctx", "e", "row", "cell", "item", "target", "response", "dlg", "ProgramSessionDialog", "FlowList", "key", "DepartmentService", "departmentList", "buttons", "MasterProgramApplyDialog", "dci", "__name", "__decorateClass", "pageInit", "MasterProgramGrid", "__name"]
}
