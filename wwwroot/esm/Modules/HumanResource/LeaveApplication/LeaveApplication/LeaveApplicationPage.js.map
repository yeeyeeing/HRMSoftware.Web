{
  "version": 3,
  "sources": ["../../../../../../Modules/HumanResource/LeaveApplication/LeaveApplication/LeaveApplicationPage.ts", "../../../../../../Modules/HumanResource/LeaveApplication/LeaveApplication/LeaveApplicationGrid.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\nimport { LeaveApplicationGrid } from './LeaveApplicationGrid';\n\nexport default function pageInit() {\n    initFullHeightGridPage(new LeaveApplicationGrid($('#GridDiv')).element);\n}", "import { Criteria, Decorators, EntityGrid, GridRowSelectionMixin, IntegerEditor, ListResponse, LookupEditor, QuickFilter, Select2Editor, StringEditor, Widget } from '@serenity-is/corelib';\nimport { LeaveApplicationColumns, LeaveApplicationRow, LeaveApplicationService } from '../../../ServerTypes/LeaveApplication';\nimport { LeaveApplicationDialog } from './LeaveApplicationDialog';\nimport { Authorization } from '@serenity-is/corelib/q';\nimport { PermissionKeys } from '../../../ServerTypes/Administration';\nimport { OccupationService, JobGradeService, DepartmentService, DivisionService } from '../../../ServerTypes/OrganisationHierarchy';\nimport { EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { MasterCostCentreRow, MasterCostCentreService } from '../../../ServerTypes/Master';\nimport { MasterCp8dRow, MasterCp8dService } from '../../../ServerTypes/Master';\n\n\n@Decorators.registerClass('HRMSoftware.LeaveApplication.LeaveApplicationGrid')\nexport class LeaveApplicationGrid extends EntityGrid<LeaveApplicationRow, any> {\n    protected getColumnsKey() { return LeaveApplicationColumns.columnsKey; }\n    protected getDialogType() { return LeaveApplicationDialog; }\n    protected getRowDefinition() { return LeaveApplicationRow; }\n    protected getService() { return LeaveApplicationService.baseUrl; }\n    protected getAddButtonCaption() {\n        return \"Apply Leave\";\n    }\n    protected getQuickFilters(): QuickFilter<Widget<any>, any>[] {\n        //Gets the Filters defined in the Columns or in parent grids.\n        let filters = super.getQuickFilters();\n\n        // console.log(filters[3].type = Select2Editor)\n\n        if (Authorization.hasPermission(PermissionKeys.HumanResources)) {\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: LeaveApplicationRow.Fields.OccupationName,\n                type: Select2Editor,\n                title: \"Occupation\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: LeaveApplicationRow.Fields.JobGradeName,\n                type: Select2Editor,\n                title: \"Job Grade\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: LeaveApplicationRow.Fields.DivisionName,\n                type: Select2Editor,\n                title: \"Division\",\n\n            });\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: LeaveApplicationRow.Fields.DepartmentName,\n                type: Select2Editor,\n                title: \"Department\",\n\n            });\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: LeaveApplicationRow.Fields.EmployeeName,\n                type: Select2Editor,\n                title: \"Name\",\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: LeaveApplicationRow.Fields.EmployeeID,\n                type: Select2Editor,\n                \n                title: \"Employee ID\",\n            });\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: LeaveApplicationRow.Fields.CostCentreName,\n                type: Select2Editor,\n\n                title: \"Cost Centre\",\n            });\n\n\n            filters.reverse()\n        }\n        return filters;\n    }\n    protected createQuickFilters(): void {\n        // let base class to create quick filters first\n        super.createQuickFilters();\n\n        if (Authorization.hasPermission(PermissionKeys.HumanResources)) {\n            const months: string[] = [\n                'January',   // 0\n                'February',  // 1\n                'March',     // 2\n                'April',     // 3\n                'May',       // 4\n                'June',      // 5\n                'July',      // 6\n                'August',    // 7\n                'September', // 8\n                'October',   // 9\n                'November',  // 10\n                'December'   // 11\n            ];\n\n            OccupationService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, LeaveApplicationRow.Fields.OccupationName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            JobGradeService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, LeaveApplicationRow.Fields.JobGradeName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            DepartmentService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, LeaveApplicationRow.Fields.DepartmentName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            DivisionService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, LeaveApplicationRow.Fields.DivisionName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n\n            })\n            EmployeeProfileService.List({\n            }, response => {\n                for (var index in response.Entities) {\n                    this.findQuickFilter(Select2Editor, LeaveApplicationRow.Fields.EmployeeName).items.push({ id: (response.Entities[index].EmployeeName).toString(), text: (response.Entities[index].EmployeeName).toString(), })\n                    this.findQuickFilter(Select2Editor, LeaveApplicationRow.Fields.EmployeeID).items.push({ id: (response.Entities[index].EmployeeID).toString(), text: (response.Entities[index].EmployeeID).toString(), })\n\n                }\n            })\n            MasterCostCentreService.List({\n            }, response => {\n                for (var index in response.Entities) {\n                    this.findQuickFilter(Select2Editor, LeaveApplicationRow.Fields.CostCentreName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n\n                }\n            })\n\n\n\n        }\n\n    }\n\n\n    constructor(container: JQuery) {\n        super(container);\n\n\n\n\n\n\n    }\n\n    protected getColumns()\n    {\n        var columns = super.getColumns();\n        var index\n        if (!Authorization.hasPermission(PermissionKeys.HumanResources)) //if he is not HR guy, hide the employeeID and approved by column\n        {\n            for (index in columns)\n            {\n                if (columns[index].name == 'Employee Id' || columns[index].name == 'Approved By')\n                {\n                    columns.splice(index, 1);\n                }\n            }\n        }\n        return columns;\n    }\n  \n    protected onViewProcessData(response: ListResponse<LeaveApplicationRow>)\n    {\n        this.toolbar.findButton(\"column-picker-button\").toggle(false);\n\n        response = super.onViewProcessData(response);\n        if (Authorization.hasPermission(PermissionKeys.HumanResources))\n        {\n            for (var my in response.Entities)\n            {\n\n            }\n        }\n\n        else\n            console.log('this user is not a HR guy')\n\n        return response;\n\n    }\n\n\n}"],
  "mappings": "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",
  "names": ["import_q", "import_corelib", "import_q", "LeaveApplicationGrid", "LeaveApplicationColumns", "LeaveApplicationDialog", "LeaveApplicationRow", "LeaveApplicationService", "filters", "PermissionKeys", "months", "OccupationService", "response", "index", "JobGradeService", "DepartmentService", "DivisionService", "EmployeeProfileService", "MasterCostCentreService", "container", "columns", "my", "__name", "__decorateClass", "pageInit", "LeaveApplicationGrid", "__name"]
}
