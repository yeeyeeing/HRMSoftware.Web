{
  "version": 3,
  "sources": ["../../../../../../Modules/HumanResource/LeaveApplication/LeaveApplication/LeaveApplicationPage.ts", "../../../../../../Modules/HumanResource/LeaveApplication/LeaveApplication/LeaveApplicationGrid.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\nimport { LeaveApplicationGrid } from './LeaveApplicationGrid';\n\nexport default function pageInit() {\n    initFullHeightGridPage(new LeaveApplicationGrid($('#GridDiv')).element);\n}", "import { Criteria, Decorators, EntityGrid, GridRowSelectionMixin, IntegerEditor, ListResponse, LookupEditor, QuickFilter, Select2Editor, StringEditor, Widget, RetrieveResponse } from '@serenity-is/corelib';\nimport { LeaveApplicationColumns, LeaveApplicationRow, LeaveApplicationService, LeaveStatus } from '../../../ServerTypes/LeaveApplication';\nimport { LeaveApplicationDialog } from './LeaveApplicationDialog';\nimport { PermissionKeys } from '../../../ServerTypes/Administration';\nimport { OccupationService, JobGradeService, DepartmentService, DivisionService } from '../../../ServerTypes/OrganisationHierarchy';\nimport { EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { MasterCostCentreRow, MasterCostCentreService } from '../../../ServerTypes/Master';\nimport { MasterCp8dRow, MasterCp8dService } from '../../../ServerTypes/Master';\n\nimport { serviceCall, Authorization, isEmptyOrNull, getLookup, confirm, alertDialog, notifyInfo } from '@serenity-is/corelib/q';\nimport { OrganisationChartService } from '../../../ServerTypes/OrganisationChart';\r\nimport {  LeaveApplicationRejectDialog } from './LeaveApplicationRejectDialog';\r\n\n@Decorators.registerClass('HRMSoftware.LeaveApplication.LeaveApplicationGrid')\nexport class LeaveApplicationGrid extends EntityGrid<LeaveApplicationRow, any> {\n    protected getColumnsKey() { return LeaveApplicationColumns.columnsKey; }\n    protected getDialogType() { return LeaveApplicationDialog; }\n    protected getRowDefinition() { return LeaveApplicationRow; }\n    protected getService() { return LeaveApplicationService.baseUrl; }\n    protected getAddButtonCaption() {\n        return \"Apply Leave\";\n    }\n    protected getButtons() {\n        var buttons = super.getButtons();\n        var self = this\n        buttons.push({\r\n            title: 'Leave Application Claim Batch Approve',\r\n            cssClass: 'fas fa-hat-wizard text-bg-success approveButton hidden',\r\n            onClick: e => {\r\n                confirm(\r\n                    \"Do you want to approve all selected applications?\",\r\n                    async () => {\n                        if (self.rowSelection.getSelectedAsInt64().length == 0) {\n                            alertDialog('Please select at least one application to approve')\n                            return\n                        }\n\r\n                        let selectedIds = self.rowSelection.getSelectedAsInt64();\r\n\r\n                        for (const dataId of selectedIds) {\r\n                            try {\r\n                                let response = await LeaveApplicationService.Retrieve({ EntityId: dataId });\r\n                                let EmployeeApproval = response.Entity.EmployeeStatus;\r\n                                let HrApproval = response.Entity.HrStatus;\r\n                                let entityId = response.Entity.Id;\r\n                                let EmployeeRowId = response.Entity.EmployeeRowId;\r\n                                let updateData: LeaveApplicationRow = {};\r\n                                /*\r\n                                let SuperiorPermission = await new Promise((resolve, reject) => {\r\n                                    serviceCall<RetrieveResponse<any>>({\r\n                                        service: OrganisationChartService.baseUrl + '/PermissionToAcknowledge',\r\n                                        data: {\r\n                                            'UserEmployeeRowID': Authorization.userDefinition.EmployeeRowID,\r\n                                            'ApplicantEmployeeRowID': EmployeeRowId\r\n                                        },\r\n                                        method: \"GET\",\r\n                                        onSuccess: resolve,\r\n                                        onError: reject\r\n                                    });\r\n                                });\r\n                                */\n                                let SuperiorPermission = self.SuperiorOfEmployeeRowIdList.includes(EmployeeRowId)\n\r\n                                if (Authorization.userDefinition.Permissions[PermissionKeys.HumanResources]) { // HR\n                                    if (SuperiorPermission == true) {\n                                        if (EmployeeApproval === LeaveStatus.NotNeeded || HrApproval === LeaveStatus.NotNeeded) {\n                                            if (EmployeeApproval === LeaveStatus.NotNeeded) {\n                                                updateData = {\n                                                    HrStatus: LeaveStatus.Approved,\n                                                    HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                };\n                                            } else if (HrApproval === LeaveStatus.NotNeeded) {\n                                                updateData = {\n                                                    EmployeeStatus: LeaveStatus.Approved,\n                                                    EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                };\n                                            }\n                                        } else {\n                                            if (HrApproval === LeaveStatus.Approved) {\n                                                updateData = {\n                                                    EmployeeStatus: LeaveStatus.Approved,\n                                                    EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                };\n                                            } else if (EmployeeApproval === LeaveStatus.Approved) {\n                                                updateData = {\n                                                    HrStatus: LeaveStatus.Approved,\n                                                    HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                };\n                                            } else {\n                                                updateData = {\n                                                    EmployeeStatus: LeaveStatus.Approved,\n                                                    HrStatus: LeaveStatus.Approved,\n                                                    EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                    HrUpdated: Authorization.userDefinition.EmployeeRowID\n                                                };\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        updateData = {\n                                            HrStatus: LeaveStatus.Approved,\n                                            HrUpdated: Authorization.userDefinition.EmployeeRowID\n                                        };\n                                    }\n                                } else {\n                                    updateData = {\n                                        EmployeeStatus: LeaveStatus.Approved,\n                                        EmployeeUpdated: Authorization.userDefinition.EmployeeRowID\n                                    };\n                                }\r\n\r\n                                await LeaveApplicationService.Update({ EntityId: entityId, Entity: updateData });\r\n\r\n                            } catch (error) {\r\n                                console.error(`Error updating application ${dataId}:`, error);\r\n                            }\r\n\r\n                        }\r\n\r\n                        notifyInfo(`${selectedIds.length} records have been approved.`)\r\n                        self.internalRefresh(); // Refresh after all updates complete\r\n                    }\r\n                );\r\n            },\r\n            separator: true\r\n        });\r\n\r\n        buttons.push({\r\n            title: 'Leave Application Batch Reject',\r\n            cssClass: 'fas fa-hat-wizard text-bg-danger rejectButton hidden',\r\n            onClick: e => {\n                if (self.rowSelection.getSelectedAsInt64().length == 0) {\n                    alertDialog('Please select at least one application to reject')\n                    return\n                }\r\n                confirm(\r\n                    \"Do you want to reject all selected applications?\",\r\n                    async () => {\n\r\n                        let selectedIds = self.rowSelection.getSelectedAsInt64();\r\n                        var rejectDlg = new LeaveApplicationRejectDialog()\n                        rejectDlg.dialogOpen()\n                        rejectDlg.element.on('dialogclose', async () => {\n                            var rejectReason = window[\"rejectReason\"]\n\r\n                            for (const dataId of selectedIds) {\r\n                                try {\r\n                                    let response = await LeaveApplicationService.Retrieve({ EntityId: dataId });\r\n                                    let EmployeeApproval = response.Entity.EmployeeStatus;\r\n                                    let HrApproval = response.Entity.HrStatus;\r\n                                    let entityId = response.Entity.Id;\r\n                                    let EmployeeRowId = response.Entity.EmployeeRowId;\r\n                                    let updateData: LeaveApplicationRow = {};\r\n\r\n                                    let SuperiorPermission = await new Promise((resolve, reject) => {\r\n                                        serviceCall<RetrieveResponse<any>>({\r\n                                            service: OrganisationChartService.baseUrl + '/PermissionToAcknowledge',\r\n                                            data: {\r\n                                                'UserEmployeeRowID': Authorization.userDefinition.EmployeeRowID,\r\n                                                'ApplicantEmployeeRowID': EmployeeRowId\r\n                                            },\r\n                                            method: \"GET\",\r\n                                            onSuccess: resolve,\r\n                                            onError: reject\r\n                                        });\r\n                                    });\r\n                                    if (Authorization.userDefinition.Permissions[PermissionKeys.HumanResources] == true) { // is HR\n                                        if (SuperiorPermission == true) {\n                                            if (EmployeeApproval == LeaveStatus.NotNeeded || HrApproval == LeaveStatus.NotNeeded) {\n                                                if (EmployeeApproval == LeaveStatus.NotNeeded) {\n                                                    updateData = {\n                                                        HrStatus: LeaveStatus.Rejected,\n                                                        HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                        HrRejectReason: rejectReason\n                                                    };\n                                                }\n                                                else if (HrApproval == LeaveStatus.NotNeeded) {\n                                                    updateData = {\n                                                        EmployeeStatus: LeaveStatus.Rejected,\n                                                        EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                        SuperiorRejectReason: rejectReason\n\n                                                    };\n                                                }\n                                            }\n                                            else {\n                                                if (HrApproval == LeaveStatus.Pending) {\n                                                    updateData = {\n                                                        HrStatus: LeaveStatus.Rejected,\n                                                        HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                        HrRejectReason: rejectReason\n                                                    };\n                                                }\n                                                else if (EmployeeApproval == LeaveStatus.Pending) {\n                                                    updateData = {\n                                                        EmployeeStatus: LeaveStatus.Rejected,\n                                                        EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                        SuperiorRejectReason: rejectReason\n                                                    };\n                                                }\n                                                else {\n                                                    updateData = {\n                                                        EmployeeStatus: LeaveStatus.Rejected,\n                                                        EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                        HrStatus: LeaveStatus.Rejected,\n                                                        HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                        HrRejectReason: rejectReason,\n                                                        SuperiorRejectReason: rejectReason\n\n                                                    };\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            updateData = {\n                                                HrStatus: LeaveStatus.Rejected,\n                                                HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                HrRejectReason: rejectReason,\n\n                                            };\n                                        }\n\n                                    }\n                                    else {\n                                        updateData = {\n                                            EmployeeStatus: LeaveStatus.Rejected,\n                                            EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                            SuperiorRejectReason: rejectReason\n                                        };\n                                    }\r\n\r\n                                    await LeaveApplicationService.Update({ EntityId: entityId, Entity: updateData });\r\n                                }\r\n                                catch (error) {\r\n                                    console.error(`Error updating application ${dataId}:`, error);\r\n                                }\r\n                            }\r\n                            notifyInfo(`${selectedIds.length} records have been rejected.`)\r\n                            self.internalRefresh(); // Refresh after all updates complete\n                        })\n\r\n                    })\r\n            }\r\n        });\n        /*\n        buttons.push({\n            title: 'Leave Application Batch Approve',\n            cssClass: 'fas fa-hat-wizard text-bg-success approveButton',\n            onClick: e => {\n                if (self.rowSelection.getSelectedAsInt64().length == 0) {\n                    alertDialog('Please select at least one application to approve')\n                    return\n                }\n                confirm(\n                    \"Do you want to approve all selected applications?\",\n                    () => {\n                        let selectedIds = self.rowSelection.getSelectedAsInt64();\n                        let approvePromises = self.rowSelection.getSelectedAsInt64().map(dataId => {\n                            return LeaveApplicationService.Retrieve({ EntityId: dataId })\n                                .then(response => {\n                                    let EmployeeApproval = response.Entity.EmployeeStatus;\n                                    let HrApproval = response.Entity.HrStatus;\n                                    let entityId = response.Entity.Id;\n                                    let EmployeeRowId = response.Entity.EmployeeRowId;\n                                    let updateData: LeaveApplicationRow = {};\n                                    // Wrap `serviceCall` in a Promise\n                                    return new Promise((resolve, reject) => {\n                                        serviceCall<RetrieveResponse<any>>({\n                                            service: OrganisationChartService.baseUrl + '/PermissionToAcknowledge',\n                                            data: {\n                                                'UserEmployeeRowID': Authorization.userDefinition.EmployeeRowID,\n                                                'ApplicantEmployeeRowID': EmployeeRowId\n                                            },\n                                            method: \"GET\",\n                                            onSuccess: (SuperiorPermission) => {\n                                                if (Authorization.userDefinition.Permissions[PermissionKeys.HumanResources]) { // HR\n                                                    if (SuperiorPermission==true) {\n                                                        if (EmployeeApproval === LeaveStatus.NotNeeded || HrApproval === LeaveStatus.NotNeeded) {\n                                                            if (EmployeeApproval === LeaveStatus.NotNeeded) {\n                                                                updateData = {\n                                                                    HrStatus: LeaveStatus.Approved,\n                                                                    HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                                };\n                                                            } else if (HrApproval === LeaveStatus.NotNeeded) {\n                                                                updateData = {\n                                                                    EmployeeStatus: LeaveStatus.Approved,\n                                                                    EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                                };\n                                                            }\n                                                        } else {\n                                                            if (HrApproval === LeaveStatus.Approved) {\n                                                                updateData = {\n                                                                    EmployeeStatus: LeaveStatus.Approved,\n                                                                    EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                                };\n                                                            } else if (EmployeeApproval === LeaveStatus.Approved) {\n                                                                updateData = {\n                                                                    HrStatus: LeaveStatus.Approved,\n                                                                    HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                                };\n                                                            } else {\n                                                                updateData = {\n                                                                    EmployeeStatus: LeaveStatus.Approved,\n                                                                    HrStatus: LeaveStatus.Approved,\n                                                                    EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                                    HrUpdated: Authorization.userDefinition.EmployeeRowID\n                                                                };\n                                                            }\n                                                        }\n                                                    } else {\n                                                        updateData = {\n                                                            HrStatus: LeaveStatus.Approved,\n                                                            HrUpdated: Authorization.userDefinition.EmployeeRowID\n                                                        };\n                                                    }\n                                                } else {\n                                                    updateData = {\n                                                        EmployeeStatus: LeaveStatus.Approved,\n                                                        EmployeeUpdated: Authorization.userDefinition.EmployeeRowID\n                                                    };\n                                                }\n\n                                                // Call `Update` and resolve the promise\n                                                LeaveApplicationService.Update({\n                                                    EntityId: entityId,\n                                                    Entity: updateData\n                                                }).then(resolve).catch(reject);\n                                            },\n                                            onError: reject\n                                        });\n                                    });\n                                });\n                        });\n\n                        // Wait for all operations to complete before refreshing\n                        Promise.all(approvePromises)\n                            .then(() => {\n                                notifyInfo(`${selectedIds.length} records have been approved.`)\n                                self.internalRefresh();\n                            })\n                            .catch(error => {\n                                console.error('Error in update operations:', error);\n                            });\n                    }\n                )\n            },\n            separator: true\n        });\n        buttons.push({\n            title: 'Leave Application Batch Reject',\n            cssClass: 'fas fa-hat-wizard text-bg-danger rejectButton',\n            onClick: e => {\n                if (self.rowSelection.getSelectedAsInt64().length == 0) {\n                    alertDialog('Please select at least one application to reject')\n                    return\n                }\n                confirm(\n                    \"Do you want to reject all selected applications?\",\n                    () => {\n                        \n                        var rejectDlg = new LeaveApplicationRejectDialog()\n                        rejectDlg.dialogOpen()\n                        rejectDlg.element.on('dialogclose', () => {\r\n                            console.log('haha')\n                            console.log(window[\"rejectReason\"])\n                            let selectedIds = self.rowSelection.getSelectedAsInt64();\n                            var rejectReason = window[\"rejectReason\"]\n                            // Create an array of promises for each delete operation\n                            let rejectPromises = self.rowSelection.getSelectedAsInt64().map(dataId => {\n                                return LeaveApplicationService.Retrieve({ EntityId: dataId })\n                                    .then(response => {\n                                        let EmployeeApproval = response.Entity.EmployeeStatus;\n                                        let HrApproval = response.Entity.HrStatus;\n                                        let entityId = response.Entity.Id;\n                                        let updateData: LeaveApplicationRow = {};\n                                        let EmployeeRowId = response.Entity.EmployeeRowId\n\n\n                                        return new Promise((resolve, reject) => {\n                                            serviceCall<RetrieveResponse<any>>({\n                                                service: OrganisationChartService.baseUrl + '/PermissionToAcknowledge',\n                                                data: {\n                                                    'UserEmployeeRowID': Authorization.userDefinition.EmployeeRowID,\n                                                    'ApplicantEmployeeRowID': EmployeeRowId\n                                                },\n                                                method: \"GET\",\n                                                async: false,\n                                                onSuccess: (response) => {\n                                                    console.log(response)\n                                                    var SuperiorPermission = response\n                                                    if (Authorization.userDefinition.Permissions[PermissionKeys.HumanResources]) { // is HR\n                                                        if (SuperiorPermission == true) {\n                                                            if (EmployeeApproval == LeaveStatus.NotNeeded || HrApproval == LeaveStatus.NotNeeded) {\n                                                                if (EmployeeApproval == LeaveStatus.NotNeeded) {\n                                                                    updateData = {\n                                                                        HrStatus: LeaveStatus.Rejected,\n                                                                        HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                                        HrRejectReason: rejectReason\n                                                                    };\n                                                                }\n                                                                else if (HrApproval == LeaveStatus.NotNeeded) {\n                                                                    updateData = {\n                                                                        EmployeeStatus: LeaveStatus.Rejected,\n                                                                        EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                                        SuperiorRejectReason: rejectReason\n\n                                                                    };\n                                                                }\n                                                            }\n                                                            else {\n                                                                if (HrApproval == LeaveStatus.Pending) {\n                                                                    updateData = {\n                                                                        HrStatus: LeaveStatus.Rejected,\n                                                                        HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                                        HrRejectReason: rejectReason\n                                                                    };\n                                                                }\n                                                                else if (EmployeeApproval == LeaveStatus.Pending) {\n                                                                    updateData = {\n                                                                        EmployeeStatus: LeaveStatus.Rejected,\n                                                                        EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                                        SuperiorRejectReason: rejectReason\n                                                                    };\n                                                                }\n                                                                else {\n                                                                    updateData = {\n                                                                        EmployeeStatus: LeaveStatus.Rejected,\n                                                                        EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                                        HrStatus: LeaveStatus.Rejected,\n                                                                        HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                                        HrRejectReason: rejectReason,\n                                                                        SuperiorRejectReason: rejectReason\n\n                                                                    };\n                                                                }\n                                                            }\n                                                        }\n                                                        else {\n                                                            updateData = {\n                                                                HrStatus: LeaveStatus.Rejected,\n                                                                HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                                HrRejectReason: rejectReason,\n\n                                                            };\n                                                        }\n\n                                                    }\n                                                    else {\n                                                        updateData = {\n                                                            EmployeeStatus: LeaveStatus.Rejected,\n                                                            EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                            SuperiorRejectReason: rejectReason\n                                                        };\n                                                    }\n\n\n                                                    // Call `Update` and resolve the promise\n                                                    LeaveApplicationService.Update({\n                                                        EntityId: entityId,\n                                                        Entity: updateData\n                                                    }).then(resolve).catch(reject);\n\n                                                }\n                                            })\n                                        });\n\n                                    });\n                            }); // Convert jQuery object to array\n\n                            // Wait for all operations to complete before refreshing\n                            Promise.all(rejectPromises)\n                                .then(() => {\n                                    notifyInfo(`${selectedIds.length} records have been rejected.`)\n                                    self.internalRefresh();\n                                })\n                                .catch(error => {\n                                    console.error('Error in update operations:', error);\n                                });\n                        });\n                       \n\n                    }\n                )\n            },\n            separator: true\n        });\n        */\n        return buttons;\n    }\n\n    public rowSelection: GridRowSelectionMixin;\n    protected onViewSubmit(): boolean {\n        if (!super.onViewSubmit()) return false;\n\n        var self = this\n        this.slickGrid.onHeaderCellRendered.subscribe((e, args) => {\n            if (args.column.id === \"SelectAll\") {\n                $(args.node).empty().append(`<input type='checkbox' id='selectAll'/>`);\n            }\n        });\n        \n\n        // Ensure checkbox selects/deselects all rows\n        $(document).on('change', '#selectAll', function () {\n            let checked = $(this).prop('checked');\n            $('.row-checkbox').prop('checked', checked);\n        });\n\n        return true;\n    }\n    \n\n    protected getQuickFilters(): QuickFilter<Widget<any>, any>[] {\n        //Gets the Filters defined in the Columns or in parent grids.\n        let filters = super.getQuickFilters();\n\n        // console.log(filters[3].type = Select2Editor)\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: LeaveApplicationRow.Fields.OccupationName,\n                type: Select2Editor,\n                title: \"Occupation\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: LeaveApplicationRow.Fields.JobGradeName,\n                type: Select2Editor,\n                title: \"Job Grade\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: LeaveApplicationRow.Fields.DivisionName,\n                type: Select2Editor,\n                title: \"Division\",\n\n            });\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: LeaveApplicationRow.Fields.DepartmentName,\n                type: Select2Editor,\n                title: \"Department\",\n\n            });\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: LeaveApplicationRow.Fields.EmployeeName,\n                type: Select2Editor,\n                title: \"Name\",\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: LeaveApplicationRow.Fields.EmployeeID,\n                type: Select2Editor,\n                \n                title: \"Employee ID\",\n            });\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: LeaveApplicationRow.Fields.CostCentreName,\n                type: Select2Editor,\n\n                title: \"Cost Centre\",\n            });\n\n\n            filters.reverse()\n        \n        return filters;\n    }\n    protected createQuickFilters(): void {\n        // let base class to create quick filters first\n        super.createQuickFilters();\n\n            const months: string[] = [\n                'January',   // 0\n                'February',  // 1\n                'March',     // 2\n                'April',     // 3\n                'May',       // 4\n                'June',      // 5\n                'July',      // 6\n                'August',    // 7\n                'September', // 8\n                'October',   // 9\n                'November',  // 10\n                'December'   // 11\n            ];\n\n            OccupationService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, LeaveApplicationRow.Fields.OccupationName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            JobGradeService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, LeaveApplicationRow.Fields.JobGradeName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            DepartmentService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, LeaveApplicationRow.Fields.DepartmentName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            DivisionService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, LeaveApplicationRow.Fields.DivisionName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n\n            })\n            EmployeeProfileService.List({\n            }, response => {\n                for (var index in response.Entities) {\n                    this.findQuickFilter(Select2Editor, LeaveApplicationRow.Fields.EmployeeName).items.push({ id: (response.Entities[index].EmployeeName).toString(), text: (response.Entities[index].EmployeeName).toString(), })\n                    this.findQuickFilter(Select2Editor, LeaveApplicationRow.Fields.EmployeeID).items.push({ id: (response.Entities[index].EmployeeID).toString(), text: (response.Entities[index].EmployeeID).toString(), })\n\n                }\n            })\n            MasterCostCentreService.List({\n            }, response => {\n                for (var index in response.Entities) {\n                    this.findQuickFilter(Select2Editor, LeaveApplicationRow.Fields.CostCentreName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n\n                }\n            })\n\n\n\n        \n\n    }\n\n    public SuperiorOfEmployeeRowIdList: Promise<number[]> = [];\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n    protected createToolbarExtensions() {\r\n        super.createToolbarExtensions();\n        var self = this\n       \n        console.log('haha')\n\n        let employeeRowNumber = new Promise<number[]>((resolve, reject) => {\r\n           serviceCall<RetrieveResponse<any>>({\n               service: OrganisationChartService.baseUrl + '/GetEmployeeUserCanView',\n               data: {\n                   'EmployeeRowID': Authorization.userDefinition.EmployeeRowID,\n                   'PermissionKey': PermissionKeys.LeaveApproval\n               },\n               method: \"GET\",\n               onError: (error) => reject(error), // Handle failure properly\r\n               onSuccess: (response) => {\r\n                   console.log(\"API Response:\", response);\r\n                   resolve(response || []);\r\n               }\n           })\n        });\n       console.log('haha')\n        employeeRowNumber\r\n            .then(response => {\n                self.SuperiorOfEmployeeRowIdList = employeeRowNumber\n                console.log(\"Received data:\", self.SuperiorOfEmployeeRowIdList);\n\r\n                console.log(\"Received data:\", employeeRowNumber);\n            self.rowSelection = new GridRowSelectionMixin(self, {\r\n                // demo code\r\n                selectable: (item: LeaveApplicationRow) => {\r\n\n                    var superior = response.includes(item.EmployeeRowId)\n                    if (item.EmployeeRowId == Authorization.userDefinition.EmployeeRowID\n                        || (item.Status != LeaveStatus.Pending))\n                        return false;\n                   \n                    const isHr = Authorization.hasPermission(PermissionKeys.HumanResources)\n                    if (item.Status == LeaveStatus.Pending) {\n                        if ((item.EmployeeStatus == LeaveStatus.NotNeeded)\n                            || (isHr && item.HrStatus == LeaveStatus.NotNeeded))\n                            return false;\n\n                        else if ((isHr && item.HrStatus == LeaveStatus.Pending)\n                            || (superior && item.EmployeeStatus == LeaveStatus.Pending)) //is superior\n                        {\n                            $('.approveButton, .rejectButton').removeClass(\"hidden\")\r\n\n                            //                        $('.approveButton, .rejectButton').show()\n                            return true;\r\n\n                        }\n                    }\r\n\r\n                }\r\n            });\n\n\r\n        })\r\n        .catch(error => {\r\n            console.error(\"Error fetching data:\", error);\r\n        });\n        $(document).on('click', '.select-item.check-box.no-float', function () {\n            // Remove highlight from previously highlighted rows\n            $('.select-item.check-box.no-float').parent().parent().removeClass('highlighted-row');\n            // Add highlight to clicked row\n            $('.select-item.check-box.no-float.checked').parent().parent().addClass('highlighted-row');\n        });\n        // Add CSS for highlighting selected rows\n        $('<style>')\n            .prop('type', 'text/css')\n            .html(`\n            .slick-row.highlighted-row {\n                background-color: #D3E5FF !important;\n            }\n        `)\n            .appendTo('head');\n    }\n\n    protected getColumns()\n    {\n        var columns = super.getColumns();\n        var index\n        if (!Authorization.hasPermission(PermissionKeys.HumanResources)) //if he is not HR guy, hide the employeeID and approved by column\n        {\n            for (index in columns)\n            {\n                if (columns[index].name == 'Employee Id' || columns[index].name == 'Approved By')\n                {\n                    columns.splice(index, 1);\n                }\n            }\n        }\n        columns.unshift(GridRowSelectionMixin.createSelectColumn(() => this.rowSelection));\r\n\n        return columns;\n    }\n  \n    protected onViewProcessData(response: ListResponse<LeaveApplicationRow>)\n    {\n        response = super.onViewProcessData(response);\r\n        let userDefinition = Authorization.userDefinition\r\n        let userId = userDefinition.EmployeeRowID\r\n        const allSame = response.Entities.every(entity => entity.EmployeeRowId === userId);\r\n        if (allSame) {\r\n            const isHr = Authorization.hasPermission(PermissionKeys.HumanResources)\r\n            if (isHr) {\r\n                $('.approveButton, .rejectButton').removeClass(\"hidden\")\r\n            }\r\n            else {\r\n                $('.approveButton, .rejectButton').addClass(\"hidden\")\r\n            }\r\n        }\r\n        else {\r\n            $('.approveButton, .rejectButton').removeClass(\"hidden\")\r\n        }\r\n        this.toolbar.findButton(\"column-picker-button\").toggle(false);\r\n        return response;\r\n\n    }\n\n    protected createEntityDialog(itemType: string, callback: (dlg: LeaveApplicationDialog) => void): LeaveApplicationDialog {\r\n        let dialog = super.createEntityDialog(itemType, callback) as LeaveApplicationDialog;\r\n        var self = this\r\n        // Attach 'dialogclose' event listener to refresh the grid when the dialog closes\r\n        dialog.element.on('dialogclose', () => {\r\n            self.internalRefresh();  // Refresh grid after closing the dialog\n        });\r\n\r\n        return dialog;  // Ensure correct return type\r\n    }\r\n\n}"],
  "mappings": "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",
  "names": ["import_q", "import_corelib", "import_q", "LeaveApplicationGrid", "container", "LeaveApplicationColumns", "LeaveApplicationDialog", "LeaveApplicationRow", "LeaveApplicationService", "buttons", "self", "e", "__async", "selectedIds", "dataId", "response", "EmployeeApproval", "HrApproval", "entityId", "EmployeeRowId", "updateData", "SuperiorPermission", "PermissionKeys", "error", "rejectDlg", "LeaveApplicationRejectDialog", "rejectReason", "resolve", "reject", "OrganisationChartService", "args", "checked", "filters", "months", "OccupationService", "index", "JobGradeService", "DepartmentService", "DivisionService", "EmployeeProfileService", "MasterCostCentreService", "employeeRowNumber", "item", "superior", "isHr", "columns", "userId", "entity", "itemType", "callback", "dialog", "__name", "__decorateClass", "pageInit", "LeaveApplicationGrid", "__name"]
}
