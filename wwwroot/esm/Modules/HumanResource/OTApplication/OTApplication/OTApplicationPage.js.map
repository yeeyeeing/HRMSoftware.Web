{
  "version": 3,
  "sources": ["../../../../../../Modules/HumanResource/OTApplication/OTApplication/OTApplicationPage.ts", "../../../../../../Modules/HumanResource/OTApplication/OTApplication/OTApplicationGrid.ts", "../../../../../../Modules/HumanResource/OTApplication/OTApplication/OTApplicationDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\nimport { OTApplicationGrid } from './OTApplicationGrid';\n\nexport default function pageInit() {\n    initFullHeightGridPage(new OTApplicationGrid($('#GridDiv')).element);\n}", "import { Criteria, Decorators, EntityGrid, IntegerEditor, ListResponse, LookupEditor, QuickFilter, Select2Editor, StringEditor, Widget, RetrieveResponse, GridRowSelectionMixin } from '@serenity-is/corelib';\nimport { PermissionKeys } from '../../../ServerTypes/Administration';\nimport { OTApplicationColumns, OTApplicationRow, OTApplicationService, OTApplicationStatus } from '../../../ServerTypes/OTApplication';\nimport { OTApplicationDialog } from './OTApplicationDialog';\nimport { OccupationService } from '../../../ServerTypes/OrganisationHierarchy';\nimport { JobGradeService } from '../../../ServerTypes/OrganisationHierarchy';\nimport { DepartmentService } from '../../../ServerTypes/OrganisationHierarchy/DepartmentService';\nimport { DivisionService } from '../../../ServerTypes/OrganisationHierarchy/DivisionService';\nimport { EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { MasterCostCentreService } from '../../../ServerTypes/Master';\nimport { serviceCall, Authorization, isEmptyOrNull, getLookup, confirm } from '@serenity-is/corelib/q';\nimport { OrganisationChartService } from '../../../ServerTypes/OrganisationChart';\r\n\n@Decorators.registerClass('HRMSoftware.OTApplication.OTApplicationGrid')\nexport class OTApplicationGrid extends EntityGrid<OTApplicationRow, any> {\n    protected getColumnsKey() { return OTApplicationColumns.columnsKey; }\n    protected getDialogType() { return OTApplicationDialog; }\n    protected getRowDefinition() { return OTApplicationRow; }\n    protected getService() { return OTApplicationService.baseUrl; }\n\r\n    protected createEntityDialog(itemType: string, callback: (dlg: OTApplicationDialog) => void): OTApplicationDialog {\r\n        let dialog = super.createEntityDialog(itemType, callback) as OTApplicationDialog;\r\n        var self = this\r\n        // Attach 'dialogclose' event listener to refresh the grid when the dialog closes\r\n        dialog.element.on('dialogclose', () => {\r\n            self.internalRefresh();  // Refresh grid after closing the dialog\n            console.log('hahaa')\r\n        });\r\n\r\n        return dialog;  // Ensure correct return type\r\n    }\r\n\r\n    \n    protected getQuickFilters(): QuickFilter<Widget<any>, any>[] {\n        //Gets the Filters defined in the Columns or in parent grids.\n        let filters = super.getQuickFilters();\n\n        // console.log(filters[3].type = Select2Editor)\n\n        if (Authorization.hasPermission(PermissionKeys.HumanResources)) {\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: OTApplicationRow.Fields.OccupationName,\n                type: Select2Editor,\n                title: \"Occupation\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: OTApplicationRow.Fields.JobGradeName,\n                type: Select2Editor,\n                title: \"Job Grade\",\n               \n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: OTApplicationRow.Fields.DivisionName,\n                type: Select2Editor,\n                title: \"Division\",\n\n            });\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: OTApplicationRow.Fields.DepartmentName,\n                type: Select2Editor,\n                title: \"Department\",\n\n            });\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: OTApplicationRow.Fields.EmployeeName,\n                type: Select2Editor,\n                title: \"Name\",\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: OTApplicationRow.Fields.EmployeeID,\n                type: Select2Editor,\n                title: \"Employee ID\",\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: OTApplicationRow.Fields.CostCentreName,\n                type: Select2Editor,\n                title: \"Cost Centre\",\n            });\n            filters.reverse()\n        }\n        return filters;\n    }\n    protected createQuickFilters(): void {\n        // let base class to create quick filters first\n        super.createQuickFilters();\n\n        if (Authorization.hasPermission(PermissionKeys.HumanResources)) {\n            const months: string[] = [\n                'January',   // 0\n                'February',  // 1\n                'March',     // 2\n                'April',     // 3\n                'May',       // 4\n                'June',      // 5\n                'July',      // 6\n                'August',    // 7\n                'September', // 8\n                'October',   // 9\n                'November',  // 10\n                'December'   // 11\n            ];\n\n            OccupationService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, OTApplicationRow.Fields.OccupationName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            JobGradeService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, OTApplicationRow.Fields.JobGradeName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            DepartmentService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, OTApplicationRow.Fields.DepartmentName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            DivisionService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, OTApplicationRow.Fields.DivisionName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n\n            })\n            EmployeeProfileService.List({\n            }, response => {\n                for (var index in response.Entities) {\n                    this.findQuickFilter(Select2Editor, OTApplicationRow.Fields.EmployeeName).items.push({ id: (response.Entities[index].EmployeeName).toString(), text: (response.Entities[index].EmployeeName).toString(), })\n                    this.findQuickFilter(Select2Editor, OTApplicationRow.Fields.EmployeeID).items.push({ id: (response.Entities[index].EmployeeID).toString(), text: (response.Entities[index].EmployeeID).toString(), })\n\n                }\n            })\n            MasterCostCentreService.List({\n            }, response => {\n                for (var index in response.Entities) {\n                    this.findQuickFilter(Select2Editor, OTApplicationRow.Fields.CostCentreName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n\n                }\n            })\n\n        }\n\n    }\n\n    constructor(container: JQuery) {\n        super(container);\n \n    }\n    protected getAddButtonCaption() {\n        return \"Apply Over Time Claiming\";\n    }\n    protected getButtons() {\n        var buttons = super.getButtons();\n        var self = this\n        buttons.push({\n            title: 'OT Application Claim Batch Approve',\n            cssClass: 'fas fa-hat-wizard text-bg-success approveButton',\n            onClick: e => {\n                confirm(\n                    \"Do you want to approve all selected applications?\",\n                    () => {\n\n                        let approvePromises = self.rowSelection.getSelectedAsInt64().map(dataId => {\r\n                            return OTApplicationService.Retrieve({ EntityId: dataId })\r\n                                .then(response => {\r\n                                    let EmployeeApproval = response.Entity.EmployeeStatus;\r\n                                    let HrApproval = response.Entity.HrStatus;\r\n                                    let entityId = response.Entity.Id;\r\n                                    let EmployeeRowId = response.Entity.EmployeeRowId;\r\n                                    let updateData: OTApplicationRow = {};\r\n\r\n                                    // Wrap `serviceCall` in a Promise\r\n                                    return new Promise((resolve, reject) => {\r\n                                        serviceCall<RetrieveResponse<any>>({\r\n                                            service: OrganisationChartService.baseUrl + '/PermissionToAcknowledge',\r\n                                            data: {\r\n                                                'UserEmployeeRowID': Authorization.userDefinition.EmployeeRowID,\r\n                                                'ApplicantEmployeeRowID': EmployeeRowId\r\n                                            },\r\n                                            method: \"GET\",\r\n                                            onSuccess: (SuperiorPermission) => {\r\n                                                if (Authorization.userDefinition.Permissions[PermissionKeys.HumanResources]) { // HR\r\n                                                    if (SuperiorPermission) {\r\n                                                        if (EmployeeApproval === OTApplicationStatus.NotNeeded || HrApproval === OTApplicationStatus.NotNeeded) {\r\n                                                            if (EmployeeApproval === OTApplicationStatus.NotNeeded) {\r\n                                                                updateData = {\r\n                                                                    HrStatus: OTApplicationStatus.Approved,\r\n                                                                    HrUpdated: Authorization.userDefinition.EmployeeRowID,\r\n                                                                };\r\n                                                            } else if (HrApproval === OTApplicationStatus.NotNeeded) {\r\n                                                                updateData = {\r\n                                                                    EmployeeStatus: OTApplicationStatus.Approved,\r\n                                                                    EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\r\n                                                                };\r\n                                                            }\r\n                                                        } else {\r\n                                                            if (HrApproval === OTApplicationStatus.Approved) {\r\n                                                                updateData = {\r\n                                                                    EmployeeStatus: OTApplicationStatus.Approved,\r\n                                                                    EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\r\n                                                                };\r\n                                                            } else if (EmployeeApproval === OTApplicationStatus.Approved) {\r\n                                                                updateData = {\r\n                                                                    HrStatus: OTApplicationStatus.Approved,\r\n                                                                    HrUpdated: Authorization.userDefinition.EmployeeRowID,\r\n                                                                };\r\n                                                            } else {\r\n                                                                updateData = {\r\n                                                                    EmployeeStatus: OTApplicationStatus.Approved,\r\n                                                                    HrStatus: OTApplicationStatus.Approved,\r\n                                                                    EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\r\n                                                                    HrUpdated: Authorization.userDefinition.EmployeeRowID\r\n                                                                };\r\n                                                            }\r\n                                                        }\r\n                                                    } else {\r\n                                                        updateData = {\r\n                                                            HrStatus: OTApplicationStatus.Approved,\r\n                                                            HrUpdated: Authorization.userDefinition.EmployeeRowID\r\n                                                        };\r\n                                                    }\r\n                                                } else {\r\n                                                    updateData = {\r\n                                                        EmployeeStatus: OTApplicationStatus.Approved,\r\n                                                        EmployeeUpdated: Authorization.userDefinition.EmployeeRowID\r\n                                                    };\r\n                                                }\r\n\r\n                                                // Call `Update` and resolve the promise\r\n                                                OTApplicationService.Update({\n                                                    EntityId: entityId,\n                                                    Entity: updateData\n                                                }).then(resolve).catch(reject);\r\n                                            },\r\n                                            onError: reject\r\n                                        });\r\n                                    });\r\n                                });\r\n                        });\r\n\r\n                        // Wait for all operations to complete before refreshing\r\n                        Promise.all(approvePromises)\r\n                            .then(() => {\n                                self.internalRefresh();\r\n                            })\r\n                            .catch(error => {\r\n                                console.error('Error in update operations:', error);\r\n                            });\r\n                    }\n                )\n            },\n            separator: true\n        });\n        buttons.push({\n            title: 'OT Application Batch Reject',\n            cssClass: 'fas fa-hat-wizard text-bg-danger rejectButton',\n            onClick: e => {\n                confirm(\n                    \"Do you want to reject all selected applications?\",\n                    () => {\n\n                        // Create an array of promises for each delete operation\n                        let rejectPromises = self.rowSelection.getSelectedAsInt64().map(dataId => {\r\n\r\n                            return OTApplicationService.Retrieve({\r\n                                EntityId: dataId\r\n                            }).then(response => {\r\n                                let EmployeeApproval = response.Entity.EmployeeStatus;\r\n                                let HrApproval = response.Entity.HrStatus;\r\n                                let entityId = response.Entity.Id;\r\n                                let updateData: any = {};\n                                let EmployeeRowId = response.Entity.EmployeeRowId\r\n\n                                serviceCall<RetrieveResponse<any>>({\n                                    service: OrganisationChartService.baseUrl + '/PermissionToAcknowledge',\n                                    data: {\n                                        'UserEmployeeRowID': Authorization.userDefinition.EmployeeRowID,\n                                        'ApplicantEmployeeRowID': EmployeeRowId\n                                    },\n                                    method: \"GET\",\n                                    async: false,\n                                    onSuccess: (response) => {\n                                        console.log(response)\n                                        var SuperiorPermission = response\r\n                                        if (Authorization.userDefinition.Permissions[PermissionKeys.HumanResources]) { // is HR\n                                            if (SuperiorPermission == true) {\n                                                if (EmployeeApproval == OTApplicationStatus.NotNeeded || HrApproval == OTApplicationStatus.NotNeeded) {\n                                                    if (EmployeeApproval == OTApplicationStatus.NotNeeded) {\n                                                        updateData = {\r\n                                                            HrStatus: OTApplicationStatus.Rejected,\n                                                            HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                        };\n                                                    }\n                                                    else if (HrApproval == OTApplicationStatus.NotNeeded) {\n                                                        updateData = {\r\n                                                            EmployeeStatus: OTApplicationStatus.Rejected,\n                                                            EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                        };\n                                                    }\n                                                }\n                                                else {\n                                                    if (HrApproval == OTApplicationStatus.Pending) {\n                                                        updateData = {\n                                                            HrStatus: OTApplicationStatus.Rejected,\n                                                            HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                        };\n                                                    }\n                                                    else if (EmployeeApproval == OTApplicationStatus.Pending) {\n                                                        updateData = {\n                                                            EmployeeStatus: OTApplicationStatus.Rejected,\n                                                            EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                        };\n                                                    }\n                                                    else {\n                                                        updateData = {\n                                                            EmployeeStatus: OTApplicationStatus.Rejected,\n                                                            EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                            HrStatus: OTApplicationStatus.Rejected,\n                                                            HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                        };\n                                                    }\n                                                }\n                                            }\n                                            else {\n                                                updateData = {\r\n                                                    HrStatus: OTApplicationStatus.Rejected,\n                                                    HrUpdated: Authorization.userDefinition.EmployeeRowID\n                                                };\n                                            }\n\r\n                                        }\n                                        else {\r\n                                            updateData = {\r\n                                                EmployeeStatus: OTApplicationStatus.Rejected,\r\n                                                EmployeeUpdated: Authorization.userDefinition.EmployeeRowID\r\n                                            };\r\n                                        }\r\n\r\n                                        return OTApplicationService.Update({\r\n                                            EntityId: entityId,\r\n                                            Entity: updateData\r\n                                        });\n\n                                    }\n                                })\n\r\n                            });\r\n                        }); // Convert jQuery object to array\r\n\r\n                        // Wait for all operations to complete before refreshing\r\n                        Promise.all(rejectPromises)\r\n                            .then(() => {\r\n                                self.internalRefresh();\r\n                            })\r\n                            .catch(error => {\r\n                                console.error('Error in update operations:', error);\r\n                            });\r\n\n                    }\n                )\n            },\n            separator: true\n        });\n\n        return buttons;\n    }\n    public rowSelection: GridRowSelectionMixin;\n    protected onViewSubmit(): boolean {\r\n        this.slickGrid.onHeaderCellRendered.subscribe((e, args) => {\r\n            if (args.column.id === \"SelectAll\") {\r\n                $(args.node).empty().append(`<input type='checkbox' id='selectAll'/>`);\r\n            }\r\n        });\r\n        var self = this\n        var grid = this.slickGrid;\r\n        grid.onSelectedRowsChanged.subscribe(() => {\r\n            // get the phone...\r\n            console.log(\"haha\");\r\n            // get the fax...\r\n            // ...and so on!\r\n        });\n        /*\n        this.slickGrid.onSelectedRowsChanged.subscribe((haha) => {\n            let selectedRows = self.rowSelection.getSelectedAsInt64();\n            console.log(self.slickGrid.getSelectedRows())\n            console.log(haha)\n            // Highlight selected rows\n            self.slickGrid.getCanvasNode().querySelectorAll('.slick-row').forEach(row => {\n                row.classList.remove('selected-row');\n            });\n\n            selectedRows.forEach(row => {\n                console.log(row)\n                // let rowIndex = this.view.getItemIndex(row);\n                //  let rowNode = this.slickGrid.getCellNode(rowIndex, 0);\n                // if (rowNode) rowNode.closest('.slick-row')?.classList.add('selected-row');\n            });\n\n        });\r\n        */\r\n        // Ensure checkbox selects/deselects all rows\r\n        $(document).on('change', '#selectAll', function () {\r\n            let checked = $(this).prop('checked');\r\n            $('.row-checkbox').prop('checked', checked);\r\n        });\r\n\r\n        return super.onViewSubmit();\r\n    }\n\r\n    protected createToolbarExtensions() {\r\n        super.createToolbarExtensions();\n        var self = this\r\n        this.rowSelection = new GridRowSelectionMixin(this, {\r\n            // demo code\r\n            selectable: (item: OTApplicationRow) => {\r\n                var getResponse = 0\n                var superior\n                serviceCall<RetrieveResponse<any>>({\n                    service: OrganisationChartService.baseUrl + '/PermissionToAcknowledge',\n                    data: {\n                        'UserEmployeeRowID': Authorization.userDefinition.EmployeeRowID,\n                        'ApplicantEmployeeRowID': item.EmployeeRowId\n                    },\n                    method: \"GET\",\n                    async: false,\n                    onSuccess: (response) => {\n                        getResponse = 1\n                        superior = response\n                    }\n                })\n                while (getResponse == 0);\n                const isHr = Authorization.hasPermission(PermissionKeys.HumanResources)\n                if (item.Status == OTApplicationStatus.Pending) {\n                    if ((item.EmployeeRowId == Authorization.userDefinition.EmployeeRowID)\n                        || (isHr && item.HrStatus == OTApplicationStatus.NotNeeded))\n                        return\n\n                    else if ((isHr && item.HrStatus == OTApplicationStatus.Pending)\n                        || (superior && item.EmployeeStatus == OTApplicationStatus.Pending)) //is superior\n                    {\n                        $('.approveButton, .rejectButton').show()\n                        return true;\r\n\n                    }\n                }\r\n            }\n        });\n        $(document).on('click', '.select-item.check-box.no-float', function () {\n            // Remove highlight from previously highlighted rows\n            $('.select-item.check-box.no-float').parent().parent().removeClass('highlighted-row');\n            // Add highlight to clicked row\n            $('.select-item.check-box.no-float.checked').parent().parent().addClass('highlighted-row');\n        });\n        // Add CSS for highlighting selected rows\n        $('<style>')\n            .prop('type', 'text/css')\n            .html(`\n            .slick-row.highlighted-row {\n                background-color: #D3E5FF !important;\n            }\n        `)\n            .appendTo('head');\r\n    }\n\n    protected getColumns() {\n        var columns = super.getColumns();\n        var index\n\n        if (!Authorization.hasPermission(PermissionKeys.HumanResources)) //if he is not HR guy, hide the employeeID and approved by column\n        {\n            for (index in columns) {\n\n                if (columns[index].name == OTApplicationRow.Fields.EmployeeID || columns[index].name == OTApplicationRow.Fields.ApprovedBy) {\n                    columns.splice(index, 1);\n                }\n\n            }\n        }\n        columns.unshift(GridRowSelectionMixin.createSelectColumn(() => this.rowSelection));\r\n\n        return columns;\n\n    }\n    protected onViewProcessData(response: ListResponse<OTApplicationRow>) {\n        response = super.onViewProcessData(response);\n        $('.approveButton, .rejectButton').hide()\n\n        this.toolbar.findButton(\"column-picker-button\").toggle(false);\n        return response;\n\n    }\n\n}", "import { Decorators, EditorUtils, EntityDialog, parseDate, RetrieveResponse } from '@serenity-is/corelib';\nimport { OTApplicationForm, OTApplicationRow, OTApplicationService, OTApplicationStatus } from '../../../ServerTypes/OTApplication';\nimport timepicker from 'timepicker/jquery.timepicker'\n\nimport AirDatepicker from 'air-datepicker';\nimport 'air-datepicker/air-datepicker.css';\nimport { Authorization } from '@serenity-is/corelib/q';\nimport { EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { CompanySettingsService } from '../../../ServerTypes/CompanySettings';\nimport { alertDialog } from '@serenity-is/corelib/q';\nimport { serviceCall, ListResponse, confirm, isEmptyOrNull } from '@serenity-is/corelib/q';\nimport { userDefinition } from '../../../Administration/User/Authentication/Authorization';\nimport { PermissionKeys } from '../../../ServerTypes/Administration';\nimport { EmployeeBasicDataDialog } from '../../EmployeeBasicData/EmployeeBasicData/EmployeeBasicDataDialog';\nimport { OrganisationChartService } from '../../../ServerTypes/OrganisationChart';\nimport { AnnouncementWizardService } from '../../../ServerTypes/Announcement';\n\n@Decorators.registerClass('HRMSoftware.OTApplication.OTApplicationDialog')\nexport class OTApplicationDialog extends EntityDialog<OTApplicationRow, any> {\n    protected getFormKey() { return OTApplicationForm.formKey; }\n    protected getRowDefinition() { return OTApplicationRow; }\n    protected getService() { return OTApplicationService.baseUrl; }\n\n    protected form = new OTApplicationForm(this.idPrefix);\n    public minimum_ot_time: number;\n    public fixedOtRateOption: boolean;\n    public fixedOtRate: number;\n    public thresholdSalary: number;\n    public EmployeeApproval: number;\n    public HrApproval: number;\n    public SuperiorPermission: boolean;\n    constructor() {\n        super();\n        // Create link element for CSS\n        var linkElement = document.createElement('link');\n        linkElement.rel = 'stylesheet';\n        linkElement.href = \"https://cdn.jsdelivr.net/npm/clocklet@0.3.0/css/clocklet.min.css\";\n        var scriptElement = document.createElement('script');\n        scriptElement.src = \"https://cdn.jsdelivr.net/npm/clocklet@0.3.0\";\n        // Append link and script elements to the head of the document\n        document.head.appendChild(linkElement);\n        document.head.appendChild(scriptElement);\n        var tabId = $(\".fieldset\").children().attr('id');\n        const searchString = \"PropertyGrid\";\n        const StartingreplacementString = \"StartingAt\";\n        const EndingreplacementString = \"EndingAt\";\n        const lastIndex = tabId.lastIndexOf(searchString);\n        if (lastIndex !== -1) {\n            var starting_time_element_id = tabId.substring(0, lastIndex) + StartingreplacementString;\n            var ending_time_element_id = tabId.substring(0, lastIndex) + EndingreplacementString;\n        }\n        var StartClocklet = document.getElementById(starting_time_element_id)\n        StartClocklet.setAttribute('data-clocklet', '');\n        StartClocklet.setAttribute(\"id\", \"ot-start-clocklet\");\n        StartClocklet.addEventListener(\"clocklet.opening\", function (event) {\n            const myClocklet = document.getElementById(\"ot-start-clocklet\") as HTMLElement;\n            if (myClocklet) {\n                myClocklet.style.zIndex = Number.MAX_SAFE_INTEGER.toString();\n            }\n        });\n        StartClocklet.addEventListener(\"clocklet.closed\", function (event) {\n        });\n        var EndClocklet = document.getElementById(ending_time_element_id)\n        EndClocklet.setAttribute('data-clocklet', '');\n        EndClocklet.setAttribute(\"id\", \"ot-end-clocklet\");\n        EndClocklet.addEventListener(\"clocklet.opening\", function (event) {\n            const myClocklet = document.getElementById(\"ot-end-clocklet\") as HTMLElement;\n            if (myClocklet) {\n                myClocklet.style.zIndex = Number.MAX_SAFE_INTEGER.toString();\n            }\n        });\n        EndClocklet.addEventListener(\"clocklet.closed\", function (event) {\n        });\n    }\n    public calculateOtRate(): void {\n        var self = this\n\n        if (\n            self.form.WeekendOt.value == false\n            && self.form.WeekdayOt.value == false\n            && self.form.PublicHolidayOt.value == false\n        ) {\n            self.form.OtRate.value = 0\n            return\n        }\n        serviceCall<RetrieveResponse<any>>({\n            service: EmployeeProfileService.baseUrl + '/CalculateOtRate',\n            data: {\n                \"EmployeeRowID\": self.form.EmployeeRowId.value,\n                \"Date\": self.form.OtDate.value\n\n            },\n            method: \"GET\",\n            async: false,\n            onSuccess: (response) => {\n                console.log(response)\n                if (self.form.WeekendOt.value == true)\n                    self.form.OtRate.value = response.Entities[0].OtRateWeekend\n                else if (self.form.WeekdayOt.value == true)\n                    self.form.OtRate.value = response.Entities[0].OtRateWeekday\n                else if (self.form.PublicHolidayOt.value == true)\n                    self.form.OtRate.value = response.Entities[0].OtRatePublicHoliday\n\n            }\n        })\n\n\n\n    }\n    public dialogOpen(asPanel?: boolean): void {\n        super.dialogOpen(asPanel);\n\n        EditorUtils.setReadonly(this.form.OtRate.element, true);\n\n        EditorUtils.setReadonly(this.form.EmployeeName.element, true);\n        var self = this\n\n        var OtDate = document.getElementById(this.idPrefix + 'OtDate')\n        $(OtDate).on('change', () => {\n            self.calculateOtRate()\n        });\n\n        var WeekendOt = document.getElementById(this.idPrefix + 'WeekendOt')\n        $(WeekendOt).on('change', () => {\n            if (self.form.PublicHolidayOt.value == true)\n                self.form.PublicHolidayOt.value = false\n            if (self.form.WeekdayOt.value == true)\n                self.form.WeekdayOt.value = false\n\n            self.calculateOtRate()\n        });\n\n        var PublicHolidayOt = document.getElementById(this.idPrefix + 'PublicHolidayOt')\n        $(PublicHolidayOt).on('change', () => {\n            if (self.form.WeekendOt.value == true)\n                self.form.WeekendOt.value = false\n            if (self.form.WeekdayOt.value == true)\n                self.form.WeekdayOt.value = false\n\n            self.calculateOtRate()\n        });\n        var WeekdayOt = document.getElementById(this.idPrefix + 'WeekdayOt')\n        $(WeekdayOt).on('change', () => {\n            if (self.form.WeekendOt.value == true)\n                self.form.WeekendOt.value = false\n            if (self.form.PublicHolidayOt.value == true)\n                self.form.PublicHolidayOt.value = false\n\n            self.calculateOtRate()\n        });\n\n\n\n        serviceCall<ListResponse<any>>({\n            service: AnnouncementWizardService.baseUrl + '/GetTodayDateTime',\n            method: \"GET\",\n            data: {\n            },\n            async: false,\n            onSuccess: (response) => {\n                self.form.OtDate.value = response;\n            }\n        })\n\n        /*\n        if (this.isNew()) { \n            CompanySettingsService.List({}, response => {\n                for (var index in response.Entities)\n                {\n                    if (response.Entities[index].IsActive == 1) {\n                        if (response.Entities[index].FixedOtRateOption == true) {\n                            EditorUtils.setReadonly(this.form.OtRate.element, true);\n                            self.fixedOtRateOption = true\n                            self.fixedOtRate = response.Entities[index].FixedOtRate\n                            self.thresholdSalary = response.Entities[index].MaximumBasicSalary\n                        }\n                        else \n                        {\n                            EmployeeProfileService.List({\n                            }, response => {\n                                for (var index in response.Entities) {\n                                    if (response.Entities[index].UserRowID == Authorization.userDefinition.UserId) {\n                                        this.form.EmployeeRowId.value = response.Entities[index].Id.toString()\n                                        break\n                                    }\n                                }\n                            });\n\n                        }\n                        this.minimum_ot_time = response.Entities[index].OTMinimumMinute\n                    }\n                    }\n            })\n        \n\n    }\n         */\n    }\n\n\n    protected save_submitHandler(response): void {\n\n        var StartingElement = document.getElementById('ot-start-clocklet') as HTMLInputElement\n        var EndingElement = document.getElementById('ot-end-clocklet') as HTMLInputElement\n        var startTimeStr = StartingElement.value\n        var endTimeStr = EndingElement.value\n\n        // Split the strings into hours and minutes\n        const startTimeParts: string[] = startTimeStr.split(':');\n        const endTimeParts: string[] = endTimeStr.split(':');\n\n        // Convert the parts into numbers\n        const startHours: number = parseInt(startTimeParts[0], 10);\n        const startMinutes: number = parseInt(startTimeParts[1], 10);\n        const endHours: number = parseInt(endTimeParts[0], 10);\n        const endMinutes: number = parseInt(endTimeParts[1], 10);\n        var timediff = 60 * (endHours - startHours) + (endMinutes - startMinutes)\n        // Check if start time is greater than end time\n\n        if (this.minimum_ot_time > timediff) {\n            alertDialog('This OT cannot be applied as the duration is less than minimum time')\n            return\n        }\n        super.save_submitHandler(response)\n\n    }\n    protected onDialogOpen() {\n        super.onDialogOpen()\n        $(\".EmployeeUpdated\").hide()\n        $(\".HrUpdated\").hide()\n        if (isEmptyOrNull(this.form.EmployeeUpdatedName.value))\n            $(\".EmployeeUpdatedName\").hide()\n        else {\n            var EmployeeUpdatedNameElement = document.getElementById(this.idPrefix + 'EmployeeUpdatedName')\n            $(EmployeeUpdatedNameElement).on('click', async function () {\n                var dlg = new EmployeeBasicDataDialog(parseInt(this.form.EmployeeUpdated.value))\n                dlg.loadByIdAndOpenDialog(parseInt(this.form.EmployeeUpdated.value))\n            })\n        }\n        if (isEmptyOrNull(this.form.HrUpdatedName.value))\n            $(\".HrUpdatedName\").hide()\n        else {\n            var HrUpdatedNameNameElement = document.getElementById(this.idPrefix + 'HrUpdatedName')\n            $(HrUpdatedNameNameElement).on('click', async function () {\n                var dlg = new EmployeeBasicDataDialog(parseInt(this.form.HrUpdated.value))\n                dlg.loadByIdAndOpenDialog(parseInt(this.form.HrUpdated.value))\n            })\n        }\n\n\n        var RejectedBy = '.RejectedEmployeeName'\n        var ApprovedBy = '.ApproveEmployeeName'\n        var EmployeeRowIdElement = document.getElementById(this.idPrefix + 'EmployeeRowId')\n        var self = this\n        var OtDate = document.getElementById(this.idPrefix + 'OtDate')\n\n        if (!Authorization.userDefinition.Permissions[PermissionKeys.HumanResources] && this.isNew()) {\n            this.form.EmployeeRowId.value = Authorization.userDefinition.EmployeeRowID\n            EditorUtils.setReadonly(this.form.EmployeeRowId.element, true);\n            EmployeeProfileService.Retrieve({\n                EntityId: $(EmployeeRowIdElement).val()\n            }, response => {\n                self.form.EmployeeName.value = response.Entity.EmployeeName\n                $(self.form.EmployeeRowId.element).val(Authorization.userDefinition.EmployeeRowID.toString()).trigger('change');\n            });\n        }\n        if (this.isNew()) {\n            $(EmployeeRowIdElement).on('change', async function () {\n                self.form.EmployeeName.value = ''\n                if (isEmptyOrNull($(EmployeeRowIdElement).val())) {\n                    $(self.form.OtRate.element).val('')\n                    return\n                }\n                EmployeeProfileService.Retrieve({\n                    EntityId: $(EmployeeRowIdElement).val()\n                }, response => {\n                    self.form.EmployeeName.value = response.Entity.EmployeeName\n\n                    if (self.fixedOtRateOption == true && response.Entity.BasicSalary < self.thresholdSalary)\n                        self.form.OtRate.value = self.fixedOtRate\n                    else\n                        $(self.form.OtRate.element).val('')\n                    if (isEmptyOrNull($(this).val()) || isEmptyOrNull($(OtDate).val()))\n                        return;\n                    var EmployeeRowId = response.Entity.Id\n                    var parts = $(OtDate).val().split(/[\\/?]/);\n                    // Rearrange the parts to the desired format \"YYYY//MM/DD\"\n                    var yyyy = parts[2];\n                    var mm = parts[0];\n                    var dd = parts[1];\n                    // Construct the new date string in the desired format\n                    /*\n                    if (self.fixedOtRateOption == true && response.Entity.BasicSalary > self.thresholdSalary) \n                        self.form.OtRate.value = self.fixedOtRate\n                    else {\n                        serviceCall<RetrieveResponse<any>>({\n                            service: OTApplicationService.baseUrl + '/CalculateOtRate',\n                            data: {\n                                'EmployeeRowID': EmployeeRowId,\n                                'Date': convertedDate\n                            },\n                            method: \"GET\",\n                            async: false,\n                            onSuccess: (response) => {\n                                \n                                self.form.OtRate.value = response\n                            },\n                            onError: (error) => {\n                                console.log(error.Error);\n                            }\n                        });\n                    }\n                    */\n                });\n            });\n\n            var ApproveButtons = document.querySelectorAll('.text-bg-success')\n            ApproveButtons.forEach(function (element) {\n                $(element).hide()\n            });\n            $(ApprovedBy).hide()\n            var RejectButtons = document.querySelectorAll('.text-bg-danger')\n            RejectButtons.forEach(function (element) {\n                $(element).hide()\n            });\n            $(RejectedBy).hide()\n            $(ApprovedBy).hide()\n\n\n\n            /*\n            $(OtDate).on('change', async function() {\n              \n                var parts = $(this).val().split(/[\\/?]/);\n\n                // Rearrange the parts to the desired format \"YYYY//MM/DD\"\n                var yyyy = parts[2];\n                var mm = parts[0];\n                var dd = parts[1];\n\n                var convertedDate = yyyy + \"/\" + mm + \"/\" + dd;\n\n                EmployeeProfileService.Retrieve({\n                    EntityId: $(EmployeeRowIdElement).val()\n                }, response => {\n                    self.form.EmployeeName.value = response.Entity.EmployeeName\n\n                    if (self.fixedOtRateOption == true && response.Entity.BasicSalary > self.thresholdSalary) {\n                        self.form.OtRate.value = self.fixedOtRate\n                    }\n                    else\n                        $(self.form.OtRate.element).val('')\n                    if (isEmptyOrNull($(this).val()) || isEmptyOrNull($(OtDate).val()))\n                        return;\n                    var EmployeeRowId = response.Entity.Id\n                    var parts = $(OtDate).val().split(/[\\/?]/);\n                    // Rearrange the parts to the desired format \"YYYY//MM/DD\"\n                    var yyyy = parts[2];\n                    var mm = parts[0];\n                    var dd = parts[1];\n                    // Construct the new date string in the desired format\n                    var convertedDate = yyyy + \"/\" + mm + \"/\" + dd;\n                    console.log(self.thresholdSalary)\n                    if (self.fixedOtRateOption == true && response.Entity.BasicSalary > self.thresholdSalary) {\n                        self.form.OtRate.value = self.fixedOtRate\n                    }\n                    else {\n                        console.log(convertedDate)\n                        console.log(EmployeeRowId)\n\n                        serviceCall<RetrieveResponse<any>>({\n                            service: OTApplicationService.baseUrl + '/CalculateOtRate',\n                            data: {\n                                'EmployeeRowID': EmployeeRowId,\n                                'Date': convertedDate\n                            },\n                            method: \"GET\",\n                            async: false,\n                            onSuccess: (response) => {\n                                self.form.OtRate.value = response\n                            },\n                            onError: (error) => {\n                                console.log(error.Error);\n                            }\n                        });\n                    }\n                });\n                \n            });\n            */\n\n        }\n        else if (!this.isNew()) {\n            if (!Authorization.userDefinition.Permissions[PermissionKeys.HumanResources]\n                && self.form.EmployeeRowId.value != Authorization.userDefinition.EmployeeRowID)//if no hr privilege\n                this.readOnly = true\n            if (self.form.EmployeeRowId.value == Authorization.userDefinition.EmployeeRowID) {\n                EditorUtils.setReadonly(this.form.EmployeeRowId.element, true);\n                EditorUtils.setReadonly(this.form.EmployeeName.element, true);\n                return\n            }\n            OTApplicationService.Retrieve({\n                EntityId: this.entityId\n            }, response => {\n                var applicant = response.Entity.EmployeeRowId\n                var HrStatus = self.HrApproval = response.Entity.HrStatus\n                var EmployeeStatus = self.EmployeeApproval = response.Entity.EmployeeStatus\n                var applicationStatus = response.Entity.Status\n                if (applicationStatus == OTApplicationStatus.Pending) {\n                    serviceCall<RetrieveResponse<any>>({\n                        service: OrganisationChartService.baseUrl + '/PermissionToAcknowledge',\n                        data: {\n                            'UserEmployeeRowID': Authorization.userDefinition.EmployeeRowID,\n                            'ApplicantEmployeeRowID': applicant\n                        },\n                        method: \"GET\",\n                        async: false,\n                        onSuccess: (response) => {\n                            var PermissionToAck = self.SuperiorPermission = response\n                            if (self.form.EmployeeRowId.value != Authorization.userDefinition.EmployeeRowID)\n                                this.set_readOnly(true)\n                            $('.delete-button').removeClass('disabled');\n                            if (HrStatus == 0 || EmployeeStatus == 0)//if one of the condition still pending\n                            {\n                                if (PermissionToAck == true && !EmployeeStatus)\n                                    $('.tool-button').removeClass('hidden');\n                                if (Authorization.userDefinition.Permissions[PermissionKeys.HumanResources] && !HrStatus)\n                                    $('.tool-button').removeClass('hidden');\n                            }\n                            else if ((HrStatus == OTApplicationStatus.Rejected || EmployeeStatus == OTApplicationStatus.Rejected)\n                                || (HrStatus == OTApplicationStatus.Approved && EmployeeStatus == OTApplicationStatus.Approved)) {\n                                $(RejectedBy).hide()\n                                $(ApprovedBy).hide()\n                                if (self.form.EmployeeRowId.value == Authorization.userDefinition.EmployeeRowID) {\n                                    var ApproveButtons = document.querySelectorAll('.text-bg-success')\n                                    ApproveButtons.forEach(function (element) {\n                                        $(element).hide()\n                                    });\n                                    var RejectButtons = document.querySelectorAll('.text-bg-danger')\n                                    RejectButtons.forEach(function (element) {\n                                        $(element).hide()\n                                    });\n                                }\n                            }\n                        },\n                        onError: (error) => {\n                            console.log(error.Error);\n                        }\n                    });\n                }\n                else {\n                    this.set_readOnly(true)\n                    $('.delete-button').removeClass('disabled');\n                }\n            });\n        }\n    }\n\n \n    protected getToolbarButtons() {\n        var self = this\n        var buttons = super.getToolbarButtons();\n        var Linkx = document.createElement('style')\n        Linkx.textContent =\n            `\n            .hidden {\n      display: none;\n    }\n            `\n        document.head.appendChild(Linkx)\n\n\n        buttons.push(\n            {\n                title: \"Approve Application\",\t// *** Get button text from translation\n                cssClass: 'text-bg-success p-2 hidden approveApplication',\n                icon: 'fa-check text-green',\n                onClick: () => {\n                    confirm(\"Do you want to approve this application?\", () => {\n                        let updateData: OTApplicationRow = {};\n\n                        if (Authorization.userDefinition.Permissions[PermissionKeys.HumanResources]) { // HR\n                            if (self.SuperiorPermission) {\n                                if (self.EmployeeApproval === OTApplicationStatus.NotNeeded || self.HrApproval === OTApplicationStatus.NotNeeded) {\n                                    if (self.EmployeeApproval === OTApplicationStatus.NotNeeded) {\n                                        updateData = {\n                                            HrStatus: OTApplicationStatus.Approved,\n                                            HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                        };\n                                    } else if (self.HrApproval === OTApplicationStatus.NotNeeded) {\n                                        updateData = {\n                                            EmployeeStatus: OTApplicationStatus.Approved,\n                                            EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                        };\n                                    }\n                                } else {\n                                    if (self.HrApproval === OTApplicationStatus.Approved) {\n                                        updateData = {\n                                            EmployeeStatus: OTApplicationStatus.Approved,\n                                            EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                        };\n                                    } else if (self.EmployeeApproval === OTApplicationStatus.Approved) {\n                                        updateData = {\n                                            HrStatus: OTApplicationStatus.Approved,\n                                            HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                        };\n                                    } else {\n                                        updateData = {\n                                            EmployeeStatus: OTApplicationStatus.Approved,\n                                            HrStatus: OTApplicationStatus.Approved,\n                                            EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                            HrUpdated: Authorization.userDefinition.EmployeeRowID\n                                        };\n                                    }\n                                }\n                            } else {\n                                updateData = {\n                                    HrStatus: OTApplicationStatus.Approved,\n                                    HrUpdated: Authorization.userDefinition.EmployeeRowID\n                                };\n                            }\n                        }\n                        else {\n                            updateData = {\n                                EmployeeStatus: OTApplicationStatus.Approved,\n                                EmployeeUpdated: Authorization.userDefinition.EmployeeRowID\n                            };\n                        }\n                        OTApplicationService.Update({\n                            EntityId: self.entityId,\n                            Entity: updateData\n                        }, response => {\n                            self.loadById(response.EntityId)\n                            $('.rejectApplication, .approveApplication').hide()\n                        })\n                    });\n\n                },\n            }\n        );\n                \n        buttons.push(\n            {\n                title: \"Rejected Application\",\t// *** Get button text from translation\n                cssClass: 'text-bg-danger p-2 hidden rejectApplication',\n                icon: 'fa-times text-red',\n                onClick: () => {\n                    confirm(\"Do you want to reject this application?\", () => {\n                        let updateData: OTApplicationRow = {};\n                        if (Authorization.userDefinition.Permissions[PermissionKeys.HumanResources]) { // is HR\n                            if (self.SuperiorPermission == true) {\n                                if (self.EmployeeApproval == OTApplicationStatus.NotNeeded || self.HrApproval == OTApplicationStatus.NotNeeded) {\n                                    if (self.EmployeeApproval == OTApplicationStatus.NotNeeded) {\n                                        updateData = {\n                                            HrStatus: OTApplicationStatus.Rejected,\n                                            HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                        };\n                                    }\n                                    else if (self.HrApproval == OTApplicationStatus.NotNeeded) {\n                                        updateData = {\n                                            EmployeeStatus: OTApplicationStatus.Rejected,\n                                            EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                        };\n                                    }\n                                }\n                                else {\n                                    if (self.HrApproval == OTApplicationStatus.Pending) {\n                                        updateData = {\n                                            HrStatus: OTApplicationStatus.Rejected,\n                                            HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                        };\n                                    }\n                                    else if (self.EmployeeApproval == OTApplicationStatus.Pending) {\n                                        updateData = {\n                                            EmployeeStatus: OTApplicationStatus.Rejected,\n                                            EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                        };\n                                    }\n                                    else {\n                                        updateData = {\n                                            EmployeeStatus: OTApplicationStatus.Rejected,\n                                            EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                            HrStatus: OTApplicationStatus.Rejected,\n                                            HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                        };\n                                    }\n                                }\n                            }\n                            else {\n                                updateData = {\n                                    HrStatus: OTApplicationStatus.Rejected,\n                                    HrUpdated: Authorization.userDefinition.EmployeeRowID\n                                };\n                            }\n\n                        }\n                        else {\n                            updateData = {\n                                EmployeeStatus: OTApplicationStatus.Rejected,\n                                EmployeeUpdated: Authorization.userDefinition.EmployeeRowID\n                            };\n                        }\n                        OTApplicationService.Update({\n                            EntityId: self.entityId,\n                            Entity: updateData\n                        }, response => {\n                            self.loadById(response.EntityId)\n                            $('.rejectApplication, .approveApplication').hide()\n                        })\n\n                    });\n                },\n            }\n        );\n            \n        return buttons;\n    }\n    \n}"],
  "mappings": "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",
  "names": ["import_q", "import_corelib", "import_corelib", "import_q", "import_q", "OTApplicationDialog", "OTApplicationForm", "linkElement", "scriptElement", "tabId", "searchString", "StartingreplacementString", "EndingreplacementString", "lastIndex", "starting_time_element_id", "ending_time_element_id", "StartClocklet", "event", "myClocklet", "EndClocklet", "OTApplicationRow", "OTApplicationService", "self", "EmployeeProfileService", "response", "asPanel", "OtDate", "WeekendOt", "PublicHolidayOt", "WeekdayOt", "AnnouncementWizardService", "StartingElement", "EndingElement", "startTimeStr", "endTimeStr", "startTimeParts", "endTimeParts", "startHours", "startMinutes", "endHours", "endMinutes", "timediff", "EmployeeUpdatedNameElement", "__async", "dlg", "EmployeeBasicDataDialog", "HrUpdatedNameNameElement", "RejectedBy", "ApprovedBy", "EmployeeRowIdElement", "PermissionKeys", "EmployeeRowId", "parts", "yyyy", "mm", "dd", "ApproveButtons", "element", "RejectButtons", "applicant", "HrStatus", "EmployeeStatus", "applicationStatus", "OrganisationChartService", "PermissionToAck", "error", "buttons", "Linkx", "updateData", "__name", "__decorateClass", "import_q", "OTApplicationGrid", "container", "OTApplicationColumns", "OTApplicationDialog", "OTApplicationRow", "OTApplicationService", "itemType", "callback", "dialog", "self", "filters", "PermissionKeys", "months", "OccupationService", "response", "index", "JobGradeService", "DepartmentService", "DivisionService", "EmployeeProfileService", "MasterCostCentreService", "buttons", "e", "approvePromises", "dataId", "EmployeeApproval", "HrApproval", "entityId", "EmployeeRowId", "updateData", "resolve", "reject", "OrganisationChartService", "SuperiorPermission", "error", "rejectPromises", "args", "grid", "checked", "item", "getResponse", "superior", "isHr", "columns", "__name", "__decorateClass", "pageInit", "OTApplicationGrid", "__name"]
}
