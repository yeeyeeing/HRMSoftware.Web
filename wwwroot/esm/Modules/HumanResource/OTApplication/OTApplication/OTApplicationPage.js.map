{
  "version": 3,
  "sources": ["../../../../../../Modules/HumanResource/OTApplication/OTApplication/OTApplicationPage.ts", "../../../../../../Modules/HumanResource/OTApplication/OTApplication/OTApplicationGrid.ts", "../../../../../../Modules/HumanResource/OTApplication/OTApplication/OTApplicationDialog.ts", "../../../../../../Modules/HumanResource/OTApplication/OTApplication/OTApplicationRejectDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\nimport { OTApplicationGrid } from './OTApplicationGrid';\n\nexport default function pageInit() {\n    initFullHeightGridPage(new OTApplicationGrid($('#GridDiv')).element);\n}", "import { Criteria, Decorators, EntityGrid, IntegerEditor, ListResponse, LookupEditor, QuickFilter, Select2Editor, StringEditor, Widget, RetrieveResponse, GridRowSelectionMixin } from '@serenity-is/corelib';\nimport { PermissionKeys } from '../../../ServerTypes/Administration';\nimport { OTApplicationColumns, OTApplicationRow, OTApplicationService, OTApplicationStatus } from '../../../ServerTypes/OTApplication';\nimport { OTApplicationDialog } from './OTApplicationDialog';\nimport { OccupationService } from '../../../ServerTypes/OrganisationHierarchy';\nimport { JobGradeService } from '../../../ServerTypes/OrganisationHierarchy';\nimport { DepartmentService } from '../../../ServerTypes/OrganisationHierarchy/DepartmentService';\nimport { DivisionService } from '../../../ServerTypes/OrganisationHierarchy/DivisionService';\nimport { EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { MasterCostCentreService } from '../../../ServerTypes/Master';\nimport { serviceCall, Authorization, isEmptyOrNull, getLookup, confirm, alertDialog, notifyInfo } from '@serenity-is/corelib/q';\nimport { OrganisationChartService } from '../../../ServerTypes/OrganisationChart';\r\nimport { OTApplicationRejectDialog } from './OTApplicationRejectDialog';\r\n\n@Decorators.registerClass('HRMSoftware.OTApplication.OTApplicationGrid')\nexport class OTApplicationGrid extends EntityGrid<OTApplicationRow, any> {\n    protected getColumnsKey() { return OTApplicationColumns.columnsKey; }\n    protected getDialogType() { return OTApplicationDialog; }\n    protected getRowDefinition() { return OTApplicationRow; }\n    protected getService() { return OTApplicationService.baseUrl; }\n\r\n    protected createEntityDialog(itemType: string, callback: (dlg: OTApplicationDialog) => void): OTApplicationDialog {\r\n        let dialog = super.createEntityDialog(itemType, callback) as OTApplicationDialog;\r\n        var self = this\r\n        // Attach 'dialogclose' event listener to refresh the grid when the dialog closes\r\n        dialog.element.on('dialogclose', () => {\r\n            self.internalRefresh();  // Refresh grid after closing the dialog\n            console.log('hahaa')\r\n        });\r\n\r\n        return dialog;  // Ensure correct return type\r\n    }\r\n\r\n    \n    protected getQuickFilters(): QuickFilter<Widget<any>, any>[] {\n        //Gets the Filters defined in the Columns or in parent grids.\n        let filters = super.getQuickFilters();\n\n        // console.log(filters[3].type = Select2Editor)\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: OTApplicationRow.Fields.OccupationName,\n                type: Select2Editor,\n                title: \"Occupation\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: OTApplicationRow.Fields.JobGradeName,\n                type: Select2Editor,\n                title: \"Job Grade\",\n               \n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: OTApplicationRow.Fields.DivisionName,\n                type: Select2Editor,\n                title: \"Division\",\n\n            });\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: OTApplicationRow.Fields.DepartmentName,\n                type: Select2Editor,\n                title: \"Department\",\n\n            });\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: OTApplicationRow.Fields.EmployeeName,\n                type: Select2Editor,\n                title: \"Name\",\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: OTApplicationRow.Fields.EmployeeID,\n                type: Select2Editor,\n                title: \"Employee ID\",\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: OTApplicationRow.Fields.CostCentreName,\n                type: Select2Editor,\n                title: \"Cost Centre\",\n            });\n            filters.reverse()\n        \n        return filters;\n    }\n    protected createQuickFilters(): void {\n        // let base class to create quick filters first\n        super.createQuickFilters();\n\n            const months: string[] = [\n                'January',   // 0\n                'February',  // 1\n                'March',     // 2\n                'April',     // 3\n                'May',       // 4\n                'June',      // 5\n                'July',      // 6\n                'August',    // 7\n                'September', // 8\n                'October',   // 9\n                'November',  // 10\n                'December'   // 11\n            ];\n\n            OccupationService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, OTApplicationRow.Fields.OccupationName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            JobGradeService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, OTApplicationRow.Fields.JobGradeName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            DepartmentService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, OTApplicationRow.Fields.DepartmentName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            DivisionService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, OTApplicationRow.Fields.DivisionName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n\n            })\n            EmployeeProfileService.List({\n            }, response => {\n                for (var index in response.Entities) {\n                    this.findQuickFilter(Select2Editor, OTApplicationRow.Fields.EmployeeName).items.push({ id: (response.Entities[index].EmployeeName).toString(), text: (response.Entities[index].EmployeeName).toString(), })\n                    this.findQuickFilter(Select2Editor, OTApplicationRow.Fields.EmployeeID).items.push({ id: (response.Entities[index].EmployeeID).toString(), text: (response.Entities[index].EmployeeID).toString(), })\n\n                }\n            })\n            MasterCostCentreService.List({\n            }, response => {\n                for (var index in response.Entities) {\n                    this.findQuickFilter(Select2Editor, OTApplicationRow.Fields.CostCentreName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n\n                }\n            })\n\n        \n\n    }\n\n    constructor(container: JQuery) {\n        super(container);\n \n    }\n    protected getAddButtonCaption() {\n        return \"Apply Over Time Claiming\";\n    }\n    protected getButtons() {\n        var buttons = super.getButtons();\n        var self = this\n\n        buttons.push({\r\n            title: 'OT Application Claim Batch Approve',\r\n            cssClass: 'fas fa-hat-wizard text-bg-success approveButton hidden',\r\n            onClick: e => {\n                if (self.rowSelection.getSelectedAsInt64().length == 0) {\n                    alertDialog('Please select at least one application to approve')\n                    return\n                }\n\r\n                confirm(\r\n                    \"Do you want to approve all selected applications?\",\r\n                    async () => {\r\n                        let selectedIds = self.rowSelection.getSelectedAsInt64();\r\n\r\n                        for (const dataId of selectedIds) {\r\n                            try {\r\n                                let response = await OTApplicationService.Retrieve({ EntityId: dataId });\r\n                                let EmployeeApproval = response.Entity.EmployeeStatus;\r\n                                let HrApproval = response.Entity.HrStatus;\r\n                                let entityId = response.Entity.Id;\r\n                                let EmployeeRowId = response.Entity.EmployeeRowId;\r\n                                let updateData: OTApplicationRow = {};\r\n                                /*\r\n                                let SuperiorPermission = await new Promise((resolve, reject) => {\r\n                                    serviceCall<RetrieveResponse<any>>({\r\n                                        service: OrganisationChartService.baseUrl + '/PermissionToAcknowledge',\r\n                                        data: {\r\n                                            'UserEmployeeRowID': Authorization.userDefinition.EmployeeRowID,\r\n                                            'ApplicantEmployeeRowID': EmployeeRowId\r\n                                        },\r\n                                        method: \"GET\",\r\n                                        onSuccess: resolve,\r\n                                        onError: reject\r\n                                    });\r\n                                });\r\n                                */\n                                let SuperiorPermission = self.SuperiorOfEmployeeRowIdList.includes(EmployeeRowId)\n                                \r\n                                if (Authorization.userDefinition.Permissions[PermissionKeys.HumanResources]) { // HR\r\n                                    if (SuperiorPermission == true) {\r\n                                        if (EmployeeApproval === OTApplicationStatus.NotNeeded || HrApproval === OTApplicationStatus.NotNeeded) {\r\n                                            if (EmployeeApproval === OTApplicationStatus.NotNeeded) {\r\n                                                updateData = {\r\n                                                    HrStatus: OTApplicationStatus.Approved,\r\n                                                    HrUpdated: Authorization.userDefinition.EmployeeRowID,\r\n                                                };\r\n                                            } else if (HrApproval === OTApplicationStatus.NotNeeded) {\r\n                                                updateData = {\r\n                                                    EmployeeStatus: OTApplicationStatus.Approved,\r\n                                                    EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\r\n                                                };\r\n                                            }\r\n                                        } else {\r\n                                            if (HrApproval === OTApplicationStatus.Approved) {\r\n                                                updateData = {\r\n                                                    EmployeeStatus: OTApplicationStatus.Approved,\r\n                                                    EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\r\n                                                };\r\n                                            } else if (EmployeeApproval === OTApplicationStatus.Approved) {\r\n                                                updateData = {\r\n                                                    HrStatus: OTApplicationStatus.Approved,\r\n                                                    HrUpdated: Authorization.userDefinition.EmployeeRowID,\r\n                                                };\r\n                                            } else {\r\n                                                updateData = {\r\n                                                    EmployeeStatus: OTApplicationStatus.Approved,\r\n                                                    HrStatus: OTApplicationStatus.Approved,\r\n                                                    EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\r\n                                                    HrUpdated: Authorization.userDefinition.EmployeeRowID\r\n                                                };\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        updateData = {\r\n                                            HrStatus: OTApplicationStatus.Approved,\r\n                                            HrUpdated: Authorization.userDefinition.EmployeeRowID\r\n                                        };\r\n                                    }\r\n                                }\n                                else {\r\n                                    updateData = {\r\n                                        EmployeeStatus: OTApplicationStatus.Approved,\r\n                                        EmployeeUpdated: Authorization.userDefinition.EmployeeRowID\r\n                                    };\r\n                                }\r\n\r\n                                await OTApplicationService.Update({ EntityId: entityId, Entity: updateData });\r\n\r\n                            } catch (error) {\r\n                                console.error(`Error updating application ${dataId}:`, error);\r\n                            }\r\n\r\n                        }\r\n\r\n                        Q.notifyInfo(`${selectedIds.length} records have been approved.`)\r\n                        self.internalRefresh(); // Refresh after all updates complete\r\n                    }\r\n                );\r\n            },\r\n            separator: true\r\n        });\n        buttons.push({\r\n            title: 'OT Application Batch Reject',\r\n            cssClass: 'fas fa-hat-wizard text-bg-danger rejectButton hidden',\r\n            onClick: e => {\n                if (self.rowSelection.getSelectedAsInt64().length == 0) {\n                    alertDialog('Please select at least one application to reject')\n                    return\n                }\r\n                confirm(\r\n                    \"Do you want to reject all selected applications?\",\r\n                    async () => {\r\n\n                        var rejectDlg = new OTApplicationRejectDialog()\n                        rejectDlg.dialogOpen()\n                        rejectDlg.element.on('dialogclose', async () => {\n                            let selectedIds = self.rowSelection.getSelectedAsInt64();\r\n                            var rejectReason = window[\"rejectReason\"]\n\r\n                            for (const dataId of selectedIds) {\r\n                                try {\r\n                                    let response = await OTApplicationService.Retrieve({ EntityId: dataId });\r\n                                    let EmployeeApproval = response.Entity.EmployeeStatus;\r\n                                    let HrApproval = response.Entity.HrStatus;\r\n                                    let entityId = response.Entity.Id;\r\n                                    let EmployeeRowId = response.Entity.EmployeeRowId;\r\n                                    let updateData: OTApplicationRow = {};\r\n\r\n                                    let SuperiorPermission = await new Promise((resolve, reject) => {\r\n                                        serviceCall<RetrieveResponse<any>>({\r\n                                            service: OrganisationChartService.baseUrl + '/PermissionToAcknowledge',\r\n                                            data: {\r\n                                                'UserEmployeeRowID': Authorization.userDefinition.EmployeeRowID,\r\n                                                'ApplicantEmployeeRowID': EmployeeRowId\r\n                                            },\r\n                                            method: \"GET\",\r\n                                            onSuccess: resolve,\r\n                                            onError: reject\r\n                                        });\r\n                                    });\r\n\r\n                                    if (Authorization.userDefinition.Permissions[PermissionKeys.HumanResources]) { // is HR\n                                        if (SuperiorPermission == true) {\n                                            if (EmployeeApproval == OTApplicationStatus.NotNeeded || HrApproval == OTApplicationStatus.NotNeeded) {\n                                                if (EmployeeApproval == OTApplicationStatus.NotNeeded) {\n                                                    updateData = {\r\n                                                        HrStatus: OTApplicationStatus.Rejected,\n                                                        HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                        HrRejectReason: rejectReason\n                                                    };\n                                                }\n                                                else if (HrApproval == OTApplicationStatus.NotNeeded) {\n                                                    updateData = {\r\n                                                        EmployeeStatus: OTApplicationStatus.Rejected,\n                                                        EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                        SuperiorRejectReason: rejectReason\n                                                    };\n                                                }\n                                            }\n                                            else {\n                                                if (HrApproval == OTApplicationStatus.Pending) {\n                                                    updateData = {\n                                                        HrStatus: OTApplicationStatus.Rejected,\n                                                        HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                        HrRejectReason: rejectReason\n\n                                                    };\n                                                }\n                                                else if (EmployeeApproval == OTApplicationStatus.Pending) {\n                                                    updateData = {\n                                                        EmployeeStatus: OTApplicationStatus.Rejected,\n                                                        EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                        SuperiorRejectReason: rejectReason\n\n                                                    };\n                                                }\n                                                else {\n                                                    updateData = {\n                                                        EmployeeStatus: OTApplicationStatus.Rejected,\n                                                        EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                        HrStatus: OTApplicationStatus.Rejected,\n                                                        HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                        SuperiorRejectReason: rejectReason,\n                                                        HrRejectReason: rejectReason\n\n                                                    };\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            updateData = {\r\n                                                HrStatus: OTApplicationStatus.Rejected,\n                                                HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                HrRejectReason: rejectReason\n                                            };\n                                        }\n\r\n                                    }\n                                    else {\r\n                                        updateData = {\r\n                                            EmployeeStatus: OTApplicationStatus.Rejected,\r\n                                            EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                            SuperiorRejectReason: rejectReason\r\n                                        };\r\n                                    }\r\n\r\n                                    await OTApplicationService.Update({ EntityId: entityId, Entity: updateData });\r\n                                }\r\n                                catch (error) {\r\n                                    console.error(`Error updating application ${dataId}:`, error);\r\n                                }\r\n                            }\r\n                            notifyInfo(`${selectedIds.length} records have been rejected.`)\r\n                            self.internalRefresh(); // Refresh after all updates complete\r\n                        })\n\n                    })\n            }\n        })\n        /*\n        buttons.push({\n            title: 'OT Application Claim Batch Approve',\n            cssClass: 'fas fa-hat-wizard text-bg-success approveButton',\n            onClick: e => {\n                if (self.rowSelection.getSelectedAsInt64().length == 0) {\n                    alertDialog('Please select at least one application to approve')\n                    return\n                }\n                confirm(\n                    \"Do you want to approve all selected applications?\",\n                    () => {\n                        let selectedIds = self.rowSelection.getSelectedAsInt64();\n                        let approvePromises = self.rowSelection.getSelectedAsInt64().map(dataId => {\r\n                            return OTApplicationService.Retrieve({ EntityId: dataId })\r\n                                .then(response => {\r\n                                    let EmployeeApproval = response.Entity.EmployeeStatus;\r\n                                    let HrApproval = response.Entity.HrStatus;\r\n                                    let entityId = response.Entity.Id;\r\n                                    let EmployeeRowId = response.Entity.EmployeeRowId;\r\n                                    let updateData: OTApplicationRow = {};\r\n\r\n                                    // Wrap `serviceCall` in a Promise\r\n                                    return new Promise((resolve, reject) => {\r\n                                        serviceCall<RetrieveResponse<any>>({\r\n                                            service: OrganisationChartService.baseUrl + '/PermissionToAcknowledge',\r\n                                            data: {\r\n                                                'UserEmployeeRowID': Authorization.userDefinition.EmployeeRowID,\r\n                                                'ApplicantEmployeeRowID': EmployeeRowId\r\n                                            },\r\n                                            method: \"GET\",\r\n                                            onSuccess: (SuperiorPermission) => {\r\n                                                if (Authorization.userDefinition.Permissions[PermissionKeys.HumanResources]) { // HR\r\n                                                    if (SuperiorPermission == true) {\r\n                                                        if (EmployeeApproval === OTApplicationStatus.NotNeeded || HrApproval === OTApplicationStatus.NotNeeded) {\r\n                                                            if (EmployeeApproval === OTApplicationStatus.NotNeeded) {\r\n                                                                updateData = {\r\n                                                                    HrStatus: OTApplicationStatus.Approved,\r\n                                                                    HrUpdated: Authorization.userDefinition.EmployeeRowID,\r\n                                                                };\r\n                                                            } else if (HrApproval === OTApplicationStatus.NotNeeded) {\r\n                                                                updateData = {\r\n                                                                    EmployeeStatus: OTApplicationStatus.Approved,\r\n                                                                    EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\r\n                                                                };\r\n                                                            }\r\n                                                        } else {\r\n                                                            if (HrApproval === OTApplicationStatus.Approved) {\r\n                                                                updateData = {\r\n                                                                    EmployeeStatus: OTApplicationStatus.Approved,\r\n                                                                    EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\r\n                                                                };\r\n                                                            } else if (EmployeeApproval === OTApplicationStatus.Approved) {\r\n                                                                updateData = {\r\n                                                                    HrStatus: OTApplicationStatus.Approved,\r\n                                                                    HrUpdated: Authorization.userDefinition.EmployeeRowID,\r\n                                                                };\r\n                                                            } else {\r\n                                                                updateData = {\r\n                                                                    EmployeeStatus: OTApplicationStatus.Approved,\r\n                                                                    HrStatus: OTApplicationStatus.Approved,\r\n                                                                    EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\r\n                                                                    HrUpdated: Authorization.userDefinition.EmployeeRowID\r\n                                                                };\r\n                                                            }\r\n                                                        }\r\n                                                    } else {\r\n                                                        updateData = {\r\n                                                            HrStatus: OTApplicationStatus.Approved,\r\n                                                            HrUpdated: Authorization.userDefinition.EmployeeRowID\r\n                                                        };\r\n                                                    }\r\n                                                }\n                                                else {\r\n                                                    updateData = {\r\n                                                        EmployeeStatus: OTApplicationStatus.Approved,\r\n                                                        EmployeeUpdated: Authorization.userDefinition.EmployeeRowID\r\n                                                    };\r\n                                                }\r\n\r\n                                                // Call `Update` and resolve the promise\r\n                                                OTApplicationService.Update({\n                                                    EntityId: entityId,\n                                                    Entity: updateData\n                                                }).then(resolve).catch(reject);\r\n                                            },\r\n                                            onError: reject\r\n                                        });\r\n                                    });\r\n                                });\r\n                        });\r\n\r\n                        // Wait for all operations to complete before refreshing\r\n                        Promise.all(approvePromises)\r\n                            .then(() => {\n                                notifyInfo(`${selectedIds.length} records have been approved.`)\r\n\n                                self.internalRefresh();\r\n                            })\r\n                            .catch(error => {\r\n                                console.error('Error in update operations:', error);\r\n                            });\r\n                    }\n                )\n            },\n            separator: true\n        });\n\n        buttons.push({\n            title: 'OT Application Batch Reject',\n            cssClass: 'fas fa-hat-wizard text-bg-danger rejectButton',\n            onClick: e => {\n                if (self.rowSelection.getSelectedAsInt64().length == 0) {\n                    alertDialog('Please select at least one application to reject')\n                    return\n                }\n                confirm(\n                    \"Do you want to reject all selected applications?\",\n                    () => {\n                        var rejectDlg = new OTApplicationRejectDialog()\n                        rejectDlg.dialogOpen()\n                        rejectDlg.element.on('dialogclose', () => {\n                            let selectedIds = self.rowSelection.getSelectedAsInt64();\n                            var rejectReason = window[\"rejectReason\"]\n                            // Create an array of promises for each delete operation\n                            let rejectPromises = self.rowSelection.getSelectedAsInt64().map(dataId => {\r\n\r\n                                return OTApplicationService.Retrieve({\r\n                                    EntityId: dataId\r\n                                }).then(response => {\r\n                                    let EmployeeApproval = response.Entity.EmployeeStatus;\r\n                                    let HrApproval = response.Entity.HrStatus;\r\n                                    let entityId = response.Entity.Id;\r\n                                    let updateData: OTApplicationRow = {};\n                                    let EmployeeRowId = response.Entity.EmployeeRowId\r\n                                    return new Promise((resolve, reject) => {\n                                        serviceCall<RetrieveResponse<any>>({\n                                            service: OrganisationChartService.baseUrl + '/PermissionToAcknowledge',\n                                            data: {\n                                                'UserEmployeeRowID': Authorization.userDefinition.EmployeeRowID,\n                                                'ApplicantEmployeeRowID': EmployeeRowId\n                                            },\n                                            method: \"GET\",\n                                            async: false,\n                                            onSuccess: (response) => {\n                                                console.log(response)\n                                                var SuperiorPermission = response\r\n                                                if (Authorization.userDefinition.Permissions[PermissionKeys.HumanResources]) { // is HR\n                                                    if (SuperiorPermission == true) {\n                                                        if (EmployeeApproval == OTApplicationStatus.NotNeeded || HrApproval == OTApplicationStatus.NotNeeded) {\n                                                            if (EmployeeApproval == OTApplicationStatus.NotNeeded) {\n                                                                updateData = {\r\n                                                                    HrStatus: OTApplicationStatus.Rejected,\n                                                                    HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                                    HrRejectReason: rejectReason\n                                                                };\n                                                            }\n                                                            else if (HrApproval == OTApplicationStatus.NotNeeded) {\n                                                                updateData = {\r\n                                                                    EmployeeStatus: OTApplicationStatus.Rejected,\n                                                                    EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                                    SuperiorRejectReason: rejectReason\n                                                                };\n                                                            }\n                                                        }\n                                                        else {\n                                                            if (HrApproval == OTApplicationStatus.Pending) {\n                                                                updateData = {\n                                                                    HrStatus: OTApplicationStatus.Rejected,\n                                                                    HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                                    HrRejectReason: rejectReason\n\n                                                                };\n                                                            }\n                                                            else if (EmployeeApproval == OTApplicationStatus.Pending) {\n                                                                updateData = {\n                                                                    EmployeeStatus: OTApplicationStatus.Rejected,\n                                                                    EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                                    SuperiorRejectReason: rejectReason\n\n                                                                };\n                                                            }\n                                                            else {\n                                                                updateData = {\n                                                                    EmployeeStatus: OTApplicationStatus.Rejected,\n                                                                    EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                                    HrStatus: OTApplicationStatus.Rejected,\n                                                                    HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                                    SuperiorRejectReason: rejectReason,\n                                                                    HrRejectReason: rejectReason\n\n                                                                };\n                                                            }\n                                                        }\n                                                    }\n                                                    else {\n                                                        updateData = {\r\n                                                            HrStatus: OTApplicationStatus.Rejected,\n                                                            HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                            HrRejectReason: rejectReason\n                                                        };\n                                                    }\n\r\n                                                }\n                                                else {\r\n                                                    updateData = {\r\n                                                        EmployeeStatus: OTApplicationStatus.Rejected,\r\n                                                        EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                        SuperiorRejectReason: rejectReason\r\n                                                    };\r\n                                                }\r\n\r\n                                                OTApplicationService.Update({\n                                                    EntityId: entityId,\n                                                    Entity: updateData\n                                                }).then(resolve).catch(reject);\n\n                                            }\n                                        })\n                                    });\r\n                                });\r\n                            }); // Convert jQuery object to array\r\n\r\n                            // Wait for all operations to complete before refreshing\r\n                            Promise.all(rejectPromises)\r\n                                .then(() => {\n                                    notifyInfo(`${selectedIds.length} records have been rejected.`)\r\n                                    self.internalRefresh();\r\n                                })\r\n                                .catch(error => {\r\n                                    console.error('Error in update operations:', error);\r\n                                });\n                        })\n\n\r\n\n                    }\n                )\n            },\n            separator: true\n        });\n        */\n        return buttons;\n    }\n    public rowSelection: GridRowSelectionMixin;\n    protected onViewSubmit(): boolean {\r\n        this.slickGrid.onHeaderCellRendered.subscribe((e, args) => {\r\n            if (args.column.id === \"SelectAll\") {\r\n                $(args.node).empty().append(`<input type='checkbox' id='selectAll'/>`);\r\n            }\r\n        });\r\n     \n        /*\n        this.slickGrid.onSelectedRowsChanged.subscribe((haha) => {\n            let selectedRows = self.rowSelection.getSelectedAsInt64();\n            console.log(self.slickGrid.getSelectedRows())\n            console.log(haha)\n            // Highlight selected rows\n            self.slickGrid.getCanvasNode().querySelectorAll('.slick-row').forEach(row => {\n                row.classList.remove('selected-row');\n            });\n\n            selectedRows.forEach(row => {\n                console.log(row)\n                // let rowIndex = this.view.getItemIndex(row);\n                //  let rowNode = this.slickGrid.getCellNode(rowIndex, 0);\n                // if (rowNode) rowNode.closest('.slick-row')?.classList.add('selected-row');\n            });\n\n        });\r\n        */\r\n        // Ensure checkbox selects/deselects all rows\r\n        $(document).on('change', '#selectAll', function () {\r\n            let checked = $(this).prop('checked');\r\n            $('.row-checkbox').prop('checked', checked);\r\n        });\r\n\r\n        return super.onViewSubmit();\r\n    }\n    public SuperiorOfEmployeeRowIdList: number[] = [];\r\n    protected createToolbarExtensions() {\r\n        super.createToolbarExtensions();\n        var self = this\r\n        /*\n        this.rowSelection = new GridRowSelectionMixin(this, {\r\n            // demo code\r\n            selectable: (item: OTApplicationRow) => {\n                if (item.EmployeeRowId == Authorization.userDefinition.EmployeeRowID\n                    || (item.Status != OTApplicationStatus.Pending))\n                    return\r\n                var getResponse = 0\n                var superior=1\n               \n                const isHr = Authorization.hasPermission(PermissionKeys.HumanResources)\n                if (item.Status == OTApplicationStatus.Pending) {\n                    if ((item.EmployeeStatus == OTApplicationStatus.NotNeeded)\n                        || (isHr && item.HrStatus == OTApplicationStatus.NotNeeded))\n                        return\n\n                    else if ((isHr && item.HrStatus == OTApplicationStatus.Pending)\n                        || (item.EmployeeStatus == OTApplicationStatus.Pending)) //is superior\n                    {\n                        $('.approveButton, .rejectButton').removeClass(\"hidden\")\r\n\n//                        $('.approveButton, .rejectButton').show()\n                        return true;\r\n\n                    }\n                }\r\n            }\n        });\n        */\n        let employeeRowNumber = new Promise<number[]>((resolve, reject) => {\r\n            serviceCall<RetrieveResponse<number[]>>({\n                service: OrganisationChartService.baseUrl + '/GetEmployeeUserCanView',\n                data: {\n                    'EmployeeRowID': Authorization.userDefinition.EmployeeRowID,\n                    'PermissionKey': PermissionKeys.MoneyClaiming\n                },\n                method: \"GET\",\n                onError: (error) => reject(error), // Handle failure properly\r\n                onSuccess: (response) => resolve(response || []),  // Ensure data is resolved\r\n            })\n        });\n        employeeRowNumber\r\n            .then(response => {\n                self.SuperiorOfEmployeeRowIdList = response\n\r\n                console.log(\"Received data:\", response);\n                self.rowSelection = new GridRowSelectionMixin(self, {\r\n                    // demo code\r\n                    selectable: (item: OTApplicationRow) => {\n                        var superior = response.includes(item.EmployeeRowId)\n                        if (item.EmployeeRowId == Authorization.userDefinition.EmployeeRowID\n                            || (item.Status != OTApplicationStatus.Pending))\n                            return\r\n                     \n                        const isHr = Authorization.hasPermission(PermissionKeys.HumanResources)\n                        if (item.Status == OTApplicationStatus.Pending) {\n                            if ((item.EmployeeStatus == OTApplicationStatus.NotNeeded)\n                                || (isHr && item.HrStatus == OTApplicationStatus.NotNeeded))\n                                return\n\n                            else if ((isHr && item.HrStatus == OTApplicationStatus.Pending)\n                                || (superior &&  item.EmployeeStatus == OTApplicationStatus.Pending)) //is superior\n                            {\n                                $('.approveButton, .rejectButton').removeClass(\"hidden\")\n                                //                        $('.approveButton, .rejectButton').show()\n                                return true;\r\n\n                            }\n                        }\r\n                    }\n                });\n\n\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error fetching data:\", error);\r\n            });\n\n\n        $(document).on('click', '.select-item.check-box.no-float', function () {\n            // Remove highlight from previously highlighted rows\n            $('.select-item.check-box.no-float').parent().parent().removeClass('highlighted-row');\n            // Add highlight to clicked row\n            $('.select-item.check-box.no-float.checked').parent().parent().addClass('highlighted-row');\n        });\n        // Add CSS for highlighting selected rows\n        $('<style>')\n            .prop('type', 'text/css')\n            .html(`\n            .slick-row.highlighted-row {\n                background-color: #D3E5FF !important;\n            }\n        `)\n            .appendTo('head');\r\n    }\n\n    protected getColumns() {\n        var columns = super.getColumns();\n        var index\n\n        if (!Authorization.hasPermission(PermissionKeys.HumanResources)) //if he is not HR guy, hide the employeeID and approved by column\n        {\n            for (index in columns) {\n\n                if (columns[index].name == OTApplicationRow.Fields.EmployeeID || columns[index].name == OTApplicationRow.Fields.ApprovedBy) {\n                    columns.splice(index, 1);\n                }\n\n            }\n        }\n        columns.unshift(GridRowSelectionMixin.createSelectColumn(() => this.rowSelection));\r\n\n        return columns;\n\n    }\n    protected onViewProcessData(response: ListResponse<OTApplicationRow>) {\n        response = super.onViewProcessData(response);\r\n        let userDefinition = Authorization.userDefinition\r\n        let userId = userDefinition.EmployeeRowID\r\n        const allSame = response.Entities.every(entity => entity.EmployeeRowId === userId);\r\n        if (allSame) {\r\n            const isHr = Authorization.hasPermission(PermissionKeys.HumanResources)\r\n            if (isHr) {\r\n                $('.approveButton, .rejectButton').removeClass(\"hidden\")\r\n            }\r\n            else {\r\n                $('.approveButton, .rejectButton').addClass(\"hidden\")\r\n            }\r\n        }\r\n        else {\r\n            $('.approveButton, .rejectButton').removeClass(\"hidden\")\r\n        }\r\n        this.toolbar.findButton(\"column-picker-button\").toggle(false);\r\n        return response;\r\n\n    }\n\n}", "import { Decorators, EditorUtils, EntityDialog, parseDate, RetrieveResponse } from '@serenity-is/corelib';\nimport { OTApplicationForm, OTApplicationRow, OTApplicationService, OTApplicationStatus } from '../../../ServerTypes/OTApplication';\nimport timepicker from 'timepicker/jquery.timepicker'\n\nimport AirDatepicker from 'air-datepicker';\nimport 'air-datepicker/air-datepicker.css';\nimport { Authorization } from '@serenity-is/corelib/q';\nimport { EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { CompanySettingsService } from '../../../ServerTypes/CompanySettings';\nimport { alertDialog } from '@serenity-is/corelib/q';\nimport { serviceCall, ListResponse, confirm, isEmptyOrNull } from '@serenity-is/corelib/q';\nimport { userDefinition } from '../../../Administration/User/Authentication/Authorization';\nimport { PermissionKeys } from '../../../ServerTypes/Administration';\nimport { EmployeeBasicDataDialog } from '../../EmployeeBasicData/EmployeeBasicData/EmployeeBasicDataDialog';\nimport { OrganisationChartService } from '../../../ServerTypes/OrganisationChart';\nimport { AnnouncementWizardService } from '../../../ServerTypes/Announcement';\nimport { OTApplicationRejectDialog } from './OTApplicationRejectDialog';\r\nimport { PublicHolidayService } from '../../../ServerTypes/PublicHoliday';\r\n\n@Decorators.registerClass('HRMSoftware.OTApplication.OTApplicationDialog')\nexport class OTApplicationDialog extends EntityDialog<OTApplicationRow, any> {\n    protected getFormKey() { return OTApplicationForm.formKey; }\n    protected getRowDefinition() { return OTApplicationRow; }\n    protected getService() { return OTApplicationService.baseUrl; }\n\n    protected form = new OTApplicationForm(this.idPrefix);\n    public minimum_ot_time: number;\n    public fixedOtRateOption: boolean;\n    public fixedOtRate: number;\n    public thresholdSalary: number;\n    public EmployeeApproval: number;\n    public HrApproval: number;\n    public SuperiorPermission: boolean;\n    public ListOfPublicHolidayDate: string[]=[];\n    public SundayWeekday: boolean;\n    public MondayWeekday: boolean;\n    public TuesdayWeekday: boolean;\n    public WednesdayWeekday: boolean;\n    public ThursdayWeekday: boolean;\n    public FridayWeekday: boolean;\n    public SaturdayWeekday: boolean;\n\n    constructor() {\n        super();\n        var self = this\n        CompanySettingsService.List({}, response => {\n            var CountryCode\n            for (var res in response.Entities) {\n                if (response.Entities[res].IsActive == 1) {\n                    CountryCode = response.Entities[res].BasedCountry\n                    this.SundayWeekday = response.Entities[res].SundayWeekday\n                    this.MondayWeekday = response.Entities[res].MondayWeekday\n                    this.TuesdayWeekday = response.Entities[res].TuesdayWeekday\n                    this.WednesdayWeekday = response.Entities[res].WednesdayWeekday\n                    this.ThursdayWeekday = response.Entities[res].ThursdayWeekday\n                    this.FridayWeekday = response.Entities[res].FridayWeekday\n                    this.SaturdayWeekday = response.Entities[res].SaturdayWeekday\n                }\n            }\n            PublicHolidayService.List({}, response => {\n                for (var res in response.Entities) {\n                    if (response.Entities[res].IsActive == 1 && response.Entities[res].CountryCode.replace(/\\s+/g, \"\") == CountryCode) \n                        self.ListOfPublicHolidayDate.push(response.Entities[res].Date.substring(0,10))\n                    \n                }\n\n            })\n\n        })\n\n        // Create link element for CSS\n        var linkElement = document.createElement('link');\n        linkElement.rel = 'stylesheet';\n        linkElement.href = \"https://cdn.jsdelivr.net/npm/clocklet@0.3.0/css/clocklet.min.css\";\n        var scriptElement = document.createElement('script');\n        scriptElement.src = \"https://cdn.jsdelivr.net/npm/clocklet@0.3.0\";\n        // Append link and script elements to the head of the document\n        document.head.appendChild(linkElement);\n        document.head.appendChild(scriptElement);\n        var tabId = $(\".fieldset\").children().attr('id');\n        const searchString = \"PropertyGrid\";\n        const StartingreplacementString = \"StartingAt\";\n        const EndingreplacementString = \"EndingAt\";\n        const lastIndex = tabId.lastIndexOf(searchString);\n        if (lastIndex !== -1) {\n            var starting_time_element_id = tabId.substring(0, lastIndex) + StartingreplacementString;\n            var ending_time_element_id = tabId.substring(0, lastIndex) + EndingreplacementString;\n        }\n        var StartClocklet = document.getElementById(starting_time_element_id)\n        StartClocklet.setAttribute('data-clocklet', '');\n        StartClocklet.setAttribute(\"id\", \"ot-start-clocklet\");\n        StartClocklet.addEventListener(\"clocklet.opening\", function (event) {\n            const myClocklet = document.getElementById(\"ot-start-clocklet\") as HTMLElement;\n            if (myClocklet) {\n                myClocklet.style.zIndex = Number.MAX_SAFE_INTEGER.toString();\n            }\n        });\n        StartClocklet.addEventListener(\"clocklet.closed\", function (event) {\n        });\n        var EndClocklet = document.getElementById(ending_time_element_id)\n        EndClocklet.setAttribute('data-clocklet', '');\n        EndClocklet.setAttribute(\"id\", \"ot-end-clocklet\");\n        EndClocklet.addEventListener(\"clocklet.opening\", function (event) {\n            const myClocklet = document.getElementById(\"ot-end-clocklet\") as HTMLElement;\n            if (myClocklet) {\n                myClocklet.style.zIndex = Number.MAX_SAFE_INTEGER.toString();\n            }\n        });\n        EndClocklet.addEventListener(\"clocklet.closed\", function (event) {\n        });\n    }\n    public calculateOtRate(check:boolean): void {\n        function getDayOfWeek(dateString: string): number {\r\n            const date = new Date(dateString);\r\n            return date.getDay();\r\n        }\n        function isDateInArray(dateArray: string[], targetDate: string): boolean {\r\n            // Normalize the target date (remove dashes for easy comparison)\r\n            const normalizedTarget = targetDate.replace(/-/g, \"\");\r\n\r\n            // Normalize and check each date in the array\r\n            return dateArray.some(date => {\r\n                const normalizedDate = date.replace(/-/g, \"\").padEnd(8, \"0\");\r\n                return normalizedDate === normalizedTarget;\r\n            });\r\n        }\n        var self = this\n        if (isEmptyOrNull(self.form.EmployeeRowId.value) || isEmptyOrNull(self.form.OtDate.value)) {\n            self.form.OtRate.value = null\n            return\n        }\n        if (check == true) {\n            self.form.PublicHolidayOt.value = self.form.WeekendOt.value = self.form.WeekdayOt.value = false\n\n            var isPublicHoliday = isDateInArray(self.ListOfPublicHolidayDate, self.form.OtDate.value)\n            if (isPublicHoliday == true) {\n                self.form.PublicHolidayOt.value = true\n            }\n            else {\n                var day = getDayOfWeek(self.form.OtDate.value)\n                if ((day == 0 && self.SundayWeekday == false) ||\r\n                    (day == 1 && self.MondayWeekday == false) ||\r\n                    (day == 2 && self.TuesdayWeekday == false) ||\r\n                    (day == 3 && self.WednesdayWeekday == false) ||\r\n                    (day == 4 && self.ThursdayWeekday == false) ||\r\n                    (day == 5 && self.FridayWeekday == false) ||\r\n                    (day == 6 && self.SaturdayWeekday == false)) {\r\n\r\n                    self.form.WeekendOt.value = true;\r\n                } else {\r\n                    self.form.WeekdayOt.value = true; // Reset if the day is allowed\r\n                }\n            }\n\n        }\n        serviceCall<RetrieveResponse<any>>({\n            service: EmployeeProfileService.baseUrl + '/CalculateOtRate',\n            data: {\n                \"EmployeeRowID\": self.form.EmployeeRowId.value,\n                \"Date\": self.form.OtDate.value\n\n            },\n            method: \"GET\",\n            async: false,\n            onSuccess: (response) => {\n                console.log(response)\n                if (self.form.WeekendOt.value == true)\n                    self.form.OtRate.value = response.Entities[0].OtRateWeekend\n                else if (self.form.WeekdayOt.value == true)\n                    self.form.OtRate.value = response.Entities[0].OtRateWeekday\n                else if (self.form.PublicHolidayOt.value == true)\n                    self.form.OtRate.value = response.Entities[0].OtRatePublicHoliday\n                if (!isEmptyOrNull(self.form.OtHourBuffer.value)) {\n                    var subTotal = self.form.OtRate.value * self.form.OtHourBuffer.value\n                    self.form.TotalOtPayBuffer.value = subTotal\n                }\n            }\n        })\n\n\n\n    }\n    public dialogOpen(asPanel?: boolean): void {\n        super.dialogOpen(asPanel);\n       \n        EditorUtils.setReadonly(this.form.OtRate.element, true);\n\n        EditorUtils.setReadonly(this.form.EmployeeName.element, true);\n        var self = this\n\n        var OtDate = document.getElementById(this.idPrefix + 'OtDate')\n        $(OtDate).on('change', () => {\n\n\n            self.calculateOtRate(true)\n        });\n\n        var WeekendOt = document.getElementById(this.idPrefix + 'WeekendOt')\n        $(WeekendOt).on('change', () => {\n            if (self.form.PublicHolidayOt.value == true)\n                self.form.PublicHolidayOt.value = false\n            if (self.form.WeekdayOt.value == true)\n                self.form.WeekdayOt.value = false\n\n            self.calculateOtRate(false)\n        });\n\n        var PublicHolidayOt = document.getElementById(this.idPrefix + 'PublicHolidayOt')\n        $(PublicHolidayOt).on('change', () => {\n            if (self.form.WeekendOt.value == true)\n                self.form.WeekendOt.value = false\n            if (self.form.WeekdayOt.value == true)\n                self.form.WeekdayOt.value = false\n\n            self.calculateOtRate(false)\n        });\n        var WeekdayOt = document.getElementById(this.idPrefix + 'WeekdayOt')\n        $(WeekdayOt).on('change', () => {\n            if (self.form.WeekendOt.value == true)\n                self.form.WeekendOt.value = false\n            if (self.form.PublicHolidayOt.value == true)\n                self.form.PublicHolidayOt.value = false\n\n            self.calculateOtRate(false)\n        });\n        function getHoursBetween(start: string, end: string): number {\r\n            const startTime = new Date();\r\n            const endTime = new Date();\r\n\r\n            // Parse the HH:mm format and set the time in Date object\r\n            const [startHour, startMinute] = start.split(\":\").map(Number);\r\n            const [endHour, endMinute] = end.split(\":\").map(Number);\r\n\r\n            startTime.setHours(startHour, startMinute, 0, 0);\r\n            endTime.setHours(endHour, endMinute, 0, 0);\r\n\r\n            // If end time is earlier than start time, it means the shift crossed midnight\r\n            if (endTime < startTime) {\r\n                // Add 24 hours to the end time to correctly calculate night shift hours\r\n                endTime.setDate(endTime.getDate() + 1);\r\n            }\r\n\r\n            // Calculate the difference in milliseconds and convert to hours\r\n            return (endTime.getTime() - startTime.getTime()) / (1000 * 60 * 60);\r\n        }\n        var StartingElement = document.getElementById('ot-start-clocklet') as HTMLInputElement\n        var EndingElement = document.getElementById('ot-end-clocklet') as HTMLInputElement\n       \n        $(StartingElement).on('change', () => {\n            console.log('hahaha')\n            var startTimeStr = StartingElement.value\n            var endTimeStr = EndingElement.value\n            var hours = getHoursBetween(startTimeStr, endTimeStr)\n            self.form.OtHourBuffer.value = hours\n            if (!isEmptyOrNull(self.form.OtRate.value)) {\n                var subTotal = self.form.OtRate.value * self.form.OtHourBuffer.value\n                self.form.OtPayBuffer.value = subTotal\n            }\n        });\n        $(EndingElement).on('change', () => {\n            var startTimeStr = StartingElement.value\n            var endTimeStr = EndingElement.value\n            var hours = getHoursBetween(startTimeStr, endTimeStr)\n            self.form.OtHourBuffer.value = hours\n            if (!isEmptyOrNull(self.form.OtRate.value)) {\n                var subTotal = self.form.OtRate.value * self.form.OtHourBuffer.value\n                self.form.OtPayBuffer.value = subTotal\n            }\n\n        });\n\n\n        /*\n        serviceCall<ListResponse<any>>({\n            service: AnnouncementWizardService.baseUrl + '/GetTodayDateTime',\n            method: \"GET\",\n            data: {\n            },\n            async: false,\n            onSuccess: (response) => {\n                self.form.OtDate.value = response;\n            }\n        })\n\n        \n        if (this.isNew()) { \n            CompanySettingsService.List({}, response => {\n                for (var index in response.Entities)\n                {\n                    if (response.Entities[index].IsActive == 1) {\n                        if (response.Entities[index].FixedOtRateOption == true) {\n                            EditorUtils.setReadonly(this.form.OtRate.element, true);\n                            self.fixedOtRateOption = true\n                            self.fixedOtRate = response.Entities[index].FixedOtRate\n                            self.thresholdSalary = response.Entities[index].MaximumBasicSalary\n                        }\n                        else \n                        {\n                            EmployeeProfileService.List({\n                            }, response => {\n                                for (var index in response.Entities) {\n                                    if (response.Entities[index].UserRowID == Authorization.userDefinition.UserId) {\n                                        this.form.EmployeeRowId.value = response.Entities[index].Id.toString()\n                                        break\n                                    }\n                                }\n                            });\n\n                        }\n                        this.minimum_ot_time = response.Entities[index].OTMinimumMinute\n                    }\n                    }\n            })\n        \n\n    }\n         */\n    }\n\n\n    protected save_submitHandler(response): void {\n        var self = this\n        var StartingElement = document.getElementById('ot-start-clocklet') as HTMLInputElement\n        var EndingElement = document.getElementById('ot-end-clocklet') as HTMLInputElement\n        var startTimeStr = StartingElement.value\n        var endTimeStr = EndingElement.value\n\n        // Split the strings into hours and minutes\n        const startTimeParts: string[] = startTimeStr.split(':');\n        const endTimeParts: string[] = endTimeStr.split(':');\n\n        // Convert the parts into numbers\n        const startHours: number = parseInt(startTimeParts[0], 10);\n        const startMinutes: number = parseInt(startTimeParts[1], 10);\n        const endHours: number = parseInt(endTimeParts[0], 10);\n        const endMinutes: number = parseInt(endTimeParts[1], 10);\n        var timediff = 60 * (endHours - startHours) + (endMinutes - startMinutes)\n        // Check if start time is greater than end time\n\n        if (this.minimum_ot_time > timediff) {\n            alertDialog('This OT cannot be applied as the duration is less than minimum time')\n            return\n        }\n        if (self.form.PublicHolidayOt.value == false && self.form.WeekdayOt.value == false && self.form.WeekendOt.value == false)\n            alertDialog('Please choose the type of ot to determine the rate')\n\n\n        super.save_submitHandler(response)\n\n    }\n    protected onDialogOpen() {\n        super.onDialogOpen()\n        $(\".EmployeeUpdated\").hide()\n        $(\".HrUpdated\").hide()\n        var self = this\n\n        if (isEmptyOrNull(this.form.EmployeeUpdatedName.value))\n            $(\".EmployeeUpdatedName\").hide()\n        else {\n            var EmployeeUpdatedNameElement = document.getElementById(this.idPrefix + 'EmployeeUpdatedName')\n            $(EmployeeUpdatedNameElement).on('click', async function () {\n                var dlg = new EmployeeBasicDataDialog(parseInt(this.form.EmployeeUpdated.value))\n                dlg.loadByIdAndOpenDialog(parseInt(this.form.EmployeeUpdated.value))\n            })\n            if (!isEmptyOrNull(self.form.SuperiorRejectReason.value))\n                $(\".SuperiorRejectReason\").show()\n\n        }\n        if (isEmptyOrNull(this.form.HrUpdatedName.value))\n            $(\".HrUpdatedName\").hide()\n        else {\n\n            var HrUpdatedNameNameElement = document.getElementById(this.idPrefix + 'HrUpdatedName')\n            $(HrUpdatedNameNameElement).on('click', async function () {\n                var dlg = new EmployeeBasicDataDialog(parseInt(this.form.HrUpdated.value))\n                dlg.loadByIdAndOpenDialog(parseInt(this.form.HrUpdated.value))\n            })\n            if (!isEmptyOrNull(self.form.HrRejectReason.value))\n                $(\".HrRejectReason\").show()\n        }\n\n\n        var RejectedBy = '.RejectedEmployeeName'\n        var ApprovedBy = '.ApproveEmployeeName'\n        var EmployeeRowIdElement = document.getElementById(this.idPrefix + 'EmployeeRowId')\n        var OtDate = document.getElementById(this.idPrefix + 'OtDate')\n\n        if (!Authorization.userDefinition.Permissions[PermissionKeys.HumanResources] && this.isNew()) {\n            this.form.EmployeeRowId.value = Authorization.userDefinition.EmployeeRowID\n            EditorUtils.setReadonly(this.form.EmployeeRowId.element, true);\n            EmployeeProfileService.Retrieve({\n                EntityId: $(EmployeeRowIdElement).val()\n            }, response => {\n                self.form.EmployeeName.value = response.Entity.EmployeeName\n                $(self.form.EmployeeRowId.element).val(Authorization.userDefinition.EmployeeRowID.toString()).trigger('change');\n            });\n        }\n        if (this.isNew()) {\n            $(EmployeeRowIdElement).on('change', async function () {\n                if (isEmptyOrNull($(EmployeeRowIdElement).val())) {\n                    self.form.EmployeeName.value = ''\n                    $(self.form.OtRate.element).val('')\n                    return\n                }\n                self.calculateOtRate()\n\n                EmployeeProfileService.Retrieve({\n                    EntityId: $(EmployeeRowIdElement).val()\n                }, response => {\n                    self.form.EmployeeName.value = response.Entity.EmployeeName\n                    /*\n                    if (self.fixedOtRateOption == true && response.Entity.BasicSalary < self.thresholdSalary)\n                        self.form.OtRate.value = self.fixedOtRate\n                    else\n                        $(self.form.OtRate.element).val('')\n                    if (isEmptyOrNull($(this).val()) || isEmptyOrNull($(OtDate).val()))\n                        return;\n                    var EmployeeRowId = response.Entity.Id\n                    var parts = $(OtDate).val().split(/[\\/?]/);\n                    // Rearrange the parts to the desired format \"YYYY//MM/DD\"\n                    var yyyy = parts[2];\n                    var mm = parts[0];\n                    var dd = parts[1];\n                    */\n                    // Construct the new date string in the desired format\n                    /*\n                    if (self.fixedOtRateOption == true && response.Entity.BasicSalary > self.thresholdSalary) \n                        self.form.OtRate.value = self.fixedOtRate\n                    else {\n                        serviceCall<RetrieveResponse<any>>({\n                            service: OTApplicationService.baseUrl + '/CalculateOtRate',\n                            data: {\n                                'EmployeeRowID': EmployeeRowId,\n                                'Date': convertedDate\n                            },\n                            method: \"GET\",\n                            async: false,\n                            onSuccess: (response) => {\n                                \n                                self.form.OtRate.value = response\n                            },\n                            onError: (error) => {\n                                console.log(error.Error);\n                            }\n                        });\n                    }\n                    */\n                });\n            });\n\n            var ApproveButtons = document.querySelectorAll('.text-bg-success')\n            ApproveButtons.forEach(function (element) {\n                $(element).hide()\n            });\n            $(ApprovedBy).hide()\n            var RejectButtons = document.querySelectorAll('.text-bg-danger')\n            RejectButtons.forEach(function (element) {\n                $(element).hide()\n            });\n            $(RejectedBy).hide()\n            $(ApprovedBy).hide()\n\n\n\n            /*\n            $(OtDate).on('change', async function() {\n              \n                var parts = $(this).val().split(/[\\/?]/);\n\n                // Rearrange the parts to the desired format \"YYYY//MM/DD\"\n                var yyyy = parts[2];\n                var mm = parts[0];\n                var dd = parts[1];\n\n                var convertedDate = yyyy + \"/\" + mm + \"/\" + dd;\n\n                EmployeeProfileService.Retrieve({\n                    EntityId: $(EmployeeRowIdElement).val()\n                }, response => {\n                    self.form.EmployeeName.value = response.Entity.EmployeeName\n\n                    if (self.fixedOtRateOption == true && response.Entity.BasicSalary > self.thresholdSalary) {\n                        self.form.OtRate.value = self.fixedOtRate\n                    }\n                    else\n                        $(self.form.OtRate.element).val('')\n                    if (isEmptyOrNull($(this).val()) || isEmptyOrNull($(OtDate).val()))\n                        return;\n                    var EmployeeRowId = response.Entity.Id\n                    var parts = $(OtDate).val().split(/[\\/?]/);\n                    // Rearrange the parts to the desired format \"YYYY//MM/DD\"\n                    var yyyy = parts[2];\n                    var mm = parts[0];\n                    var dd = parts[1];\n                    // Construct the new date string in the desired format\n                    var convertedDate = yyyy + \"/\" + mm + \"/\" + dd;\n                    console.log(self.thresholdSalary)\n                    if (self.fixedOtRateOption == true && response.Entity.BasicSalary > self.thresholdSalary) {\n                        self.form.OtRate.value = self.fixedOtRate\n                    }\n                    else {\n                        console.log(convertedDate)\n                        console.log(EmployeeRowId)\n\n                        serviceCall<RetrieveResponse<any>>({\n                            service: OTApplicationService.baseUrl + '/CalculateOtRate',\n                            data: {\n                                'EmployeeRowID': EmployeeRowId,\n                                'Date': convertedDate\n                            },\n                            method: \"GET\",\n                            async: false,\n                            onSuccess: (response) => {\n                                self.form.OtRate.value = response\n                            },\n                            onError: (error) => {\n                                console.log(error.Error);\n                            }\n                        });\n                    }\n                });\n                \n            });\n            */\n\n        }\n        else if (!this.isNew()) {\n            if (!Authorization.userDefinition.Permissions[PermissionKeys.HumanResources]\n                && self.form.EmployeeRowId.value != Authorization.userDefinition.EmployeeRowID)//if no hr privilege\n                this.readOnly = true\n            if (self.form.EmployeeRowId.value == Authorization.userDefinition.EmployeeRowID) {\n                EditorUtils.setReadonly(this.form.EmployeeRowId.element, true);\n                EditorUtils.setReadonly(this.form.EmployeeName.element, true);\n                return\n            }\n            OTApplicationService.Retrieve({\n                EntityId: this.entityId\n            }, response => {\n                var applicant = response.Entity.EmployeeRowId\n                var HrStatus = self.HrApproval = response.Entity.HrStatus\n                var EmployeeStatus = self.EmployeeApproval = response.Entity.EmployeeStatus\n                var applicationStatus = response.Entity.Status\n                if (applicationStatus == OTApplicationStatus.Pending) {\n                    serviceCall<RetrieveResponse<any>>({\n                        service: OrganisationChartService.baseUrl + '/PermissionToAcknowledge',\n                        data: {\n                            'UserEmployeeRowID': Authorization.userDefinition.EmployeeRowID,\n                            'ApplicantEmployeeRowID': applicant\n                        },\n                        method: \"GET\",\n                        async: false,\n                        onSuccess: (response) => {\n                            var PermissionToAck = self.SuperiorPermission = response\n                            if (self.form.EmployeeRowId.value != Authorization.userDefinition.EmployeeRowID)\n                                this.set_readOnly(true)\n                            $('.delete-button').removeClass('disabled');\n                            if (HrStatus == 0 || EmployeeStatus == 0)//if one of the condition still pending\n                            {\n                                if (PermissionToAck == true && !EmployeeStatus)\n                                    $('.tool-button').removeClass('hidden');\n                                if (Authorization.userDefinition.Permissions[PermissionKeys.HumanResources] && !HrStatus)\n                                    $('.tool-button').removeClass('hidden');\n                            }\n                            else if ((HrStatus == OTApplicationStatus.Rejected || EmployeeStatus == OTApplicationStatus.Rejected)\n                                || (HrStatus == OTApplicationStatus.Approved && EmployeeStatus == OTApplicationStatus.Approved)) {\n                                $(RejectedBy).hide()\n                                $(ApprovedBy).hide()\n                                if (self.form.EmployeeRowId.value == Authorization.userDefinition.EmployeeRowID) {\n                                    var ApproveButtons = document.querySelectorAll('.text-bg-success')\n                                    ApproveButtons.forEach(function (element) {\n                                        $(element).hide()\n                                    });\n                                    var RejectButtons = document.querySelectorAll('.text-bg-danger')\n                                    RejectButtons.forEach(function (element) {\n                                        $(element).hide()\n                                    });\n                                }\n                            }\n                        },\n                        onError: (error) => {\n                            console.log(error.Error);\n                        }\n                    });\n                }\n                else {\n                    this.set_readOnly(true)\n                    $('.delete-button').removeClass('disabled');\n                }\n            });\n        }\n    }\n\n \n    protected getToolbarButtons() {\n        var self = this\n        var buttons = super.getToolbarButtons();\n        var Linkx = document.createElement('style')\n        Linkx.textContent =\n            `\n            .hidden {\n      display: none;\n    }\n            `\n        document.head.appendChild(Linkx)\n\n\n        buttons.push(\n            {\n                title: \"Approve Application\",\t// *** Get button text from translation\n                cssClass: 'text-bg-success p-2 hidden approveApplication',\n                icon: 'fa-check text-green',\n                onClick: () => {\n                    confirm(\"Do you want to approve this application?\", () => {\n                        let updateData: OTApplicationRow = {};\n\n                        if (Authorization.userDefinition.Permissions[PermissionKeys.HumanResources]) { // HR\n                            if (self.SuperiorPermission) {\n                                if (self.EmployeeApproval === OTApplicationStatus.NotNeeded || self.HrApproval === OTApplicationStatus.NotNeeded) {\n                                    if (self.EmployeeApproval === OTApplicationStatus.NotNeeded) {\n                                        updateData = {\n                                            HrStatus: OTApplicationStatus.Approved,\n                                            HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                        };\n                                    } else if (self.HrApproval === OTApplicationStatus.NotNeeded) {\n                                        updateData = {\n                                            EmployeeStatus: OTApplicationStatus.Approved,\n                                            EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                        };\n                                    }\n                                } else {\n                                    if (self.HrApproval === OTApplicationStatus.Approved) {\n                                        updateData = {\n                                            EmployeeStatus: OTApplicationStatus.Approved,\n                                            EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                        };\n                                    } else if (self.EmployeeApproval === OTApplicationStatus.Approved) {\n                                        updateData = {\n                                            HrStatus: OTApplicationStatus.Approved,\n                                            HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                        };\n                                    } else {\n                                        updateData = {\n                                            EmployeeStatus: OTApplicationStatus.Approved,\n                                            HrStatus: OTApplicationStatus.Approved,\n                                            EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                            HrUpdated: Authorization.userDefinition.EmployeeRowID\n                                        };\n                                    }\n                                }\n                            } else {\n                                updateData = {\n                                    HrStatus: OTApplicationStatus.Approved,\n                                    HrUpdated: Authorization.userDefinition.EmployeeRowID\n                                };\n                            }\n                        }\n                        else {\n                            updateData = {\n                                EmployeeStatus: OTApplicationStatus.Approved,\n                                EmployeeUpdated: Authorization.userDefinition.EmployeeRowID\n                            };\n                        }\n                        OTApplicationService.Update({\n                            EntityId: self.entityId,\n                            Entity: updateData\n                        }, response => {\n                            self.loadById(response.EntityId)\n                            $('.rejectApplication, .approveApplication').hide()\n                        })\n                    });\n\n                },\n            }\n        );\n                \n        buttons.push(\n            {\n                title: \"Rejected Application\",\t// *** Get button text from translation\n                cssClass: 'text-bg-danger p-2 hidden rejectApplication',\n                icon: 'fa-times text-red',\n                onClick: () => {\n                    confirm(\"Do you want to reject this application?\", () => {\n                        var rejectDlg = new OTApplicationRejectDialog()\n                        rejectDlg.dialogOpen()\n                        rejectDlg.element.on('dialogclose', () => {\n                        let updateData: OTApplicationRow = {};\n                         var rejectReason = window[\"rejectReason\"]\n\n\n                        if (Authorization.userDefinition.Permissions[PermissionKeys.HumanResources]) { // is HR\n                            if (self.SuperiorPermission == true) {\n                                if (self.EmployeeApproval == OTApplicationStatus.NotNeeded || self.HrApproval == OTApplicationStatus.NotNeeded) {\n                                    if (self.EmployeeApproval == OTApplicationStatus.NotNeeded) {\n                                        updateData = {\n                                            HrStatus: OTApplicationStatus.Rejected,\n                                            HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                            HrRejectReason: rejectReason,\n                                        };\n                                    }\n                                    else if (self.HrApproval == OTApplicationStatus.NotNeeded) {\n                                        updateData = {\n                                            EmployeeStatus: OTApplicationStatus.Rejected,\n                                            EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                            SuperiorRejectReason: rejectReason\n                                        };\n                                    }\n                                }\n                                else {\n                                    if (self.HrApproval == OTApplicationStatus.Pending) {\n                                        updateData = {\n                                            HrStatus: OTApplicationStatus.Rejected,\n                                            HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                            HrRejectReason: rejectReason,\n                                        };\n                                    }\n                                    else if (self.EmployeeApproval == OTApplicationStatus.Pending) {\n                                        updateData = {\n                                            EmployeeStatus: OTApplicationStatus.Rejected,\n                                            EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                            SuperiorRejectReason: rejectReason\n                                        };\n                                    }\n                                    else {\n                                        updateData = {\n                                            EmployeeStatus: OTApplicationStatus.Rejected,\n                                            EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                            HrStatus: OTApplicationStatus.Rejected,\n                                            HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                            HrRejectReason: rejectReason,\n                                            SuperiorRejectReason: rejectReason\n                                        };\n                                    }\n                                }\n                            }\n                            else {\n                                updateData = {\n                                    HrStatus: OTApplicationStatus.Rejected,\n                                    HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                     HrRejectReason: rejectReason,\n                                };\n                            }\n\n                        }\n                        else {\n                            updateData = {\n                                EmployeeStatus: OTApplicationStatus.Rejected,\n                                EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                SuperiorRejectReason: rejectReason\n                            };\n                        }\n\n\n                        OTApplicationService.Update({\n                            EntityId: self.entityId,\n                            Entity: updateData\n                        }, response => {\n                            self.loadById(response.EntityId, response => {\n                                console.log(response)\n                                if (!isEmptyOrNull(self.form.SuperiorRejectReason.value))\n                                    $('.SuperiorRejectReason').show()\n                                if (!isEmptyOrNull(self.form.HrRejectReason.value))\n                                    $('.HrRejectReason').show()\n                            })\n                            $('.rejectApplication, .approveApplication').hide()\n\n                        })\n                    })\n\n                    });\n                },\n            }\n        );\n            \n        return buttons;\n    }\n    \n}", "import {  Decorators, EditorUtils, EntityDialog, ListResponse } from '@serenity-is/corelib';\nimport { LeaveApplicationForm, LeaveApplicationRejectForm, LeaveApplicationRow, LeaveApplicationService, LeaveStatus, LeaveTypes, MoneyClaimApplicationRejectForm, OTApplicationRejectForm } from '../../../ServerTypes/LeaveApplication';\nimport { InitYearService } from '../../../ServerTypes/InitYear';\nimport { EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { AnnualLeavePolicyService } from '../../../ServerTypes/AnnualLeavePolicy';\nimport { SickLeavePolicyService } from '../../../ServerTypes/SickLeavePolicy';\nimport { serviceCall, RetrieveResponse, alertDialog, isEmptyOrNull, Authorization, getLookup, confirm } from '@serenity-is/corelib/q';\nimport { EntitledLeaveService } from '../../../ServerTypes/EntitledLeave';\nimport { PublicHolidayService } from '../../../ServerTypes/PublicHoliday';\nimport { PermissionKeys } from '../../../ServerTypes/Administration';\nimport { EmployeeBasicDataDialog } from '../../EmployeeBasicData/EmployeeBasicData/EmployeeBasicDataDialog';\nimport { NoPaidLeaveService, PayrollService } from '../../../ServerTypes/PayrollSettings';\nimport { OrganisationChartService } from '../../../ServerTypes/OrganisationChart';\nimport { MoneyClaimApplicationRejectRow, MoneyClaimApplicationService } from '../../../ServerTypes/MoneyClaimApplication';\r\nimport { OTApplicationRejectRow, OTApplicationService } from '../../../ServerTypes/OTApplication';\r\n\n@Decorators.registerClass('HRMSoftware.OTApplication.OTApplicationRejectDialog')\nexport class OTApplicationRejectDialog extends EntityDialog<OTApplicationRejectRow, any> {\n    protected getFormKey() { return OTApplicationRejectForm.formKey; }\n    protected getRowDefinition() { return OTApplicationRejectRow; }\n    protected getService() { return OTApplicationService.baseUrl; }\n    protected form = new OTApplicationRejectForm(this.idPrefix);\n    constructor() {\n        super();\n        //this.deleteButton.remove();\n        this.cloneButton.remove();\n     \n    }\n    protected onDialogOpen() {\n        super.onDialogOpen()\n        this.undeleteButton.remove()\n        this.applyChangesButton.remove()\n        this.deleteButton.remove()\n        this.localizationButton.remove()\n\n    }\n    protected save_submitHandler(response) {\n        window[\"rejectReason\"] = this.form.RejectReason.value\n        this.dialogClose()\n    }\n}"],
  "mappings": "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",
  "names": ["import_q", "import_corelib", "import_corelib", "import_q", "import_q", "import_corelib", "OTApplicationRejectDialog", "OTApplicationRejectForm", "OTApplicationRejectRow", "OTApplicationService", "response", "__name", "__decorateClass", "OTApplicationDialog", "OTApplicationForm", "self", "CompanySettingsService", "response", "CountryCode", "res", "PublicHolidayService", "linkElement", "scriptElement", "tabId", "searchString", "StartingreplacementString", "EndingreplacementString", "lastIndex", "starting_time_element_id", "ending_time_element_id", "StartClocklet", "event", "myClocklet", "EndClocklet", "OTApplicationRow", "OTApplicationService", "check", "getDayOfWeek", "dateString", "__name", "isDateInArray", "dateArray", "targetDate", "normalizedTarget", "date", "isPublicHoliday", "day", "EmployeeProfileService", "subTotal", "asPanel", "OtDate", "WeekendOt", "PublicHolidayOt", "WeekdayOt", "getHoursBetween", "start", "end", "startTime", "endTime", "startHour", "startMinute", "endHour", "endMinute", "StartingElement", "EndingElement", "startTimeStr", "endTimeStr", "hours", "startTimeParts", "endTimeParts", "startHours", "startMinutes", "endHours", "endMinutes", "timediff", "EmployeeUpdatedNameElement", "__async", "dlg", "EmployeeBasicDataDialog", "HrUpdatedNameNameElement", "RejectedBy", "ApprovedBy", "EmployeeRowIdElement", "PermissionKeys", "ApproveButtons", "element", "RejectButtons", "applicant", "HrStatus", "EmployeeStatus", "applicationStatus", "OrganisationChartService", "PermissionToAck", "error", "buttons", "Linkx", "updateData", "rejectDlg", "OTApplicationRejectDialog", "rejectReason", "__decorateClass", "import_q", "OTApplicationGrid", "container", "OTApplicationColumns", "OTApplicationDialog", "OTApplicationRow", "OTApplicationService", "itemType", "callback", "dialog", "self", "filters", "months", "OccupationService", "response", "index", "JobGradeService", "DepartmentService", "DivisionService", "EmployeeProfileService", "MasterCostCentreService", "buttons", "e", "__async", "selectedIds", "dataId", "EmployeeApproval", "HrApproval", "entityId", "EmployeeRowId", "updateData", "SuperiorPermission", "PermissionKeys", "error", "rejectDlg", "OTApplicationRejectDialog", "rejectReason", "resolve", "reject", "OrganisationChartService", "args", "checked", "item", "superior", "isHr", "columns", "userId", "entity", "__name", "__decorateClass", "pageInit", "OTApplicationGrid", "__name"]
}
