{
  "version": 3,
  "sources": ["../../../../../../Modules/HumanResource/EmployeeAttendance/ShiftAttendanceRecord/ShiftAttendanceRecordPage.ts", "../../../../../../Modules/HumanResource/EmployeeAttendance/ShiftAttendanceRecord/ShiftAttendanceRecordGrid.ts", "../../../../../../Modules/HumanResource/EmployeeAttendance/ShiftAttendanceRecord/ShiftAttendanceRecordDialog.ts", "../../../../../../Modules/HumanResource/EmployeeAttendance/ShiftAttendanceRecord/ShiftAttendanceRecordDownloaderDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\nimport { ShiftAttendanceRecordGrid } from './ShiftAttendanceRecordGrid';\n\nexport default function pageInit() {\n    initFullHeightGridPage(new ShiftAttendanceRecordGrid($('#GridDiv')).element);\n}", "import { Decorators, EntityGrid, ListResponse, QuickFilter, Select2Editor, Widget } from '@serenity-is/corelib';\nimport { ShiftAttendanceRecordColumns, ShiftAttendanceRecordRow, ShiftAttendanceRecordService } from '../../../ServerTypes/EmployeeAttendance';\nimport { ShiftAttendanceRecordDialog } from './ShiftAttendanceRecordDialog';\nimport { OccupationService, JobGradeService, DepartmentService, DivisionService } from '../../../ServerTypes/OrganisationHierarchy';\nimport { confirmDialog, confirm, serviceCall, notifySuccess, notifyError, notifyInfo } from '@serenity-is/corelib/q';\n\nimport { EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { MasterCostCentreService } from '../../../ServerTypes/Master';\nimport { Authorization } from '@serenity-is/corelib/q';\nimport { PermissionKeys } from '../../../ServerTypes/Administration';\nimport { ShiftAttendanceDownloaderDialog } from './ShiftAttendanceRecordDownloaderDialog';\r\n@Decorators.registerClass('HRMSoftware.EmployeeAttendance.ShiftAttendanceRecordGrid')\nexport class ShiftAttendanceRecordGrid extends EntityGrid<ShiftAttendanceRecordRow, any> {\n    protected getColumnsKey() { return ShiftAttendanceRecordColumns.columnsKey; }\n    protected getDialogType() { return ShiftAttendanceRecordDialog; }\n    protected getRowDefinition() { return ShiftAttendanceRecordRow; }\n    protected getService() { return ShiftAttendanceRecordService.baseUrl; }\n    protected getButtons() {\n        var buttons = super.getButtons();\n        var self = this\n\n        buttons.push({\n            title: 'Shift Attendance Record Generator',\n            cssClass: 'fas fa-hat-wizard text-bg-success',\n            onClick: e => {\n                confirm(\n                    \"Do you want to generate Timesheet?\",\n                    () => {\n                        var ShiftAttendanceRecordDownloader = new ShiftAttendanceDownloaderDialog()\n                        ShiftAttendanceRecordDownloader.dialogOpen()\n                        ShiftAttendanceRecordDownloader.element.on(\"dialogclose\", function () {\n                            //self.refresh()\n                            //location.reload()\n                            self.internalRefresh()\n\n                        })\n                    }\n                )\n            },\n        });\n        return buttons\n\n    }\n\n    protected getQuickFilters(): QuickFilter<Widget<any>, any>[] {\n        //Gets the Filters defined in the Columns or in parent grids.\n        let filters = super.getQuickFilters();\n\n        // console.log(filters[3].type = Select2Editor)\n\n        if (Authorization.hasPermission(PermissionKeys.HumanResources)) {\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: ShiftAttendanceRecordRow.Fields.OccupationName,\n                type: Select2Editor,\n                title: \"Occupation\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: ShiftAttendanceRecordRow.Fields.JobGradeName,\n                type: Select2Editor,\n                title: \"Job Grade\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: ShiftAttendanceRecordRow.Fields.DivisionName,\n                type: Select2Editor,\n                title: \"Division\",\n\n            });\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: ShiftAttendanceRecordRow.Fields.DepartmentName,\n                type: Select2Editor,\n                title: \"Department\",\n\n            });\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: ShiftAttendanceRecordRow.Fields.EmployeeName,\n                type: Select2Editor,\n                title: \"Name\",\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: ShiftAttendanceRecordRow.Fields.EmployeeID,\n                type: Select2Editor,\n                title: \"Employee ID\",\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: ShiftAttendanceRecordRow.Fields.CostCentreName,\n                type: Select2Editor,\n\n                title: \"Cost Centre\",\n            });\n\n            filters.reverse()\n        }\n        return filters;\n    }\n    protected createQuickFilters(): void {\n        // let base class to create quick filters first\n        super.createQuickFilters();\n\n        if (Authorization.hasPermission(PermissionKeys.HumanResources)) {\n            const months: string[] = [\n                'January',   // 0\n                'February',  // 1\n                'March',     // 2\n                'April',     // 3\n                'May',       // 4\n                'June',      // 5\n                'July',      // 6\n                'August',    // 7\n                'September', // 8\n                'October',   // 9\n                'November',  // 10\n                'December'   // 11\n            ];\n\n            OccupationService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, ShiftAttendanceRecordRow.Fields.OccupationName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            JobGradeService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, ShiftAttendanceRecordRow.Fields.JobGradeName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            DepartmentService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, ShiftAttendanceRecordRow.Fields.DepartmentName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            DivisionService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, ShiftAttendanceRecordRow.Fields.DivisionName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n\n            })\n            EmployeeProfileService.List({\n            }, response => {\n                for (var index in response.Entities) {\n                    this.findQuickFilter(Select2Editor, ShiftAttendanceRecordRow.Fields.EmployeeName).items.push({ id: (response.Entities[index].EmployeeName).toString(), text: (response.Entities[index].EmployeeName).toString(), })\n                    this.findQuickFilter(Select2Editor, ShiftAttendanceRecordRow.Fields.EmployeeID).items.push({ id: (response.Entities[index].EmployeeID).toString(), text: (response.Entities[index].EmployeeID).toString(), })\n\n                }\n            })\n            MasterCostCentreService.List({\n            }, response => {\n                for (var index in response.Entities) {\n                    this.findQuickFilter(Select2Editor, ShiftAttendanceRecordRow.Fields.CostCentreName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n\n                }\n            })\n\n\n        }\n\n    }\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n    protected getColumns() {\n        var columns = super.getColumns();\n        var index\n        if (!Authorization.hasPermission(PermissionKeys.HumanResources)) //if he is not HR guy, hide the employeeID and approved by column\n        {\n            for (index in columns) {\n                if (columns[index].name == 'Employee Id' || columns[index].name == 'Approved By') {\n                    columns.splice(index, 1);\n                }\n\n            }\n        }\n\n\n        return columns;\n\n    }\n    protected onViewProcessData(response: ListResponse<ShiftAttendanceRecordRow>) {\n        response = super.onViewProcessData(response);\n        this.toolbar.findButton(\"column-picker-button\").toggle(false);\n        return response;\n\n    }\n}", "import { Decorators, EntityDialog } from '@serenity-is/corelib';\nimport { ShiftAttendanceRecordForm, ShiftAttendanceRecordRow, ShiftAttendanceRecordService } from '../../../ServerTypes/EmployeeAttendance';\n\n@Decorators.registerClass('HRMSoftware.EmployeeAttendance.ShiftAttendanceRecordDialog')\nexport class ShiftAttendanceRecordDialog extends EntityDialog<ShiftAttendanceRecordRow, any> {\n    protected getFormKey() { return ShiftAttendanceRecordForm.formKey; }\n    protected getRowDefinition() { return ShiftAttendanceRecordRow; }\n    protected getService() { return ShiftAttendanceRecordService.baseUrl; }\n\n    protected form = new ShiftAttendanceRecordForm(this.idPrefix);\n\n    constructor() {\n        super();\n        this.editButton.remove();\n        this.applyChangesButton.remove();\n\n        // Create link element for CSS\n        var linkElement = document.createElement('link');\n        linkElement.rel = 'stylesheet';\n        linkElement.href = \"https://cdn.jsdelivr.net/npm/clocklet@0.3.0/css/clocklet.min.css\";\n        var scriptElement = document.createElement('script');\n        scriptElement.src = \"https://cdn.jsdelivr.net/npm/clocklet@0.3.0\";\n        // Append link and script elements to the head of the document\n        document.head.appendChild(linkElement);\n        document.head.appendChild(scriptElement);\n        var tabId = $(\".fieldset\").children().attr('id');\n        const searchString = \"PropertyGrid\";\n        const TimeInString = \"TimeInHour\";\n        const TimeOutString = \"TimeOutHour\";\n        const ShiftStartTimeString = \"ShiftStartTimeHour\";\n        const ShiftEndTimeString = \"ShiftEndTimeHour\";\n        const lastIndex = tabId.lastIndexOf(searchString);\n        if (lastIndex !== -1) {\n            var starting_time_element_id = tabId.substring(0, lastIndex) + TimeInString;\n            var ending_time_element_id = tabId.substring(0, lastIndex) + TimeOutString;\n            var ShiftStartTime_element_id = tabId.substring(0, lastIndex) + ShiftStartTimeString;\n            var ShiftEndTime_element_id = tabId.substring(0, lastIndex) + ShiftEndTimeString;\n        }\n        var StartClocklet = document.getElementById(starting_time_element_id)\n        StartClocklet.setAttribute('data-clocklet', '');\n        StartClocklet.setAttribute(\"id\", \"time-start-clocklet\");\n        StartClocklet.addEventListener(\"clocklet.opening\", function (event) {\n            const myClocklet = document.getElementById(\"time-start-clocklet\") as HTMLElement;\n            if (myClocklet) \n                myClocklet.style.zIndex = Number.MAX_SAFE_INTEGER.toString();\n        });\n        StartClocklet.addEventListener(\"clocklet.closed\", function (event) {\n        });\n        \n        var EndClocklet = document.getElementById(ending_time_element_id)\n        EndClocklet.setAttribute('data-clocklet', '');\n        EndClocklet.setAttribute(\"id\", \"time-end-clocklet\");\n        EndClocklet.addEventListener(\"clocklet.opening\", function (event) {\n            const myClocklet = document.getElementById(\"time-end-clocklet\") as HTMLElement;\n            if (myClocklet) \n                myClocklet.style.zIndex = Number.MAX_SAFE_INTEGER.toString();\n        });\n        EndClocklet.addEventListener(\"clocklet.closed\", function (event) {\n        });\n        var ShiftStartClocklet = document.getElementById(ShiftStartTime_element_id)\n        ShiftStartClocklet.setAttribute('data-clocklet', '');\n        ShiftStartClocklet.setAttribute(\"id\", \"shift-start-clocklet\");\n        ShiftStartClocklet.addEventListener(\"clocklet.opening\", function (event) {\n            const myClocklet = document.getElementById(\"shift-start-clocklet\") as HTMLElement;\n            if (myClocklet) \n                myClocklet.style.zIndex = Number.MAX_SAFE_INTEGER.toString();\n        });\n        ShiftStartClocklet.addEventListener(\"clocklet.closed\", function (event) {\n        });\n        var ShiftEndClocklet = document.getElementById(ShiftEndTime_element_id)\n        ShiftEndClocklet.setAttribute('data-clocklet', '');\n        ShiftEndClocklet.setAttribute(\"id\", \"shift-end-clocklet\");\n        ShiftEndClocklet.addEventListener(\"clocklet.opening\", function (event) {\n            const myClocklet = document.getElementById(\"shift-end-clocklet\") as HTMLElement;\n            if (myClocklet) \n                myClocklet.style.zIndex = Number.MAX_SAFE_INTEGER.toString();\n        });\n        ShiftEndClocklet.addEventListener(\"clocklet.closed\", function (event) {\n        });\n        \n    }\n\n    protected onDialogOpen() {\n        super.onDialogOpen()\n   \n        if (!this.isNew())\n        ShiftAttendanceRecordService.Retrieve({\n            EntityId: this.entityId\n        }, response => {\n            var ShiftStartTime = new Date(response.Entity.ShiftStartTime)\n            var hours = ShiftStartTime.getHours().toString().padStart(2, '0'); // Ensure two digits\n            var minutes = ShiftStartTime.getMinutes().toString().padStart(2, '0'); // Ensure two digits\n            var formattedTime = `${hours}:${minutes}`;\n            var ShiftStartElement = document.getElementById('shift-start-clocklet') as HTMLInputElement;\n            ShiftStartElement.value = formattedTime;\n\n\n            var ShiftEndTime = new Date(response.Entity.ShiftEndTime)\n            hours = ShiftEndTime.getHours().toString().padStart(2, '0'); // Ensure two digits\n            minutes = ShiftEndTime.getMinutes().toString().padStart(2, '0'); // Ensure two digits\n            formattedTime = `${hours}:${minutes}`;\n            var ShiftEndElement = document.getElementById('shift-end-clocklet') as HTMLInputElement;\n            ShiftEndElement.value = formattedTime;\n\n\n\n            var TimeIn = new Date(response.Entity.TimeIn)\n            hours = TimeIn.getHours().toString().padStart(2, '0'); // Ensure two digits\n            minutes = TimeIn.getMinutes().toString().padStart(2, '0'); // Ensure two digits\n            formattedTime = `${hours}:${minutes}`;\n            var TimeInElement = document.getElementById('time-start-clocklet') as HTMLInputElement;\n            TimeInElement.value = formattedTime;\n        \n            var TimeOut = new Date(response.Entity.TimeOut)\n            hours = TimeOut.getHours().toString().padStart(2, '0'); // Ensure two digits\n            minutes = TimeOut.getMinutes().toString().padStart(2, '0'); // Ensure two digits\n            formattedTime = `${hours}:${minutes}`;\n            var TimeOutElement = document.getElementById('time-end-clocklet') as HTMLInputElement;\n            TimeOutElement.value = formattedTime;\n        })\n\n    }\n}", "import { Decorators, EntityDialog, EditorUtils, ListResponse, Criteria } from '@serenity-is/corelib';\nimport { alertDialog, isEmptyOrNull } from '@serenity-is/corelib/q';\nimport { confirm, serviceCall, notifySuccess, notifyError } from '@serenity-is/corelib/q';\nimport { Select2Editor } from '@serenity-is/corelib';\nimport { EmployeeProfileRow, EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { CompanySettingsService } from '../../../ServerTypes/CompanySettings';\nimport { ShiftAttendanceRecordRow, ShiftAttendanceRecordService } from '../../../ServerTypes/EmployeeAttendance';\r\nimport { ShiftAttendanceDownloaderForm } from '../../../ServerTypes/PayrollSettings';\r\nimport { AnnouncementWizardService } from '../../../ServerTypes/Announcement';\r\n\n@Decorators.registerClass('HRMSoftware.EmployeeAttendance.ShiftAttendanceDownloaderDialog')\nexport class ShiftAttendanceDownloaderDialog extends EntityDialog<ShiftAttendanceRecordRow, any> {\n    protected getFormKey() { return ShiftAttendanceDownloaderForm.formKey; }\n    protected getRowDefinition() { return ShiftAttendanceRecordRow; }\n    protected getService() { return ShiftAttendanceRecordService.baseUrl; }\n    public EmployeeData: EmployeeProfileRow[];\n    public PayrollData: any[];\n\n    public dateString: string;\n    constructor() {\n        super();\n        var criteria: any;\n\n        EmployeeProfileService.List({\n            Criteria: Criteria.and(criteria, [[EmployeeProfileRow.Fields.Retired], '=', '0'],\n                [[EmployeeProfileRow.Fields.Terminated], '=', '0'],\n                [[EmployeeProfileRow.Fields.Resigned], '=', '0']\n            )\n        }, response => {\n            this.EmployeeData = response.Entities\n        })\n\n\n\n    }\n    protected form = new ShiftAttendanceDownloaderForm(this.idPrefix);\n    public SearchCallback(): void {\n        var self = this\n        var OccupationListElement = document.getElementById(this.idPrefix + 'OccupationList');\n        var DepartmentListElement = document.getElementById(this.idPrefix + 'DepartmentList');\n        var DivisionListElement = document.getElementById(this.idPrefix + 'DivisionList');\n        var JobGradeListElement = document.getElementById(this.idPrefix + 'JobGradeList');\n        var SectionListElement = document.getElementById(this.idPrefix + 'SectionList');\n       \n        function parseListFromElement(element) {\n            const valueStr = $(element).val();\n            return valueStr.length\n                ? valueStr.split(',').map(number => parseInt(number, 10))\n                : [];\n        }\n        // Use the utility function for each list\n        const JobGradeList = parseListFromElement(JobGradeListElement);\n        const DivisionList = parseListFromElement(DivisionListElement);\n        const DepartmentList = parseListFromElement(DepartmentListElement);\n        const OccupationList = parseListFromElement(OccupationListElement);\n        const SectionList = parseListFromElement(SectionListElement);\n        // Convert the lists to Sets for faster lookup\n        const jobGradeSet = new Set(JobGradeList);\n        const divisionSet = new Set(DivisionList);\n        const departmentSet = new Set(DepartmentList);\n        const occupationSet = new Set(OccupationList);\n        const sectionSet = new Set(SectionList);\n\n        for (let employee of self.EmployeeData) {\n            const { JobGradeID, DivisionID, DepartmentID, OccupationID, SectionID, Id } = employee;\n            console.log(employee)\n\n            // Check if the employee matches any criteria\n            const found =\n                jobGradeSet.has(JobGradeID) ||\n                divisionSet.has(DivisionID) ||\n                departmentSet.has(DepartmentID) ||\n                occupationSet.has(OccupationID) ||\n                sectionSet.has(SectionID);\n\n            let employeeRowListBuffer = self.form.EmployeeRowListBuffer.value;\n            let employeeRowList = employeeRowListBuffer ? employeeRowListBuffer.split(',').map(Number) : [];\n\n            if (!found) {\n                // Remove employee if not found\n                employeeRowList = employeeRowList.filter(num => num !== Id);\n            } else {\n                // Add employee if not already present\n                if (!employeeRowList.includes(Id)) {\n                    employeeRowList.push(Id);\n                }\n            }\n            // Update the buffer value\n            self.form.EmployeeRowListBuffer.value = employeeRowList.join(',');\n        }\n        self.form.EmployeeRowList.value = self.form.EmployeeRowListBuffer.value\n\n    }\n\n    public counter: number;\n    public WaitingCounter: number;\n    public SearchEmployeeCallback(): void {\n        var self = this\n        var EmployeeRowIdListElement = document.getElementById(this.idPrefix + 'EmployeeRowListBuffer');\n        var EmployeeRowIdString = $(EmployeeRowIdListElement).val()\n        let numbers = EmployeeRowIdString.split(',')\n        let EmployeeRowIdList = [];\n        if (EmployeeRowIdString.length)\n            numbers.forEach(number => {\n                EmployeeRowIdList.push(parseInt(number)); // Convert string to integer and push to numberList\n            })\n      \n        let EmployeeRowList = [];\n        var EmployeeRowString = self.form.EmployeeRowListBuffer.value\n        let EmployeeRowListBuffer = EmployeeRowString.split(',')\n        EmployeeRowListBuffer.forEach(number => {\n            EmployeeRowList.push(parseInt(number)); // Convert string to integer and push to numberList\n        })\n        /*\n        PayrollService.List({\n        }, response => {\n\n            for (var index in response.Entities) {\n                var currentEmployeeRowId = response.Entities[index].EmployeeRowId\n                var currentPayMonth = response.Entities[index].PayMonth\n                var currentPayYear = response.Entities[index].PayYear\n                if (EmployeeRowIdList.indexOf(currentEmployeeRowId) !== -1 && currentPayMonth == PayMonth && currentPayYear == PayYear) {\n                    EmployeeRowString = self.form.EmployeeRowListBuffer.value\n                    if (EmployeeRowString != \"\") {\n                        let EmployeeRowListBuffer = EmployeeRowString.split(',')\n                        EmployeeRowListBuffer.forEach(number => {\n                            EmployeeRowList.push(parseInt(number)); // Convert string to integer and push to numberList\n                        })\n                        EmployeeRowList = EmployeeRowList.filter(number => number !== response.Entities[index].EmployeeRowId);\n                        self.form.EmployeeRowListBuffer.value = EmployeeRowList.join(',')\n                    }\n                }\n            }\n            self.form.EmployeeRowList.value = EmployeeRowList.join(',')\n        })\n        */\n    }\n    protected getToolbarButtons() {\n        var self = this;\n        var buttons = super.getToolbarButtons();\n        $(`#${this.idPrefix}Toolbar`).addClass(\"ms-auto\")\n        buttons.push(\n            {\n                title: \"Generate Shift Attendance Records\",\t// *** Get button text from translation\n                cssClass: 'text-bg-success p-2 ml-auto',\n                icon: 'fas fa-hat-wizard text-green',\n                onClick: () => {\n                  \n                    var EmployeeRowIdString = self.form.EmployeeRowList.value\n                    let EmployeeRowIdList = [];\n                    let numbers = EmployeeRowIdString.split(',')\n                    if (EmployeeRowIdString.length)\n                        numbers.forEach(number => {\n                            EmployeeRowIdList.push(parseInt(number)); // Convert string to integer and push to numberList\n                        })\n                    self.counter = 0\n                    confirm(//  the user confirm dont want to download\n                        \"Are you sure to download the timesheet for these employees?\",\n                        () => {\n                            console.log(self.EmployeeData.find(obj => obj.Id === 12))\n                            console.log('hhhaaa')\n                            function downloadTimesheet(employeeRowId) {\n                                return new Promise<void>((resolve, reject) => {\n                                    var queryString = \"EmployeeRowId=\" + encodeURIComponent(employeeRowId) +\n                                        \"&startDateStr=\" + encodeURIComponent(self.form.startDate.value) +\n                                        \"&endDateStr=\" + encodeURIComponent(self.form.endDate.value);\n                                    var url = window.location.origin + '/EmployeeAttendance/ShiftAttendanceRecord/GenerateShiftAttendanceTable?' + queryString;\n\n                                    var xhr = new XMLHttpRequest();\n                                    xhr.open('GET', url, true);\n                                    xhr.responseType = 'blob';\n                                    xhr.onload = function () {\n                                        if (xhr.status === 200) {\n                                            var blob = xhr.response;\n                                            const url = window.URL.createObjectURL(blob);\n                                            const a = document.createElement('a');\n                                            a.style.display = 'none';\n                                            var employee = self.EmployeeData.find(obj => obj.Id == employeeRowId)\n                                            var employeeName = employee.EmployeeName\n                                            var employeeId = employee.EmployeeID\n\n                                            a.href = url;\n                                            a.download = `Attendance Timesheet ${employeeName} ${employeeId} from ${self.form.startDate.value}-${self.form.endDate.value}.pdf`;\n                                            a.click();\n                                            notifySuccess(\"Timesheet downloaded\");\n                                            resolve();\n                                        } else {\n                                            notifyError('Error encountered when downloading timesheet PDF');\n                                            reject(new Error('Download failed'));\n                                        }\n                                    };\n                                    xhr.onerror = () => reject(new Error('Network error'));\n                                    xhr.send();\n                                });\n                            }\n                            async function downloadTimesheets() {\n                                for (let i = 0; i < self.form.EmployeeRowList.values.length; i++) \n                                    await downloadTimesheet(self.form.EmployeeRowList.values[i]);\n                                \n                            }\n                            downloadTimesheets()\n                            \n\n\n\n                        }\n                    )\n                },\n            }\n        );\n        return buttons\n    }\n    public dialogOpen(asPanel?: boolean): void {\n        super.dialogOpen();\n        var self = this;\n\n        serviceCall<ListResponse<any>>({\n            service: AnnouncementWizardService.baseUrl + '/GetTodayDateTime',\n            method: \"GET\",\n            data: {\n            },\n            async: false,\n            onSuccess: (response) => {\n                self.dateString = response\n                CompanySettingsService.List({\n                }, response => {\n                    var today = new Date(self.dateString)\n                    var todayMonth = today.getMonth()\n                    var todayYear = today.getFullYear()\n                    var PayDate = 0\n                    for (var index in response.Entities) {\n                        if (response.Entities[index].IsActive == 1) {\n                            PayDate = response.Entities[index].PayDay\n                            break\n                        }\n                    }\n                    var DateObj = new Date(todayYear, todayMonth, PayDate)\n                    var DateObjYear = DateObj.getFullYear().toString()\n                    var DateObjMonth = (DateObj.getMonth() + 1).toString()\n                    var DateObjDay = DateObj.getDate().toString()\n                    todayMonth = todayMonth + 1\n                    var LastMonth = new Date(todayYear, todayMonth, PayDate)\n                    LastMonth.setDate(LastMonth.getDate() + 1);\n                    var LastMonthObjYear = LastMonth.getFullYear().toString()\n                    var LastMonthObjMonth = (LastMonth.getMonth() + 1).toString()\n                    var LastMonthObjDay = LastMonth.getDate().toString()\n                    var LatestDateFormat = DateObjMonth.padStart(2, '0') + '/' + DateObjDay.padStart(2, '0') + '/' + DateObjYear\n                    var LastMonthFormat = LastMonthObjMonth.padStart(2, '0') + '/' + LastMonthObjDay.padStart(2, '0') + '/' + LastMonthObjYear\n                    if (this.isNew()) {\n                        self.form.startDate.value = LatestDateFormat\n                        self.form.endDate.value = LastMonthFormat\n                    }\n                })\n            }\n        })\n\n\n\n\n        this.saveAndCloseButton.hide()\n        this.editButton.hide()\n        this.applyChangesButton.hide()\n        this.deleteButton.hide()\n        this.localizationButton.hide()\n        this.cloneButton.hide()\n        this.undeleteButton.hide()\n        //EditorUtils.setReadonly(this.form.EmployeeRowList.element, true);\n\n        var PayMonthElement = document.getElementById(this.idPrefix + 'PayMonth')\n        var PayYearElement = document.getElementById(this.idPrefix + 'PayYear')\n        let PayMonthEditor = new Select2Editor($(PayMonthElement))\n        let PayYearEditor = new Select2Editor($(PayYearElement))\n        const months: string[] = [\n            'January',   // 0\n            'February',  // 1\n            'March',     // 2\n            'April',     // 3\n            'May',       // 4\n            'June',      // 5\n            'July',      // 6\n            'August',    // 7\n            'September', // 8\n            'October',   // 9\n            'November',  // 10\n            'December'   // 11\n        ];\n        var today = new Date(self.dateString)\n        var todayYear = today.getFullYear()\n        var todayMonth = today.getMonth()\n        // Example usage:\n        for (let i = 0; i < months.length; i++)\n            PayMonthEditor.addItem({ id: (i).toString(), text: (months[i]).toString(), }); // 8am - 6pm , will consider lates\n\n        PayMonthEditor.set_value(todayMonth.toString())\n        for (let i = -1; i < 2; i++)\n            PayYearEditor.addItem({ id: (todayYear + i).toString(), text: (todayYear + i).toString(), }); // 8am - 6pm , will consider lates\n\n        PayYearEditor.set_value(todayYear.toString())\n\n\n        var SectionListElement = document.getElementById(this.idPrefix + 'SectionList');\n        var OccupationListElement = document.getElementById(this.idPrefix + 'OccupationList');\n        var DepartmentListElement = document.getElementById(this.idPrefix + 'DepartmentList');\n        var DivisionListElement = document.getElementById(this.idPrefix + 'DivisionList');\n        var JobGradeListElement = document.getElementById(this.idPrefix + 'JobGradeList');\n        \n        $(`#s2id_${this.idPrefix}EmployeeRowList`).on('click', async function (e) {\n            $(`.select2-drop`).hide()\n            return\n\n        })\n\n\n        $(OccupationListElement).on('change', async function () {\n            self.SearchCallback()\n            //  self.SearchEmployeeCallback();\n\n        })\n        $(DivisionListElement).on('change', async function () {\n            self.SearchCallback();\n            // self.SearchEmployeeCallback();\n\n        })\n        $(JobGradeListElement).on('change', async function () {\n            self.SearchCallback();\n            //self.SearchEmployeeCallback();\n        })\n        $(DepartmentListElement).on('change', async function () {\n            self.SearchCallback();\n            //self.SearchEmployeeCallback();\n        })\n        $(SectionListElement).on('change', async function () {\n            self.SearchCallback();\n            //self.SearchEmployeeCallback();\n\n        })\n\n    }\n    protected getDialogOptions() {\n        let opt = super.getDialogOptions()\n        opt.width = opt.width + 100\n        return opt\n    }\n}"],
  "mappings": "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",
  "names": ["import_q", "import_corelib", "import_corelib", "ShiftAttendanceRecordDialog", "ShiftAttendanceRecordForm", "linkElement", "scriptElement", "tabId", "searchString", "TimeInString", "TimeOutString", "ShiftStartTimeString", "ShiftEndTimeString", "lastIndex", "starting_time_element_id", "ending_time_element_id", "ShiftStartTime_element_id", "ShiftEndTime_element_id", "StartClocklet", "event", "myClocklet", "EndClocklet", "ShiftStartClocklet", "ShiftEndClocklet", "ShiftAttendanceRecordRow", "ShiftAttendanceRecordService", "response", "ShiftStartTime", "hours", "minutes", "formattedTime", "ShiftStartElement", "ShiftEndTime", "ShiftEndElement", "TimeIn", "TimeInElement", "TimeOut", "TimeOutElement", "__name", "__decorateClass", "import_q", "import_q", "import_corelib", "import_q", "ShiftAttendanceDownloaderDialog", "ShiftAttendanceDownloaderForm", "criteria", "EmployeeProfileService", "EmployeeProfileRow", "response", "ShiftAttendanceRecordRow", "ShiftAttendanceRecordService", "self", "OccupationListElement", "DepartmentListElement", "DivisionListElement", "JobGradeListElement", "SectionListElement", "parseListFromElement", "element", "valueStr", "number", "__name", "JobGradeList", "DivisionList", "DepartmentList", "OccupationList", "SectionList", "jobGradeSet", "divisionSet", "departmentSet", "occupationSet", "sectionSet", "employee", "JobGradeID", "DivisionID", "DepartmentID", "OccupationID", "SectionID", "Id", "found", "employeeRowListBuffer", "employeeRowList", "num", "EmployeeRowIdListElement", "EmployeeRowIdString", "numbers", "EmployeeRowIdList", "EmployeeRowList", "EmployeeRowString", "buttons", "obj", "downloadTimesheet", "employeeRowId", "resolve", "reject", "queryString", "url", "xhr", "blob", "a", "employeeName", "employeeId", "downloadTimesheets", "__async", "i", "asPanel", "AnnouncementWizardService", "CompanySettingsService", "today", "todayMonth", "todayYear", "PayDate", "index", "DateObj", "DateObjYear", "DateObjMonth", "DateObjDay", "LastMonth", "LastMonthObjYear", "LastMonthObjMonth", "LastMonthObjDay", "LatestDateFormat", "LastMonthFormat", "PayMonthElement", "PayYearElement", "PayMonthEditor", "PayYearEditor", "months", "e", "opt", "__decorateClass", "ShiftAttendanceRecordGrid", "ShiftAttendanceRecordColumns", "ShiftAttendanceRecordDialog", "ShiftAttendanceRecordRow", "ShiftAttendanceRecordService", "buttons", "self", "e", "ShiftAttendanceRecordDownloader", "ShiftAttendanceDownloaderDialog", "filters", "PermissionKeys", "months", "OccupationService", "response", "index", "JobGradeService", "DepartmentService", "DivisionService", "EmployeeProfileService", "MasterCostCentreService", "container", "columns", "__name", "__decorateClass", "pageInit", "ShiftAttendanceRecordGrid", "__name"]
}
