{
  "version": 3,
  "sources": ["../../../../../../Modules/HumanResource/EntitledLeave/EntitledLeave/EntitledLeavePage.ts", "../../../../../../Modules/HumanResource/EntitledLeave/EntitledLeave/EntitledLeaveGrid.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\nimport { EntitledLeaveGrid } from './EntitledLeaveGrid';\n\nexport default function pageInit() {\n    initFullHeightGridPage(new EntitledLeaveGrid($('#GridDiv')).element);\n}", "import { Decorators, EntityGrid } from '@serenity-is/corelib';\nimport { EntitledLeaveColumns, EntitledLeaveRow, EntitledLeaveService } from '../../../ServerTypes/EntitledLeave';\nimport { EntitledLeaveDialog } from './EntitledLeaveDialog';\nimport { PermissionKeys } from '../../../ServerTypes/Administration';\nimport { Authorization } from '@serenity-is/corelib/q';\nimport { Select2Editor, QuickFilter, Widget } from '@serenity-is/corelib';\nimport { EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\n\nimport { OccupationService, JobGradeService, DepartmentService, DivisionService } from '../../../ServerTypes/OrganisationHierarchy';\n\n@Decorators.registerClass('HRMSoftware.EntitledLeave.EntitledLeaveGrid')\nexport class EntitledLeaveGrid extends EntityGrid<EntitledLeaveRow, any> {\n    protected getColumnsKey() { return EntitledLeaveColumns.columnsKey; }\n    protected getDialogType() { return EntitledLeaveDialog; }\n    protected getRowDefinition() { return EntitledLeaveRow; }\n    protected getService() { return EntitledLeaveService.baseUrl; }\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n    protected getQuickFilters(): QuickFilter<Widget<any>, any>[] {\n        //Gets the Filters defined in the Columns or in parent grids.\n        let filters = super.getQuickFilters();\n        var thisrow = EntitledLeaveRow\n        // console.log(filters[3].type = Select2Editor)\n        if (Authorization.hasPermission(PermissionKeys.HumanResources)) {\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: thisrow.Fields.OccupationName,\n                type: Select2Editor,\n                title: \"Occupation\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: thisrow.Fields.JobGradeName,\n                type: Select2Editor,\n                title: \"Job Grade\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: thisrow.Fields.DivisionName,\n                type: Select2Editor,\n                title: \"Division\",\n\n            });\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: thisrow.Fields.DepartmentName,\n                type: Select2Editor,\n                title: \"Department\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: thisrow.Fields.EmployeeName,\n                type: Select2Editor,\n                title: \"Name\",\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: thisrow.Fields.EmployeeId,\n                type: Select2Editor,\n                title: \"Employee ID\",\n            });\n            filters.reverse()\n\n        }\n        return filters;\n    }\n    protected createQuickFilters(): void {\n        // let base class to create quick filters first\n\n        super.createQuickFilters();\n        var thisrow = EntitledLeaveRow\n        if (Authorization.hasPermission(PermissionKeys.HumanResources)) {\n\n            OccupationService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, thisrow.Fields.OccupationName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            JobGradeService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, thisrow.Fields.JobGradeName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            DepartmentService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, thisrow.Fields.DepartmentName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            DivisionService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, thisrow.Fields.DivisionName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n\n            })\n            EmployeeProfileService.List({\n            }, response => {\n                for (var index in response.Entities) {\n                    this.findQuickFilter(Select2Editor, thisrow.Fields.EmployeeName).items.push({ id: (response.Entities[index].EmployeeName).toString(), text: (response.Entities[index].EmployeeName).toString(), })\n                    this.findQuickFilter(Select2Editor, thisrow.Fields.EmployeeId).items.push({ id: (response.Entities[index].EmployeeID).toString(), text: (response.Entities[index].EmployeeID).toString(), })\n\n                }\n            })\n        }\n         this.toolbar.findButton(\"add-button\").toggle(false);\n\n    }\n\n}"],
  "mappings": "uuBAAC,IAAAA,EAAuC,SCAxC,IAAAC,EAAuC,SAIvC,IAAAC,EAA8B,SAC9BC,EAAmD,SAM5C,IAAMC,EAAN,cAAgC,YAAkC,CAC3D,eAAgB,CAAE,OAAOC,EAAqB,UAAY,CAC1D,eAAgB,CAAE,OAAOC,CAAqB,CAC9C,kBAAmB,CAAE,OAAOC,CAAkB,CAC9C,YAAa,CAAE,OAAOC,EAAqB,OAAS,CAE9D,YAAYC,EAAmB,CAC3B,MAAMA,CAAS,CACnB,CACU,iBAAmD,CAEzD,IAAIC,EAAU,MAAM,gBAAgB,EACpC,IAAIC,EAAUJ,EAEd,OAAI,gBAAc,cAAcK,EAAe,cAAc,IAEzDF,EAAQ,KAAK,CACT,SAAU,YACV,MAAOC,EAAQ,OAAO,eACtB,KAAM,gBACN,MAAO,YAEX,CAAC,EACDD,EAAQ,KAAK,CACT,SAAU,YACV,MAAOC,EAAQ,OAAO,aACtB,KAAM,gBACN,MAAO,WAEX,CAAC,EACDD,EAAQ,KAAK,CACT,SAAU,YACV,MAAOC,EAAQ,OAAO,aACtB,KAAM,gBACN,MAAO,UAEX,CAAC,EAEDD,EAAQ,KAAK,CACT,SAAU,YACV,MAAOC,EAAQ,OAAO,eACtB,KAAM,gBACN,MAAO,YAEX,CAAC,EACDD,EAAQ,KAAK,CACT,SAAU,YACV,MAAOC,EAAQ,OAAO,aACtB,KAAM,gBACN,MAAO,MACX,CAAC,EACDD,EAAQ,KAAK,CACT,SAAU,YACV,MAAOC,EAAQ,OAAO,WACtB,KAAM,gBACN,MAAO,aACX,CAAC,EACDD,EAAQ,QAAQ,GAGbA,CACX,CACU,oBAA2B,CAGjC,MAAM,mBAAmB,EACzB,IAAIC,EAAUJ,EACV,gBAAc,cAAcK,EAAe,cAAc,IAEzDC,EAAkB,KAAK,CACvB,EAAGC,GAAY,CACX,QAASC,KAASD,EAAS,SACvB,KAAK,gBAAgB,gBAAeH,EAAQ,OAAO,cAAc,EAAE,MAAM,KAAK,CAAE,GAAKG,EAAS,SAASC,CAAK,EAAE,KAAM,SAAS,EAAG,KAAOD,EAAS,SAASC,CAAK,EAAE,KAAM,SAAS,CAAG,CAAC,CAC3L,CAAC,EACDC,EAAgB,KAAK,CACrB,EAAGF,GAAY,CACX,QAASC,KAASD,EAAS,SACvB,KAAK,gBAAgB,gBAAeH,EAAQ,OAAO,YAAY,EAAE,MAAM,KAAK,CAAE,GAAKG,EAAS,SAASC,CAAK,EAAE,KAAM,SAAS,EAAG,KAAOD,EAAS,SAASC,CAAK,EAAE,KAAM,SAAS,CAAG,CAAC,CACzL,CAAC,EACDE,EAAkB,KAAK,CACvB,EAAGH,GAAY,CACX,QAASC,KAASD,EAAS,SACvB,KAAK,gBAAgB,gBAAeH,EAAQ,OAAO,cAAc,EAAE,MAAM,KAAK,CAAE,GAAKG,EAAS,SAASC,CAAK,EAAE,KAAM,SAAS,EAAG,KAAOD,EAAS,SAASC,CAAK,EAAE,KAAM,SAAS,CAAG,CAAC,CAC3L,CAAC,EACDG,EAAgB,KAAK,CACrB,EAAGJ,GAAY,CACX,QAASC,KAASD,EAAS,SACvB,KAAK,gBAAgB,gBAAeH,EAAQ,OAAO,YAAY,EAAE,MAAM,KAAK,CAAE,GAAKG,EAAS,SAASC,CAAK,EAAE,KAAM,SAAS,EAAG,KAAOD,EAAS,SAASC,CAAK,EAAE,KAAM,SAAS,CAAG,CAAC,CAEzL,CAAC,EACDI,EAAuB,KAAK,CAC5B,EAAGL,GAAY,CACX,QAASC,KAASD,EAAS,SACvB,KAAK,gBAAgB,gBAAeH,EAAQ,OAAO,YAAY,EAAE,MAAM,KAAK,CAAE,GAAKG,EAAS,SAASC,CAAK,EAAE,aAAc,SAAS,EAAG,KAAOD,EAAS,SAASC,CAAK,EAAE,aAAc,SAAS,CAAG,CAAC,EACjM,KAAK,gBAAgB,gBAAeJ,EAAQ,OAAO,UAAU,EAAE,MAAM,KAAK,CAAE,GAAKG,EAAS,SAASC,CAAK,EAAE,WAAY,SAAS,EAAG,KAAOD,EAAS,SAASC,CAAK,EAAE,WAAY,SAAS,CAAG,CAAC,CAGnM,CAAC,GAEJ,KAAK,QAAQ,WAAW,YAAY,EAAE,OAAO,EAAK,CAEvD,CAEJ,EAvGaK,EAAAhB,EAAA,qBAAAA,EAANiB,EAAA,CADN,aAAW,cAAc,6CAA6C,GAC1DjB,GDRE,SAARkB,GAA4B,IAC/B,0BAAuB,IAAIC,EAAkB,EAAE,UAAU,CAAC,EAAE,OAAO,CACvE,CAFwBC,EAAAF,EAAA",
  "names": ["import_q", "import_corelib", "import_q", "import_corelib", "EntitledLeaveGrid", "EntitledLeaveColumns", "EntitledLeaveDialog", "EntitledLeaveRow", "EntitledLeaveService", "container", "filters", "thisrow", "PermissionKeys", "OccupationService", "response", "index", "JobGradeService", "DepartmentService", "DivisionService", "EmployeeProfileService", "__name", "__decorateClass", "pageInit", "EntitledLeaveGrid", "__name"]
}
