{
  "version": 3,
  "sources": ["../../../../../../Modules/HumanResource/PayrollSettings/WeeklyPayrollSettings/WeeklyPayrollSettingsPage.ts", "../../../../../../Modules/HumanResource/PayrollSettings/WeeklyPayrollSettings/WeeklyPayrollSettingsGrid.ts", "../../../../../../Modules/HumanResource/PayrollSettings/WeeklyPayrollSettings/WeeklyPayrollSettingsDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\r\nimport { WeeklyPayrollSettingsGrid } from './WeeklyPayrollSettingsGrid';\r\n\r\nexport default function pageInit() {\n    initFullHeightGridPage(new WeeklyPayrollSettingsGrid($('#GridDiv')).element);\n}", "import { Decorators, EntityGrid } from '@serenity-is/corelib';\r\nimport { WeeklyPayrollSettingsColumns, WeeklyPayrollSettingsRow, WeeklyPayrollSettingsService } from '../../../ServerTypes/PayrollSettings';\r\nimport { WeeklyPayrollSettingsDialog } from './WeeklyPayrollSettingsDialog';\r\n\r\n@Decorators.registerClass('HRMSoftware.PayrollSettings.WeeklyPayrollSettingsGrid')\nexport class WeeklyPayrollSettingsGrid extends EntityGrid<WeeklyPayrollSettingsRow, any> {\n    protected getColumnsKey() { return WeeklyPayrollSettingsColumns.columnsKey; }\n    protected getDialogType() { return WeeklyPayrollSettingsDialog; }\n    protected getRowDefinition() { return WeeklyPayrollSettingsRow; }\n    protected getService() { return WeeklyPayrollSettingsService.baseUrl; }\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n}", "import { Criteria, Decorators, EntityDialog } from '@serenity-is/corelib';\r\nimport { EmployeeProfileRow, EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\r\nimport { WeeklyPayrollEmployeeService, WeeklyPayrollSettingsForm, WeeklyPayrollSettingsRow, WeeklyPayrollSettingsService } from '../../../ServerTypes/PayrollSettings';\r\nimport { confirmDialog, notifyInfo, confirm, isEmptyOrNull } from '@serenity-is/corelib/q';\n\r\n@Decorators.registerClass('HRMSoftware.PayrollSettings.WeeklyPayrollSettingsDialog')\nexport class WeeklyPayrollSettingsDialog extends EntityDialog<WeeklyPayrollSettingsRow, any> {\n    protected getFormKey() { return WeeklyPayrollSettingsForm.formKey; }\n    protected getRowDefinition() { return WeeklyPayrollSettingsRow; }\n    protected getService() { return WeeklyPayrollSettingsService.baseUrl; }\n\n    protected form = new WeeklyPayrollSettingsForm(this.idPrefix);\n    public EmployeeData: EmployeeProfileRow[];\n\n    constructor() {\n        super();\n        var criteria: any;\n        EmployeeProfileService.List({\n            Criteria: Criteria.and(criteria, [[EmployeeProfileRow.Fields.Retired], '=', '0'],\n                [[EmployeeProfileRow.Fields.Terminated], '=', '0'],\n                [[EmployeeProfileRow.Fields.Resigned], '=', '0']\n            )\n        }, response => {\n            this.EmployeeData = response.Entities\n        })\n\n\n\n    }\n\n    public dialogOpen() {\n        super.dialogOpen()\n        var self = this\n        $(document).ready(function () {\r\n            $('<button>Add Employee into Group</button>')\r\n                .insertAfter(`#${self.idPrefix}NewAddedEmployee`)  // Insert the button after the specified element\r\n                .on('click', function () {\n                    if (!isEmptyOrNull(self.form.NewAddedEmployee.value)) {\n                        confirmDialog(\n                            `Do you want to add these employees?`,\n                            () => {\n\n                                self.form.EmployeeList.value = `${self.form.EmployeeList.value},${self.form.NewAddedEmployee.value}`\n                                self.form.NewAddedEmployee.value = ''\n                                var itemsToFilter = self.form.EmployeeList.values\n                                self.form.NewAddedEmployee.items = self.form.NewAddedEmployee.items.filter(item => !itemsToFilter.includes(item.id));\n                                \n                            }, {\n                            onNo: () => {\n                                console.log(\"User canceled\");\n                            }\n                        }\n                        )\r\n                    }\n                });\r\n        });\n\n\n    }\n    public SearchCallback(): void {\n        var self = this\n        var OccupationListElement = document.getElementById(this.idPrefix + 'OccupationList');\n        var DepartmentListElement = document.getElementById(this.idPrefix + 'DepartmentList');\n        var DivisionListElement = document.getElementById(this.idPrefix + 'DivisionList');\n        var JobGradeListElement = document.getElementById(this.idPrefix + 'JobGradeList');\n        var SectionListElement = document.getElementById(this.idPrefix + 'SectionList');\n        var CostCentreListElement = document.getElementById(this.idPrefix + 'CostCentreList');\n\n        function parseListFromElement(element) {\n            const valueStr = $(element).val();\n            return valueStr.length\n                ? valueStr.split(',').map(number => parseInt(number, 10))\n                : [];\n        }\n        // Use the utility function for each list\n        const JobGradeList = parseListFromElement(JobGradeListElement);\n        const DivisionList = parseListFromElement(DivisionListElement);\n        const DepartmentList = parseListFromElement(DepartmentListElement);\n        const OccupationList = parseListFromElement(OccupationListElement);\n        const SectionList = parseListFromElement(SectionListElement);\n        const CostCentreList = parseListFromElement(CostCentreListElement);\n\n        // Convert the lists to Sets for faster lookup\n        const jobGradeSet = new Set(JobGradeList);\n        const divisionSet = new Set(DivisionList);\n        const departmentSet = new Set(DepartmentList);\n        const occupationSet = new Set(OccupationList);\n        const sectionSet = new Set(SectionList);\n        const costcentreSet = new Set(CostCentreList);\n\n        var employeeRowList\n        if (self.isNew() == true)\n            employeeRowList = self.form.EmployeeList.value ? self.form.EmployeeList.value.split(',').map(Number) : [];\n        else if (self.isNew() == false)\n            employeeRowList = self.form.NewAddedEmployee.value ? self.form.NewAddedEmployee.value.split(',').map(Number) : [];\n\n        for (let employee of self.EmployeeData) {\n            const { JobGradeID, DivisionID, DepartmentID, OccupationID, SectionID, Id, CostCentreID } = employee;\n            const found =\n                jobGradeSet.has(JobGradeID) ||\n                divisionSet.has(DivisionID) ||\n                departmentSet.has(DepartmentID) ||\n                occupationSet.has(OccupationID) ||\n                sectionSet.has(SectionID) ||\n                costcentreSet.has(CostCentreID) \n\n            if (!found)\n                employeeRowList = employeeRowList.filter(num => num !== Id);\n            else {\n                if (!employeeRowList.includes(Id))\n                    employeeRowList.push(Id);\n            }\n            // Update the buffer value\n        }\n        let finalOutput: number[] = [];\n        for (let i = 0; i < employeeRowList.length; i++) {\n            //if (isEmptyOrNull(employeeGroup)) {\n            finalOutput.push(employeeRowList[i])\n            // }\n        }\n        if (self.isNew() == true)\n            self.form.EmployeeList.value = finalOutput.join(',');\n\n        else if (self.isNew() == false)\n            self.form.NewAddedEmployee.value = finalOutput.join(',');\n\n\n        //const result = data.find(item => item.Id === 12);\n\n    }\n\n    public onDialogOpen() {\n        super.onDialogOpen()\n        var self = this\n\n      \n\n\n        var SectionListElement = document.getElementById(this.idPrefix + 'SectionList');\n        var OccupationListElement = document.getElementById(this.idPrefix + 'OccupationList');\n        var DepartmentListElement = document.getElementById(this.idPrefix + 'DepartmentList');\n        var DivisionListElement = document.getElementById(this.idPrefix + 'DivisionList');\n        var JobGradeListElement = document.getElementById(this.idPrefix + 'JobGradeList');\n        var CostCentreListElement = document.getElementById(this.idPrefix + 'CostCentreList');\n        var EmployeeListElement = document.getElementById(this.idPrefix + 'EmployeeList');\n        var EmployeeListValues = this.form.EmployeeList.values\n        function getDifference(list1: string[], list2: string[]): string[] {\r\n            return list1.filter(char => !list2.includes(char));\r\n        }\n        $(EmployeeListElement).on('change', async function () {\n            var EmployeeToAddBack = getDifference(EmployeeListValues, self.form.EmployeeList.values)\n            for (let i = 0; i < EmployeeToAddBack.length; i++) {\n                var haha = self.EmployeeData.filter(item => item.Id == parseInt(EmployeeToAddBack[i]))\n                self.form.NewAddedEmployee.addOption(haha[0].Id.toString(), haha[0].EmployeeID)\n            }\n        })\n        $(`#s2id_${this.idPrefix}EmployeeList`).on('click', async function (e) {\n            $(`.select2-drop`).hide()\n            return\n        })\n        WeeklyPayrollEmployeeService.List({}, response => {\n            let filteredItems = this.form.NewAddedEmployee.items\n            for (var res in response.Entities) \n                filteredItems = filteredItems.filter(item => parseInt(item.id) !== response.Entities[res].EmployeeRowId);\n            this.form.NewAddedEmployee.items = filteredItems\n        })\n\n\n        $(CostCentreListElement).on('change', async function () {\n            self.SearchCallback()\n            //  self.SearchEmployeeCallback();\n\n        })\n        $(OccupationListElement).on('change', async function () {\n            self.SearchCallback()\n            //  self.SearchEmployeeCallback();\n\n        })\n        $(DivisionListElement).on('change', async function () {\n            self.SearchCallback();\n            // self.SearchEmployeeCallback();\n\n        })\n        $(JobGradeListElement).on('change', async function () {\n            self.SearchCallback();\n            //self.SearchEmployeeCallback();\n        })\n        $(DepartmentListElement).on('change', async function () {\n            self.SearchCallback();\n            //self.SearchEmployeeCallback();\n        })\n        $(SectionListElement).on('change', async function () {\n            self.SearchCallback();\n            //self.SearchEmployeeCallback();\n\n        })\n      \n\n\n\n\n    }\n}"],
  "mappings": "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",
  "names": ["import_q", "import_corelib", "import_corelib", "import_q", "WeeklyPayrollSettingsDialog", "WeeklyPayrollSettingsForm", "criteria", "EmployeeProfileService", "EmployeeProfileRow", "response", "WeeklyPayrollSettingsRow", "WeeklyPayrollSettingsService", "self", "itemsToFilter", "item", "OccupationListElement", "DepartmentListElement", "DivisionListElement", "JobGradeListElement", "SectionListElement", "CostCentreListElement", "parseListFromElement", "element", "valueStr", "number", "__name", "JobGradeList", "DivisionList", "DepartmentList", "OccupationList", "SectionList", "CostCentreList", "jobGradeSet", "divisionSet", "departmentSet", "occupationSet", "sectionSet", "costcentreSet", "employeeRowList", "employee", "JobGradeID", "DivisionID", "DepartmentID", "OccupationID", "SectionID", "Id", "CostCentreID", "num", "finalOutput", "i", "EmployeeListElement", "EmployeeListValues", "getDifference", "list1", "list2", "char", "__async", "EmployeeToAddBack", "haha", "e", "WeeklyPayrollEmployeeService", "filteredItems", "res", "__decorateClass", "WeeklyPayrollSettingsGrid", "WeeklyPayrollSettingsColumns", "WeeklyPayrollSettingsDialog", "WeeklyPayrollSettingsRow", "WeeklyPayrollSettingsService", "container", "__name", "__decorateClass", "pageInit", "WeeklyPayrollSettingsGrid", "__name"]
}
