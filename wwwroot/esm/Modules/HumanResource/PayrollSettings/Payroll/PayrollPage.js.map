{
  "version": 3,
  "sources": ["../../../../../../Modules/HumanResource/PayrollSettings/Payroll/PayrollPage.ts", "../../../../../../Modules/HumanResource/PayrollSettings/Payroll/PayrollGrid.ts"],
  "sourcesContent": ["import { initFullHeightGridPage } from '@serenity-is/corelib/q';\nimport { EisSubjectionService, EpfSubjectionService, HrdfSubjectionService, PcbSubjectionService, SocsoSubjectionService } from '../../ServerTypes/PayrollSettings';\nimport { EisSubjectionGrid } from '../EisSubjection/EisSubjectionGrid';\nimport { EpfSubjectionGrid } from '../EpfSubjection/EpfSubjectionGrid';\nimport { HrdfSubjectionGrid } from '../HrdfSubjection/HrdfSubjectionGrid';\nimport { PcbSubjectionGrid } from '../PcbSubjection/PcbSubjectionGrid';\nimport { SocsoSubjectionGrid } from '../SocsoSubjection/SocsoSubjectionGrid';\nimport { PayrollGrid } from './PayrollGrid';\nfunction CompleteSetting(string)\n{\n    const mainElement = document.createElement(\"main\");;\n    mainElement.id = \"main-content\";\n    mainElement.className = \"main-container\";\n    mainElement.innerHTML = \"<h1>This page is used to create Employee Payrolls</h1><p>Please initialise \" + string+\" to start using this feature.</p>\";\n    $('#GridDiv').append(mainElement)\n}\n\nexport default function pageInit()\n{\n    /*\n    PcbSubjectionService.List({\n    }, response => {\n        if (response.TotalCount)\n            EpfSubjectionService.List({\n            }, response => {\n                if (response.TotalCount)\n                    EisSubjectionService.List({\n                    }, response => {\n                        if (response.TotalCount)\n                            HrdfSubjectionService.List({\n                            }, response => {\n                                if (response.TotalCount) \n                                    SocsoSubjectionService.List({\n                                    }, response => {\n                                        if (response.TotalCount) \n                                            initFullHeightGridPage(new PayrollGrid($('#GridDiv')).element);\n\n                                        else\n                                            initFullHeightGridPage(new SocsoSubjectionGrid($('#GridDiv')).element);\n\n                                    })\n                                else\n                                    initFullHeightGridPage(new HrdfSubjectionGrid($('#GridDiv')).element);\n\n                            })\n                        else\n                            initFullHeightGridPage(new EisSubjectionGrid($('#GridDiv')).element);\n                    })\n                else\n                    initFullHeightGridPage(new EpfSubjectionGrid($('#GridDiv')).element);\n            })\n        else\n            initFullHeightGridPage(new PcbSubjectionGrid($('#GridDiv')).element);\n    })\n*/\n\n    initFullHeightGridPage(new PayrollGrid($('#GridDiv')).element);\n\n}", "import { Criteria, Decorators, EntityGrid, IntegerEditor, ListResponse, LookupEditor, StringEditor, GridRowSelectionMixin } from '@serenity-is/corelib';\nimport { EisSubjectionService, EpfSubjectionService, HrdfSubjectionService, PayrollColumns, PayrollRow, PayrollService, PcbSubjectionService, SocsoSubjectionService } from '../../../ServerTypes/PayrollSettings';\nimport { PayrollDialog } from './PayrollDialog';\nimport { confirmDialog, confirm, serviceCall, notifySuccess, notifyError, notifyInfo } from '@serenity-is/corelib/q';\nimport { EpfSubjectionDialog } from '../EpfSubjection/EpfSubjectionDialog';\nimport { EisSubjectionDialog } from '../EisSubjection/EisSubjectionDialog';\nimport { HrdfSubjectionDialog } from '../HrdfSubjection/HrdfSubjectionDialog';\nimport { PcbSubjectionDialog } from '../PcbSubjection/PcbSubjectionDialog';\nimport { SocsoSubjectionDialog } from '../SocsoSubjection/SocsoSubjectionDialog';\nimport { PayrollWizardDialog } from '../PayrollWizard/PayrollWizardDialog';\nimport { PayrollGeneratingWizardDialog } from '../PayrollGeneratingWizard/PayrollGeneratingWizardDialog';\nimport { TextEditor } from '@serenity-is/sleekgrid';\nimport { OccupationService, DepartmentService, JobGradeService, DivisionService } from '../../../ServerTypes/OrganisationHierarchy';\nimport { PermissionKeys } from '../../../ServerTypes/Administration';\nimport { Authorization, isEmptyOrNull } from '@serenity-is/corelib/q';\nimport { Select2Editor, QuickFilter, Widget } from '@serenity-is/corelib';\nimport { EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { MasterCostCentreService } from '../../../ServerTypes/Master';\n\n@Decorators.registerClass('HRMSoftware.PayrollSettings.PayrollGrid')\nexport class PayrollGrid extends EntityGrid<PayrollRow, any> {\n    protected getColumnsKey() { return PayrollColumns.columnsKey; }\n    protected getDialogType() { return PayrollDialog; }\n    protected getRowDefinition() { return PayrollRow; }\n    protected getService() { return PayrollService.baseUrl; }\n    private rowSelection: GridRowSelectionMixin;\n    protected getAddButtonCaption() {\n        return \"Create Employee Payroll\";\n    }\n    constructor(container: JQuery) {\n        super(container);\n    }\n    protected getQuickFilters(): QuickFilter<Widget<any>, any>[] {\n        //Gets the Filters defined in the Columns or in parent grids.\n        let filters = super.getQuickFilters();\n       \n        // console.log(filters[3].type = Select2Editor)\n        if (Authorization.hasPermission(PermissionKeys.HumanResources)) {\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: PayrollRow.Fields.CostCentreName,\n                type: Select2Editor,\n\n                title: \"Cost Centre\",\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: PayrollRow.Fields.OccupationName,\n                type: Select2Editor,\n                title: \"Occupation\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: PayrollRow.Fields.JobGradeName,\n                type: Select2Editor,\n                title: \"Job Grade\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: PayrollRow.Fields.DivisionName,\n                type: Select2Editor,\n                title: \"Division\",\n\n            });\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: PayrollRow.Fields.DepartmentName,\n                type: Select2Editor,\n                title: \"Department\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: PayrollRow.Fields.EmployeeName,\n                type: Select2Editor,\n                title: \"Name\",\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: PayrollRow.Fields.EmployeeId,\n                type: Select2Editor,\n                title: \"Employee ID\",\n            });\n            filters.reverse()\n\n       }\n        filters.push({\n            cssClass: \"hidden-xs\",\n            field: PayrollRow.Fields.PayMonth,\n            type: Select2Editor,\n            title: \"Pay Month\",\n        });\n\n\n        filters.push({\n            cssClass: \"hidden-xs\",\n            field: PayrollRow.Fields.PayYear,\n            type: Select2Editor,\n            title: \"Pay Year\",\n        });\n        return filters;\n    }\n    protected createQuickFilters(): void {\n        // let base class to create quick filters first\n        const months: string[] = [\n            'January',   // 0\n            'February',  // 1\n            'March',     // 2\n            'April',     // 3\n            'May',       // 4\n            'June',      // 5\n            'July',      // 6\n            'August',    // 7\n            'September', // 8\n            'October',   // 9\n            'November',  // 10\n            'December'   // 11\n        ];\n\n            super.createQuickFilters();\n\n        if (Authorization.hasPermission(PermissionKeys.HumanResources)) {\n          \n            OccupationService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, PayrollRow.Fields.OccupationName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            JobGradeService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, PayrollRow.Fields.JobGradeName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            DepartmentService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, PayrollRow.Fields.DepartmentName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            DivisionService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, PayrollRow.Fields.DivisionName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n\n            })\n            EmployeeProfileService.List({\n            }, response => {\n                for (var index in response.Entities) {\n                    this.findQuickFilter(Select2Editor, PayrollRow.Fields.EmployeeName).items.push({ id: (response.Entities[index].EmployeeName).toString(), text: (response.Entities[index].EmployeeName).toString(), })\n                    this.findQuickFilter(Select2Editor, PayrollRow.Fields.EmployeeId).items.push({ id: (response.Entities[index].EmployeeID).toString(), text: (response.Entities[index].EmployeeID).toString(), })\n\n                }\n            })\n            MasterCostCentreService.List({\n            }, response => {\n                for (var index in response.Entities) {\n                    this.findQuickFilter(Select2Editor, PayrollRow.Fields.CostCentreName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n\n                }\n            })\n\n        }\n        else\n            this.toolbar.findButton(\"add-button\").toggle(false);\n\n        for (var index in months)\n            this.findQuickFilter(Select2Editor, PayrollRow.Fields.PayMonth).items.push({ id: (index).toString(), text: (months[index]).toString(), })\n        PayrollService.List({\n        }, response => {\n            let YearList = [];\n            for (var index in response.Entities)\n                if (YearList.indexOf(response.Entities[index].PayYear) == -1)\n                    YearList.push(response.Entities[index].PayYear)\n            for (var index in YearList)\n                this.findQuickFilter(Select2Editor, PayrollRow.Fields.PayYear).items.push({ id: (YearList[index]).toString(), text: (YearList[index]).toString(), })\n        })\n    }\n  \n\n    protected onViewProcessData(response: ListResponse<PayrollRow>) {\n        console.log(this.rowSelection.getSelectedKeys());\n\n        //console.log('haha')\n        response = super.onViewProcessData(response);\n        //console.log(this.toolbar.findButton(\"add-button\").toggle(false))\n       // console.log($(this.toolbar.findButton(\"add-button\")).attr(\"style\"))\n\n        if (Authorization.hasPermission(PermissionKeys.HumanResources)) {\n            var cur = response\n            if (!isEmptyOrNull($(this.toolbar.findButton(\"add-button\")).attr(\"style\"))) {\n                var terminateButtons = document.querySelectorAll('.text-bg-warning')\n                terminateButtons.forEach(function (element) {\n                    $(element).hide()\n                });\n                var resignButtons = document.querySelectorAll('.text-bg-success')\n                resignButtons.forEach(function (element) {\n                    $(element).hide()\n                });\n\n            }\n\n\n            for (var index in response.Entities)\n            {\n                if (isEmptyOrNull(response.Entities[index].PayslipPath))\n                {\n                    var queryString = \"PayrollRowId=\" + encodeURIComponent(response.Entities[index].Id)\n                    var url = window.location.origin + '/PayrollSettings/Payroll/PdfSharpConvert?' + queryString\n                    var xhr = new XMLHttpRequest();\n                    xhr.open('GET', url, true);\n                    xhr.send() \n\n                    PayrollService.Update({\n                        EntityId: response.Entities[index].Id,\n                        Entity:\n                        {\n                            \"PayslipPath\": 'Payroll\\\\Payslip\\\\' + response.Entities[index].Id + '.pdf'\n                        },\n                    });\n                    \n                }\n            }\n\n            serviceCall<ListResponse<any>>({\n                service: PayrollService.baseUrl + '/AskGenerationOfPayslip',\n                method: \"GET\",\n                data: {\n                },\n                async: false,\n                onSuccess: (response) => {\n                    if (response[0] == 1) {\n                        const months: string[] = [\n                            'January',   // 0\n                            'February',  // 1\n                            'March',     // 2\n                            'April',     // 3\n                            'May',       // 4\n                            'June',      // 5\n                            'July',      // 6\n                            'August',    // 7\n                            'September', // 8\n                            'October',   // 9\n                            'November',  // 10\n                            'December'   // 11\n                        ];\n                        var month = response[1]\n                        var year = response[2]\n\n                        confirm(\n                            // here we demonstrate how you can detect which button user has clicked\n                            // second parameter is Yes handler and it is called only when user clicks Yes.\n                            // third parameter has some additional options, that you should only use when needed            \n                            \"Do you want to generate payslip for \" + response[2] + ' ' + months[response[1]],\n                            () => {\n\n                                serviceCall<any>({\n                                    service: PayrollService.baseUrl + '/LogGeneration',\n                                    method: \"GET\",\n                                    data: {\n                                        \"Month\": month,\n                                        \"Year\": year\n                                    },\n                                    async: false,\n                                    onSuccess: (response) => {\n                                        var GeneratingWizard = new PayrollGeneratingWizardDialog()\n                                        GeneratingWizard.dialogOpen()\n                                        GeneratingWizard.element.on(\"dialogclose\", function () {\n                                            location.reload()\n                                        })\n                                    },\n                                    onError: (error) => {\n                                        console.log(error.Error);\n                                    }\n                                })\n                            }, {\n                            onNo: () => {\n\n                                serviceCall<any>({\n                                    service: PayrollService.baseUrl + '/LogGeneration',\n                                    method: \"GET\",\n                                    data: {\n                                        \"Month\": month,\n                                        \"Year\": year\n                                    },\n                                    async: false,\n                                    onSuccess: (response) => {\n                                    },\n                                    onError: (error) => {\n                                        console.log(error.Error);\n                                    }\n                                })\n\n                                notifyInfo(\"You can run the payslip generation wizard anytime\")\n                            }\n                            ,\n                        });\n                    }\n                },\n                onError: (error) => {\n                    console.log(error.Error);\n                }\n\n            })\n            this.toolbar.findButton(\"column-picker-button\").toggle(false);\n        }\n        return cur;\n\n    }\n    protected getButtons() {\n        var buttons = super.getButtons();\n        var self = this\n        if (Authorization.hasPermission(PermissionKeys.HumanResources)) {\n            EpfSubjectionService.List({\n            }, response => {\n                if (response.Entities.length > 0) {\n                    EisSubjectionService.List({\n                    }, response => {\n                        if (response.Entities.length > 0) {\n                            HrdfSubjectionService.List({\n                            }, response => {\n                                if (response.Entities.length > 0) {\n                                    EisSubjectionService.List({\n                                    }, response => {\n                                        if (response.Entities.length > 0) {\n                                            PcbSubjectionService.List({\n                                            }, response => {\n                                                if (response.Entities.length <= 0) {\n                                                    this.toolbar.findButton(\"add-button\").toggle(false);\n                                                    notifyError(\"Please complete PCB subjection form before using payslip function\")\n                                                }\n                                            });\n                                        }\n                                        else {\n                                            this.toolbar.findButton(\"add-button\").toggle(false);\n                                            notifyError(\"Please complete EIS subjection form before using payslip function\")\n\n                                        }\n                                    });\n                                }\n                                else {\n                                    notifyError(\"Please complete HRDF subjection form before using payslip function\")\n                                    this.toolbar.findButton(\"add-button\").toggle(false);\n                                }\n                            });\n                        }\n                        else {\n                            notifyError(\"Please complete EIS subjection form before using payslip function\")\n                            this.toolbar.findButton(\"add-button\").toggle(false);\n                        }\n                    });\n                }\n                else {\n                    notifyError(\"Please complete EPF subjection form before using payslip function\")\n                    this.toolbar.findButton(\"add-button\").toggle(false);\n\n                }\n            });\n            buttons.push({\n                title: 'Payroll Generator',\n                cssClass: 'fas fa-hat-wizard text-bg-success',\n                onClick: e => {\n                    confirm(\n                        \"Do you want to run payslip generating wizard\",\n                        () => {\n                            var GeneratingWizard = new PayrollGeneratingWizardDialog()\n                            GeneratingWizard.dialogOpen()\n                            GeneratingWizard.element.on(\"dialogclose\", function () {\n                                //self.refresh()\n                                location.reload()\n\n                            })\n                        }\n                    )\n                },\n                separator: false\n            });\n            buttons.push({\n                title: 'Payroll Download',\n                cssClass: 'fas fa-hat-wizard text-bg-warning',\n                onClick: e => {\n                    confirm(\n                        \"Do you want to run payslip download wizard\",\n                        () => {\n                            var DownloadWizard = new PayrollWizardDialog(null, null, null)\n                            DownloadWizard.dialogOpen()\n                           \n                        }\n\n                    )\n\n                },\n                separator: true\n            });\n            buttons.push({\n                title: 'Payroll Batch Delete',\n                cssClass: 'fas fa-hat-wizard text-bg-danger',\n                onClick: e => {\n                    confirm(\n                            \"Do you want to delete all selected payslips?\",\n                        () => {\n\n                            // Create an array of promises for each delete operation\n                            let deletePromises = [];\n\n                            $('.select-row-checkbox:checked').each(function () {\n                                let dataId = $(this).data('id');\n\n                                // Add each delete operation promise to the array\n                                let deletePromise = PayrollService.Delete({\n                                    EntityId: dataId,\n                                }).then(() => {\n                                    console.log('Deleted Data ID:', dataId);\n                                }).catch(error => {\n                                    console.error('Error deleting Data ID:', dataId, error);\n                                });\n\n                                // Push the promise to the array\n                                deletePromises.push(deletePromise);\n                            });\n\n                            // Wait for all delete operations to complete before reloading the page\n                            Promise.all(deletePromises)\n                                .then(() => {\n                                    // All delete operations are completed, now reload the page\n                                    location.reload();\n                                })\n                                .catch(error => {\n                                    // Handle any error that occurred during delete operations\n                                    console.error('Error in delete operations:', error);\n                                });\n                            \n                        }\n                    )\n                },\n                separator: true\n            });\n\n            buttons.push({\n                title: 'EPF Subjection',\n                cssClass: 'apply-changes-button',\n                onClick: e => {\n                    confirm(\n                        \"Do you want to set EPF Subjection\",\n                        () => {\n                            var EpfDlg = new EpfSubjectionDialog()\n                            EpfSubjectionService.List({\n                            }, response => {\n                                if (response.Entities.length > 0)\n                                    EpfDlg.loadByIdAndOpenDialog(response.Entities[0].Id)\n\n                                else\n                                    EpfDlg.dialogOpen()\n                            });\n\n                            EpfDlg.element.on(\"dialogclose\", function () {\n\n                     \n\n                            })\n                        }\n\n                    )\n\n                },\n                separator: true\n            });\n            buttons.push({\n                title: 'EIS Subjection',\n                cssClass: 'apply-changes-button',\n                onClick: e => {\n                    confirm(\n                        \"Do you want to set EPF Subjection\",\n                        () => {\n                            var EisDlg = new EisSubjectionDialog()\n\n                            EisSubjectionService.List({\n                            }, response => {\n                                if (response.Entities.length > 0)\n                                    EisDlg.loadByIdAndOpenDialog(response.Entities[0].Id)\n\n                                else\n                                    EisDlg.dialogOpen()\n                            });\n\n                            EisDlg.element.on(\"dialogclose\", function () {\n                            })\n\n                        }\n\n                    )\n\n                },\n                separator: true\n            });\n            buttons.push({\n                title: 'HRDF Subjection',\n                cssClass: 'apply-changes-button',\n                onClick: e => {\n                    confirm(\n                        \"Do you want to set HRDF Subjection\",\n                        () => {\n                            var HrdfDlg = new HrdfSubjectionDialog()\n\n                            HrdfSubjectionService.List({\n                            }, response => {\n                                if (response.Entities.length > 0)\n                                    HrdfDlg.loadByIdAndOpenDialog(response.Entities[0].Id)\n\n                                else\n                                    HrdfDlg.dialogOpen()\n                            });\n\n\n                            HrdfDlg.element.on(\"dialogclose\", function () {\n                            })\n                        }\n\n                    )\n\n                },\n                separator: true\n            });\n            buttons.push({\n                title: 'PCB Subjection',\n                cssClass: 'apply-changes-button',\n                onClick: e => {\n                    confirm(\n                        \"Do you want to set PCB Subjection\",\n                        () => {\n                            var PcbDlg = new PcbSubjectionDialog()\n\n                            PcbSubjectionService.List({\n                            }, response => {\n                                if (response.Entities.length > 0)\n                                    PcbDlg.loadByIdAndOpenDialog(response.Entities[0].Id)\n\n                                else\n                                    PcbDlg.dialogOpen()\n                            });\n\n                            PcbDlg.element.on(\"dialogclose\", function () {\n                            })\n\n                        }\n\n                    )\n\n                },\n                separator: true\n            });\n            buttons.push({\n                title: 'Socso Subjection',\n                cssClass: 'apply-changes-button',\n                onClick: e => {\n                    confirm(\n                        \"Do you want to set Socso Subjection\",\n                        () => {\n                            var SocsoDlg = new SocsoSubjectionDialog()\n\n                            SocsoSubjectionService.List({\n                            }, response => {\n                                if (response.Entities.length > 0)\n                                    SocsoDlg.loadByIdAndOpenDialog(response.Entities[0].Id)\n\n                                else\n                                    SocsoDlg.dialogOpen()\n                            });\n                            SocsoDlg.element.on(\"dialogclose\", function () {\n                            })\n\n\n                        }\n\n                    )\n\n                },\n                separator: true\n            });\n        }\n        return buttons;\n    }\n\n\n\n    protected onClick(e: JQueryEventObject, row: number, cell: number) {\n        super.onClick(e, row, cell);\n        if (e.isDefaultPrevented())\n            return;\n\n        // get reference to current item\n        var item = this.itemAt(row);\n        // get reference to clicked element\n        var target = $(e.target);\n        if (target.parent().hasClass('inline-action'))\n            target = target.parent();\n\n\n\n        if (target.hasClass('download-payroll')) {\n            confirm(\"Do you want to download Payroll?\", () => {\n\n                var PayrollId = item.Id;\n                var DateBuffer = item.PayDate;\n                var date = new Date(DateBuffer);\n\n                var MonthString = date.toLocaleString('en-US', { month: 'long' });\n                var YearString = date.getFullYear().toString();\n\n                var EmployeeRowId = item.EmployeeRowId\n                EmployeeProfileService.Retrieve({\n                    EntityId: EmployeeRowId\n                }, response => {\n                    var Name = response.Entity.EmployeeName.replace(/\\s/g, '');\n\n                    var queryString = \"PayrollRowId=\" + encodeURIComponent(PayrollId)\n                    var url = window.location.origin + '/PayrollSettings/Payroll/PdfSharpConvert?' + queryString\n                    var xhr = new XMLHttpRequest();\n                    xhr.open('GET', url, true);\n                    xhr.responseType = 'blob';\n                    xhr.onload = function () {\n                        if (xhr.status === 200)\n                        {\n                            var blob = xhr.response;\n\n                            const url = window.URL.createObjectURL(blob);\n                            const a = document.createElement('a');\n                            a.style.display = 'none';\n                            a.href = url;\n                            a.download = Name + \"Payslip\" + MonthString+ YearString+ '.pdf';\n                            a.click();\n                          \n\n                            notifySuccess(\"Payslip downloaded\")\n                        } else {\n                            notifyError('Error encounter when downloading Payslip Pdf');\n                        }\n                    };\n                    xhr.send() \n\n\n\n                });\n                \n\n            });\n        }\n\n\n\n\n    }\n\n    protected createToolbarExtensions() { //creates the selector\n        super.createToolbarExtensions();\n        this.rowSelection = new GridRowSelectionMixin(this, {\n            selectable: (item: PayrollRow) => {\n                console.log(item)\n                return true;\n            }\n        });\n\n\n    }\n    \n    protected getColumns() {\n\n        var columns = super.getColumns();\n        columns.splice(2, 0, {\n            field: 'Download Payroll',\n            name: '',\n            format: ctx => {\n\n                var DownloadPayroll = '<a class=\"inline-action download-payroll\" title=\"Download Payroll pdf\">' +\n                    '<i class=\"fa fa-download text-yellow\"></i></a>';\n                return DownloadPayroll\n\n\n            },\n            width: 12,\n            minWidth: 12,\n            maxWidth: 12\n        });\n        columns.splice(0, 0, {\n            name: '',\n            field: '',\n\n            cssClass : 'select-row-checkbox',\n            format: (ctx) => {\n                return `<input type=\"checkbox\" class=\"select-row-checkbox\" data-id=\"${ctx.item.Id}\" />`;\n            },\n            width: 40\n        });\n        //console.log(this.rowSelection.getSelectedKeys());\n\n        // Add a checkbox column for multi-selection\n        return columns;\n    }\n\n}"],
  "mappings": "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",
  "names": ["import_q", "import_corelib", "import_q", "import_q", "import_corelib", "PayrollGrid", "container", "PayrollColumns", "PayrollDialog", "PayrollRow", "PayrollService", "filters", "PermissionKeys", "months", "OccupationService", "response", "index", "JobGradeService", "DepartmentService", "DivisionService", "EmployeeProfileService", "MasterCostCentreService", "YearList", "cur", "terminateButtons", "element", "resignButtons", "queryString", "url", "xhr", "month", "year", "GeneratingWizard", "PayrollGeneratingWizardDialog", "error", "buttons", "self", "EpfSubjectionService", "EisSubjectionService", "HrdfSubjectionService", "PcbSubjectionService", "e", "DownloadWizard", "PayrollWizardDialog", "deletePromises", "dataId", "deletePromise", "EpfDlg", "EpfSubjectionDialog", "EisDlg", "EisSubjectionDialog", "HrdfDlg", "HrdfSubjectionDialog", "PcbDlg", "PcbSubjectionDialog", "SocsoDlg", "SocsoSubjectionDialog", "SocsoSubjectionService", "row", "cell", "item", "target", "PayrollId", "DateBuffer", "date", "MonthString", "YearString", "EmployeeRowId", "Name", "blob", "a", "columns", "ctx", "DownloadPayroll", "__name", "__decorateClass", "pageInit", "PayrollGrid", "__name"]
}
