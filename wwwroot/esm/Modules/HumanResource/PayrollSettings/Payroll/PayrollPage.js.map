{
  "version": 3,
  "sources": ["../../../../../../Modules/HumanResource/PayrollSettings/Payroll/PayrollPage.ts", "../../../../../../Modules/HumanResource/PayrollSettings/Payroll/PayrollGrid.ts", "../../../../../../Modules/HumanResource/PayrollSettings/Payroll/TextDownloadingWizardDialog.ts"],
  "sourcesContent": ["import { initFullHeightGridPage } from '@serenity-is/corelib/q';\nimport { EisSubjectionService, EpfSubjectionService, HrdfSubjectionService, PcbSubjectionService, SocsoSubjectionService } from '../../ServerTypes/PayrollSettings';\nimport { EisSubjectionGrid } from '../EisSubjection/EisSubjectionGrid';\nimport { EpfSubjectionGrid } from '../EpfSubjection/EpfSubjectionGrid';\nimport { HrdfSubjectionGrid } from '../HrdfSubjection/HrdfSubjectionGrid';\nimport { PcbSubjectionGrid } from '../PcbSubjection/PcbSubjectionGrid';\nimport { SocsoSubjectionGrid } from '../SocsoSubjection/SocsoSubjectionGrid';\nimport { PayrollGrid } from './PayrollGrid';\nfunction CompleteSetting(string)\n{\n    const mainElement = document.createElement(\"main\");;\n    mainElement.id = \"main-content\";\n    mainElement.className = \"main-container\";\n    mainElement.innerHTML = \"<h1>This page is used to create Employee Payrolls</h1><p>Please initialise \" + string+\" to start using this feature.</p>\";\n    $('#GridDiv').append(mainElement)\n}\n\nexport default function pageInit()\n{\n    /*\n    PcbSubjectionService.List({\n    }, response => {\n        if (response.TotalCount)\n            EpfSubjectionService.List({\n            }, response => {\n                if (response.TotalCount)\n                    EisSubjectionService.List({\n                    }, response => {\n                        if (response.TotalCount)\n                            HrdfSubjectionService.List({\n                            }, response => {\n                                if (response.TotalCount) \n                                    SocsoSubjectionService.List({\n                                    }, response => {\n                                        if (response.TotalCount) \n                                            initFullHeightGridPage(new PayrollGrid($('#GridDiv')).element);\n\n                                        else\n                                            initFullHeightGridPage(new SocsoSubjectionGrid($('#GridDiv')).element);\n\n                                    })\n                                else\n                                    initFullHeightGridPage(new HrdfSubjectionGrid($('#GridDiv')).element);\n\n                            })\n                        else\n                            initFullHeightGridPage(new EisSubjectionGrid($('#GridDiv')).element);\n                    })\n                else\n                    initFullHeightGridPage(new EpfSubjectionGrid($('#GridDiv')).element);\n            })\n        else\n            initFullHeightGridPage(new PcbSubjectionGrid($('#GridDiv')).element);\n    })\n*/\n\n    initFullHeightGridPage(new PayrollGrid($('#GridDiv')).element);\n\n}", "import { Criteria, Decorators, EntityGrid, IntegerEditor, ListResponse, LookupEditor, StringEditor, GridRowSelectionMixin } from '@serenity-is/corelib';\nimport { EisSubjectionService, EpfSubjectionService, HrdfSubjectionService, PayrollColumns, PayrollRow, PayrollService, PayrollSettingsService, PcbSubjectionService, SocsoSubjectionService } from '../../../ServerTypes/PayrollSettings';\nimport { PayrollDialog } from './PayrollDialog';\nimport { confirmDialog, confirm, serviceCall, notifySuccess, notifyError, notifyInfo } from '@serenity-is/corelib/q';\nimport { EpfSubjectionDialog } from '../EpfSubjection/EpfSubjectionDialog';\nimport { EisSubjectionDialog } from '../EisSubjection/EisSubjectionDialog';\nimport { HrdfSubjectionDialog } from '../HrdfSubjection/HrdfSubjectionDialog';\nimport { PcbSubjectionDialog } from '../PcbSubjection/PcbSubjectionDialog';\nimport { SocsoSubjectionDialog } from '../SocsoSubjection/SocsoSubjectionDialog';\nimport { PayrollWizardDialog } from '../PayrollWizard/PayrollWizardDialog';\nimport { PayrollGeneratingWizardDialog } from '../PayrollGeneratingWizard/PayrollGeneratingWizardDialog';\nimport { TextEditor } from '@serenity-is/sleekgrid';\nimport { OccupationService, DepartmentService, JobGradeService, DivisionService, SectionService } from '../../../ServerTypes/OrganisationHierarchy';\nimport { PermissionKeys } from '../../../ServerTypes/Administration';\nimport { Authorization, isEmptyOrNull } from '@serenity-is/corelib/q';\nimport { Select2Editor, QuickFilter, Widget } from '@serenity-is/corelib';\nimport { EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { MasterCostCentreService } from '../../../ServerTypes/Master';\nimport { TextDownloadingWizardDialog } from './TextDownloadingWizardDialog';\r\nimport { PayrollSettingsDialog } from '../PayrollSettings/PayrollSettingsDialog';\r\n\n@Decorators.registerClass('HRMSoftware.PayrollSettings.PayrollGrid')\nexport class PayrollGrid extends EntityGrid<PayrollRow, any> {\n    protected getColumnsKey() { return PayrollColumns.columnsKey; }\n    protected getDialogType() { return PayrollDialog; }\n    protected getRowDefinition() { return PayrollRow; }\n    protected getService() { return PayrollService.baseUrl; }\n    private rowSelection: GridRowSelectionMixin;\n    protected getAddButtonCaption() {\n        return \"Create Employee Payroll\";\n    }\n    constructor(container: JQuery) {\n        super(container);\n    }\n    protected getQuickFilters(): QuickFilter<Widget<any>, any>[] {\n        //Gets the Filters defined in the Columns or in parent grids.\n        let filters = super.getQuickFilters();\n        \n        // console.log(filters[3].type = Select2Editor)\n        if (Authorization.hasPermission(PermissionKeys.HumanResources)) {\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: PayrollRow.Fields.CostCentreName,\n                type: Select2Editor,\n\n                title: \"Cost Centre\",\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: PayrollRow.Fields.OccupationName,\n                type: Select2Editor,\n                title: \"Occupation\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: PayrollRow.Fields.JobGradeName,\n                type: Select2Editor,\n                title: \"Job Grade\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: PayrollRow.Fields.DivisionName,\n                type: Select2Editor,\n                title: \"Division\",\n\n            });\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: PayrollRow.Fields.DepartmentName,\n                type: Select2Editor,\n                title: \"Department\",\n\n            });\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: PayrollRow.Fields.SectionName,\n                type: Select2Editor,\n                title: \"Section\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: PayrollRow.Fields.EmployeeName,\n                type: Select2Editor,\n                title: \"Name\",\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: PayrollRow.Fields.EmployeeId,\n                type: Select2Editor,\n                title: \"Employee ID\",\n            });\n            filters.reverse()\n\n       }\n        filters.push({\n            cssClass: \"hidden-xs\",\n            field: PayrollRow.Fields.PayMonth,\n            type: Select2Editor,\n            title: \"Pay Month\",\n        });\n\n\n        filters.push({\n            cssClass: \"hidden-xs\",\n            field: PayrollRow.Fields.PayYear,\n            type: Select2Editor,\n            title: \"Pay Year\",\n        });\n        return filters;\n    }\n    protected createQuickFilters(): void {\n        // let base class to create quick filters first\n        const months: string[] = [\n            'January',   // 0\n            'February',  // 1\n            'March',     // 2\n            'April',     // 3\n            'May',       // 4\n            'June',      // 5\n            'July',      // 6\n            'August',    // 7\n            'September', // 8\n            'October',   // 9\n            'November',  // 10\n            'December'   // 11\n        ];\n\n            super.createQuickFilters();\n\n        if (Authorization.hasPermission(PermissionKeys.HumanResources))\n        {\n            OccupationService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, PayrollRow.Fields.OccupationName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            JobGradeService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, PayrollRow.Fields.JobGradeName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            DepartmentService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, PayrollRow.Fields.DepartmentName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            DivisionService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, PayrollRow.Fields.DivisionName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n\n            })\n            SectionService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, PayrollRow.Fields.SectionName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n\n            })\n            EmployeeProfileService.List({\n            }, response => {\n                for (var index in response.Entities) {\n                    this.findQuickFilter(Select2Editor, PayrollRow.Fields.EmployeeName).items.push({ id: (response.Entities[index].EmployeeName).toString(), text: (response.Entities[index].EmployeeName).toString(), })\n                    this.findQuickFilter(Select2Editor, PayrollRow.Fields.EmployeeId).items.push({ id: (response.Entities[index].EmployeeID).toString(), text: (response.Entities[index].EmployeeID).toString(), })\n\n                }\n            })\n            MasterCostCentreService.List({\n            }, response => {\n                for (var index in response.Entities) {\n                    this.findQuickFilter(Select2Editor, PayrollRow.Fields.CostCentreName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n\n                }\n            })\n\n        }\n        else\n            this.toolbar.findButton(\"add-button\").toggle(false);\n\n        for (var index in months)\n            this.findQuickFilter(Select2Editor, PayrollRow.Fields.PayMonth).items.push({ id: (index).toString(), text: (months[index]).toString(), })\n        PayrollService.List({\n        }, response => {\n            let YearList = [];\n            for (var index in response.Entities)\n                if (YearList.indexOf(response.Entities[index].PayYear) == -1)\n                    YearList.push(response.Entities[index].PayYear)\n            for (var index in YearList)\n                this.findQuickFilter(Select2Editor, PayrollRow.Fields.PayYear).items.push({ id: (YearList[index]).toString(), text: (YearList[index]).toString(), })\n        })\n    }\n  \n\n    protected onViewProcessData(response: ListResponse<PayrollRow>) {\n        var self = this\n        //console.log('haha')\n        response = super.onViewProcessData(response);\n        //console.log(this.toolbar.findButton(\"add-button\").toggle(false))\n       // console.log($(this.toolbar.findButton(\"add-button\")).attr(\"style\"))\n\n        if (Authorization.hasPermission(PermissionKeys.HumanResources)) {\n            var cur = response\n            if (!isEmptyOrNull($(this.toolbar.findButton(\"add-button\")).attr(\"style\"))) {\n                var terminateButtons = document.querySelectorAll('.text-bg-warning')\n                terminateButtons.forEach(function (element) {\n                    $(element).hide()\n                });\n                var resignButtons = document.querySelectorAll('.text-bg-success')\n                resignButtons.forEach(function (element) {\n                    $(element).hide()\n                });\n\n            }\n\n\n            for (var index in response.Entities)\n            {\n                if (isEmptyOrNull(response.Entities[index].PayslipPath))\n                {\n                    var queryString = \"PayrollRowId=\" + encodeURIComponent(response.Entities[index].Id)\n                    var url = window.location.origin + '/PayrollSettings/Payroll/PdfSharpConvert?' + queryString\n                    var xhr = new XMLHttpRequest();\n                    xhr.open('GET', url, true);\n                    xhr.send() \n\n                    PayrollService.Update({\n                        EntityId: response.Entities[index].Id,\n                        Entity:\n                        {\n                            \"PayslipPath\": 'Payroll\\\\Payslip\\\\' + response.Entities[index].Id + '.pdf'\n                        },\n                    });\n                    \n                }\n            }\n\n            serviceCall<ListResponse<any>>({\n                service: PayrollService.baseUrl + '/AskGenerationOfPayslip',\n                method: \"GET\",\n                data: {\n                },\n                async: false,\n                onSuccess: (response) => {\n                    if (response[0] == 1) {\n                        const months: string[] = [\n                            'January',   // 0\n                            'February',  // 1\n                            'March',     // 2\n                            'April',     // 3\n                            'May',       // 4\n                            'June',      // 5\n                            'July',      // 6\n                            'August',    // 7\n                            'September', // 8\n                            'October',   // 9\n                            'November',  // 10\n                            'December'   // 11\n                        ];\n                        var month = response[1]\n                        var year = response[2]\n\n                        confirm(\n                            // here we demonstrate how you can detect which button user has clicked\n                            // second parameter is Yes handler and it is called only when user clicks Yes.\n                            // third parameter has some additional options, that you should only use when needed            \n                            \"Do you want to generate payslip for \" + response[2] + ' ' + months[response[1]],\n                            () => {\n\n                                serviceCall<any>({\n                                    service: PayrollService.baseUrl + '/LogGeneration',\n                                    method: \"GET\",\n                                    data: {\n                                        \"Month\": month,\n                                        \"Year\": year\n                                    },\n                                    async: false,\n                                    onSuccess: (response) => {\n                                        var GeneratingWizard = new PayrollGeneratingWizardDialog()\n                                        GeneratingWizard.dialogOpen()\n                                        GeneratingWizard.element.on(\"dialogclose\", function () {\n                                            //  location.reload()\n                                            self.internalRefresh()\n\n                                        })\n                                    },\n                                    onError: (error) => {\n                                        console.log(error.Error);\n                                    }\n                                })\n                            }, {\n                            onNo: () => {\n\n                                serviceCall<any>({\n                                    service: PayrollService.baseUrl + '/LogGeneration',\n                                    method: \"GET\",\n                                    data: {\n                                        \"Month\": month,\n                                        \"Year\": year\n                                    },\n                                    async: false,\n                                    onSuccess: (response) => {\n                                    },\n                                    onError: (error) => {\n                                        console.log(error.Error);\n                                    }\n                                })\n\n                                    notifyInfo(\"You can run the payroll generation wizard anytime\")\n                            }\n                            ,\n                        });\n                    }\n                },\n                onError: (error) => {\n                    console.log(error.Error);\n                }\n\n            })\n            this.toolbar.findButton(\"column-picker-button\").toggle(false);\n        }\n        return cur;\n\n    }\n    protected getButtons() {\n        var buttons = super.getButtons();\n        var self = this\n        if (Authorization.hasPermission(PermissionKeys.HumanResources)) {\n            PayrollSettingsService.List({\n            }, response => {\n                if (response.Entities.length > 0) {\n                    EpfSubjectionService.List({\n                    }, response => {\n                        if (response.Entities.length > 0) {\n                            EisSubjectionService.List({\n                            }, response => {\n                                if (response.Entities.length > 0) {\n                                    HrdfSubjectionService.List({\n                                    }, response => {\n                                        if (response.Entities.length > 0) {\n                                            EisSubjectionService.List({\n                                            }, response => {\n                                                if (response.Entities.length > 0) {\n                                                    PcbSubjectionService.List({\n                                                    }, response => {\n                                                        if (response.Entities.length <= 0) {\n                                                            this.toolbar.findButton(\"add-button\").toggle(false);\n                                                            notifyError(\"Please complete PCB subjection form before using payroll function\")\n                                                        }\n                                                    });\n                                                }\n                                                else {\n                                                    this.toolbar.findButton(\"add-button\").toggle(false);\n                                                    notifyError(\"Please complete EIS subjection form before using payroll function\")\n\n                                                }\n                                            });\n                                        }\n                                        else {\n                                            notifyError(\"Please complete HRDF subjection form before using payroll function\")\n                                            this.toolbar.findButton(\"add-button\").toggle(false);\n                                        }\n                                    });\n                                }\n                                else {\n                                    notifyError(\"Please complete EIS subjection form before using payroll function\")\n                                    this.toolbar.findButton(\"add-button\").toggle(false);\n                                }\n                            });\n                        }\n                        else {\n                            notifyError(\"Please complete EPF subjection form before using payroll function\")\n                            this.toolbar.findButton(\"add-button\").toggle(false);\n\n                        }\n                    });\n\n\n                }\n                else {\n                    notifyError(\"Please complete Payroll Settings form before using payroll function\")\n                    this.toolbar.findButton(\"add-button\").toggle(false);\n\n                }\n            })\n\n            buttons.push({\n                title: 'Payroll Settings',\n                cssClass: 'fas fa-wrench text-bg-primary',\n                onClick: e => {\n                    confirm(\n                        \"Do you want to edit payroll settings?\",\n                        () => {\n                            var PayrollSettingDialog = new PayrollSettingsDialog()\n                            PayrollSettingsService.List({\n                            }, response => {\n                                if (response.Entities.length > 0)\n                                    PayrollSettingDialog.loadByIdAndOpenDialog(response.Entities[0].Id)\n\n                                else\n                                    PayrollSettingDialog.dialogOpen()\n                            });\n                        }\n                    )\n                },\n            });\n\n            buttons.push({\n                title: 'Payroll Generator',\n                cssClass: 'fas fa-hat-wizard text-bg-success',\n                onClick: e => {\n                    confirm(\n                        \"Do you want to run payroll generating wizard\",\n                        () => {\n                            var GeneratingWizard = new PayrollGeneratingWizardDialog()\n                            GeneratingWizard.dialogOpen()\n                            GeneratingWizard.element.on(\"dialogclose\", function () {\n                                //self.refresh()\n                                //location.reload()\n                                self.internalRefresh()\n\n                            })\n                        }\n                    )\n                },\n            });\n            buttons.push({\n                title: 'Payroll Download',\n                cssClass: 'fas fa-hat-wizard text-bg-warning',\n                onClick: e => {\n                    confirm(\n                        \"Do you want to run payroll download wizard\",\n                        () => {\n                            var DownloadWizard = new PayrollWizardDialog(null, null, null)\n                            DownloadWizard.dialogOpen()\n                           \n                        }\n\n                    )\n\n                },\n                separator: true\n            });\n            buttons.push({\n                title: 'Payroll Batch Delete',\n                cssClass: 'fas fa-hat-wizard text-bg-danger',\n                onClick: e => {\n                    confirm(\n                            \"Do you want to delete all selected payslips?\",\n                        () => {\n\n                            // Create an array of promises for each delete operation\n                            let deletePromises = [];\n\n                            $('.select-row-checkbox:checked').each(function () {\n                                let dataId = $(this).data('id');\n\n                                // Add each delete operation promise to the array\n                                let deletePromise = PayrollService.Delete({\n                                    EntityId: dataId,\n                                }).then(() => {\n                                    console.log('Deleted Data ID:', dataId);\n                                }).catch(error => {\n                                    console.error('Error deleting Data ID:', dataId, error);\n                                });\n\n                                // Push the promise to the array\n                                deletePromises.push(deletePromise);\n                            });\n\n                            // Wait for all delete operations to complete before reloading the page\n                            Promise.all(deletePromises)\n                                .then(() => {\n                                    // All delete operations are completed, now reload the page\n                                    //location.reload();\n                                    self.internalRefresh()\n\n                                })\n                                .catch(error => {\n                                    // Handle any error that occurred during delete operations\n                                    console.error('Error in delete operations:', error);\n                                });\n                            \n                        }\n                    )\n                },\n                separator: true\n            });\n            \n            buttons.push({\n                title: 'Download Text Report',\n                cssClass: 'fas fa-hat-wizard text-bg-info',\n                onClick: e => {\n                    confirm(\n                            \"Do you want to download text report?\",\n                        () => {\n                               var TextWizard = new TextDownloadingWizardDialog()\n                            TextWizard.dialogOpen()\n                            TextWizard.element.on(\"dialogclose\", function () {\n                                self.internalRefresh()\n\n                            })\n                         \n\n\n                        }\n                    )\n                },\n                separator: true\n            });\n\n            \n            \n            buttons.push({\n                title: 'EPF Subjection',\n                cssClass: 'apply-changes-button',\n                onClick: e => {\n                    confirm(\n                        \"Do you want to set EPF Subjection\",\n                        () => {\n                            var EpfDlg = new EpfSubjectionDialog()\n                            EpfSubjectionService.List({\n                            }, response => {\n                                if (response.Entities.length > 0)\n                                    EpfDlg.loadByIdAndOpenDialog(response.Entities[0].Id)\n\n                                else\n                                    EpfDlg.dialogOpen()\n                            });\n\n                         \n                        }\n\n                    )\n\n                },\n                separator: true\n            });\n            buttons.push({\n                title: 'EIS Subjection',\n                cssClass: 'apply-changes-button',\n                onClick: e => {\n                    confirm(\n                        \"Do you want to set EPF Subjection\",\n                        () => {\n                            var EisDlg = new EisSubjectionDialog()\n\n                            EisSubjectionService.List({\n                            }, response => {\n                                if (response.Entities.length > 0)\n                                    EisDlg.loadByIdAndOpenDialog(response.Entities[0].Id)\n\n                                else\n                                    EisDlg.dialogOpen()\n                            });\n\n                            EisDlg.element.on(\"dialogclose\", function () {\n                            })\n\n                        }\n\n                    )\n\n                },\n                separator: true\n            });\n            buttons.push({\n                title: 'HRDF Subjection',\n                cssClass: 'apply-changes-button',\n                onClick: e => {\n                    confirm(\n                        \"Do you want to set HRDF Subjection\",\n                        () => {\n                            var HrdfDlg = new HrdfSubjectionDialog()\n\n                            HrdfSubjectionService.List({\n                            }, response => {\n                                if (response.Entities.length > 0)\n                                    HrdfDlg.loadByIdAndOpenDialog(response.Entities[0].Id)\n\n                                else\n                                    HrdfDlg.dialogOpen()\n                            });\n\n\n                            HrdfDlg.element.on(\"dialogclose\", function () {\n                            })\n                        }\n\n                    )\n\n                },\n                separator: true\n            });\n            buttons.push({\n                title: 'PCB Subjection',\n                cssClass: 'apply-changes-button',\n                onClick: e => {\n                    confirm(\n                        \"Do you want to set PCB Subjection\",\n                        () => {\n                            var PcbDlg = new PcbSubjectionDialog()\n\n                            PcbSubjectionService.List({\n                            }, response => {\n                                if (response.Entities.length > 0)\n                                    PcbDlg.loadByIdAndOpenDialog(response.Entities[0].Id)\n\n                                else\n                                    PcbDlg.dialogOpen()\n                            });\n\n                            PcbDlg.element.on(\"dialogclose\", function () {\n                            })\n\n                        }\n\n                    )\n\n                },\n                separator: true\n            });\n            buttons.push({\n                title: 'Socso Subjection',\n                cssClass: 'apply-changes-button',\n                onClick: e => {\n                    confirm(\n                        \"Do you want to set Socso Subjection\",\n                        () => {\n                            var SocsoDlg = new SocsoSubjectionDialog()\n\n                            SocsoSubjectionService.List({\n                            }, response => {\n                                if (response.Entities.length > 0)\n                                    SocsoDlg.loadByIdAndOpenDialog(response.Entities[0].Id)\n\n                                else\n                                    SocsoDlg.dialogOpen()\n                            });\n                            SocsoDlg.element.on(\"dialogclose\", function () {\n                            })\n\n\n                        }\n\n                    )\n\n                },\n                separator: true\n            });\n        }\n        return buttons;\n    }\n\n\n\n    protected onClick(e: JQueryEventObject, row: number, cell: number) {\n        super.onClick(e, row, cell);\n        if (e.isDefaultPrevented())\n            return;\n\n        // get reference to current item\n        var item = this.itemAt(row);\n        // get reference to clicked element\n        var target = $(e.target);\n        if (target.parent().hasClass('inline-action'))\n            target = target.parent();\n\n\n\n        if (target.hasClass('download-payroll')) {\n            confirm(\"Do you want to download Payroll?\", () => {\n\n                var PayrollId = item.Id;\n                var DateBuffer = item.PayDate;\n                var date = new Date(DateBuffer);\n\n                var MonthString = date.toLocaleString('en-US', { month: 'long' });\n                var YearString = date.getFullYear().toString();\n\n                var EmployeeRowId = item.EmployeeRowId\n                EmployeeProfileService.Retrieve({\n                    EntityId: EmployeeRowId\n                }, response => {\n                    var Name = response.Entity.EmployeeName.replace(/\\s/g, '');\n\n                    var queryString = \"PayrollRowId=\" + encodeURIComponent(PayrollId)\n                    var url = window.location.origin + '/PayrollSettings/Payroll/PdfSharpConvert?' + queryString\n                    var xhr = new XMLHttpRequest();\n                    xhr.open('GET', url, true);\n                    xhr.responseType = 'blob';\n                    xhr.onload = function () {\n                        if (xhr.status === 200)\n                        {\n                            var blob = xhr.response;\n\n                            const url = window.URL.createObjectURL(blob);\n                            const a = document.createElement('a');\n                            a.style.display = 'none';\n                            a.href = url;\n                            a.download = Name + \"Payslip\" + MonthString+ YearString+ '.pdf';\n                            a.click();\n                          \n\n                            notifySuccess(\"Payslip downloaded\")\n                        } else {\n                            notifyError('Error encounter when downloading Payslip Pdf');\n                        }\n                    };\n                    xhr.send() \n\n\n\n                });\n                \n\n            });\n        }\n\n\n\n\n    }\n\n    protected createToolbarExtensions() { //creates the selector\n        super.createToolbarExtensions();\n        this.rowSelection = new GridRowSelectionMixin(this, {\n            selectable: (item: PayrollRow) => {\n                console.log(item)\n                return true;\n            }\n        });\n\n\n    }\n    \n    protected getColumns() {\n\n        var columns = super.getColumns();\n        columns.splice(2, 0, {\n            field: 'Download Payroll',\n            name: '',\n            format: ctx => {\n\n                var DownloadPayroll = '<a class=\"inline-action download-payroll\" title=\"Download Payroll pdf\">' +\n                    '<i class=\"fa fa-download text-yellow\"></i></a>';\n                return DownloadPayroll\n\n\n            },\n            width: 12,\n            minWidth: 12,\n            maxWidth: 12\n        });\n        columns.splice(0, 0, {\n            name: '',\n            field: '',\n\n            cssClass : 'select-row-checkbox',\n            format: (ctx) => {\n                return `<input type=\"checkbox\" class=\"select-row-checkbox\" data-id=\"${ctx.item.Id}\" />`;\n            },\n            width: 40\n        });\n        //console.log(this.rowSelection.getSelectedKeys());\n\n        // Add a checkbox column for multi-selection\n        return columns;\n    }\n\n}", "import { Decorators, EntityDialog, EditorUtils, ListResponse, Criteria } from '@serenity-is/corelib';\nimport { PayrollGeneratingWizardForm, PayrollGeneratingWizardRow, PayrollGeneratingWizardService, PayrollRow, PayrollService, PayrollSettingsService, TextClass, TextDownloadingWizardForm, TextFormatAutopay, TextFormatEpf, TextFormatLHDN } from '../../../ServerTypes/PayrollSettings';\nimport { alertDialog, isEmptyOrNull } from '@serenity-is/corelib/q';\nimport { confirm, serviceCall, notifySuccess, notifyError } from '@serenity-is/corelib/q';\nimport {  Select2Editor } from '@serenity-is/corelib';\nimport { EmployeeProfileRow, EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { PayrollDialog } from '../Payroll/PayrollDialog';\nimport { PayrollWizDialog } from '../PayrollWiz/PayrollWizDialog';\nimport { PayrollWizardDialog } from '../PayrollWizard/PayrollWizardDialog';\nimport { CompanySettingsService } from '../../../ServerTypes/CompanySettings';\nimport { AnnouncementWizardService } from '../../../ServerTypes/Announcement';\nimport { Authorization } from '@serenity-is/corelib/q';\nimport { MasterStateService } from '../../../ServerTypes/Master';\n\n@Decorators.registerClass('HRMSoftware.PayrollSettings.TextDownloadingWizardDialog')\nexport class TextDownloadingWizardDialog extends EntityDialog<PayrollGeneratingWizardRow, any> {\n    protected getFormKey() { return TextDownloadingWizardForm.formKey; }\n    protected getRowDefinition() { return PayrollGeneratingWizardRow; }\n    protected getService() { return PayrollGeneratingWizardService.baseUrl; }\n    public EmployeeData: any[];\n    public PayrollData: any[];\n    public payrollSettingId: number;\n\n    public dateString: string;\n\n\n\n\n    public payDay: number;\n    public OrganisationName: string;\n    public Email: string;\n    public PhoneNumber: string;\n    public OrganisationCode: string;\n    public ContactPerson: string;\n\n    constructor() {\n        super();\n        var criteria: any;\n        var self = this\n        PayrollSettingsService.List({}, response => {\n            for (var res in response.Entities) {\n                let entity = response.Entities[res];\n\n                if (entity.IsActive == 1) {\n                    self.payrollSettingId = entity.Id || null;\n                    self.payDay = entity.CreditingDay || null;\n\n                    if (entity.OrganisationName) self.form.OrganisationName.value = entity.OrganisationName;\n                    if (entity.OrganisationCode) self.form.OrganisationCode.value = entity.OrganisationCode;\n                    if (entity.Email) self.form.Email.value = entity.Email;\n                    if (entity.PhoneNumber) self.form.PhoneNumber.value = entity.PhoneNumber;\n                    if (entity.ContactPerson) self.form.ContactPerson.value = entity.ContactPerson;\n                    if (entity.StateCodeId) self.form.MasterStateId.value = entity.StateCodeId;\n\n                    self.ContactPerson = entity.ContactPerson || \"\";\n                    self.OrganisationCode = entity.OrganisationCode || \"\";\n                    self.OrganisationName = entity.OrganisationName || \"\";\n                    self.PhoneNumber = entity.PhoneNumber || \"\";\n                    self.Email = entity.Email || \"\";\n\n                    if (entity.LhdnFormatId) self.form.TextFormatLhdnId.value = entity.LhdnFormatId.toString();\n                    if (entity.SocsoFormatId) self.form.TextFormatEisSocsoId.value = entity.SocsoFormatId.toString();\n                    if (entity.EisFormatId) self.form.TextFormatEisSocsoId.value = entity.EisFormatId.toString();\n                    if (entity.AutopayFormatId) self.form.TextFormatAutopayId.value = entity.AutopayFormatId.toString();\n                    if (entity.EpfFormatId) self.form.TextFormatEpfId.value = entity.EpfFormatId.toString();\n                }\n            }\n        });\n        EmployeeProfileService.List({\n            Criteria: Criteria.and(criteria, [[EmployeeProfileRow.Fields.Retired], '=', '0'],\n                [[EmployeeProfileRow.Fields.Terminated], '=', '0'],\n                [[EmployeeProfileRow.Fields.Resigned], '=', '0']\n            )\n        }, response => {\n            this.EmployeeData = response.Entities\n        })\n\n\n\n    }\n    protected form = new TextDownloadingWizardForm(this.idPrefix);\n\n    public counter: number;\n    public WaitingCounter: number;\n    protected getToolbarButtons() {\n        var self = this;\n        var buttons = super.getToolbarButtons();\n        $(`#${this.idPrefix}Toolbar`).addClass(\"ms-auto\")\n        buttons.push(\n            {\n                title: \"Download Text File\",\t// *** Get button text from translation\n                cssClass: 'text-bg-success p-2 ml-auto downloadButton hidden',\n                icon: 'fas fa-hat-wizard text-green',\n                onClick: () => {\n                    if (isEmptyOrNull(self.form.TextType.value)) {\n                        alertDialog('Please fill in the type of government payment to generate')\n                        return;\n                    }\n                    if (isEmptyOrNull(self.form.EmployeeRowList.value)) {\n                        alertDialog('Please select the employee to include in the report')\n                        return;\n                    }\n                    if (parseInt(self.form.TextType.value) == TextClass.LHDN.valueOf()) {\n                        PayrollSettingsService.Update({\n                            EntityId: self.payrollSettingId,\n                            Entity:\n                            {\n                                \"Email\": self.form.Email.value,\n                                \"PhoneNumber\": self.form.PhoneNumber.value,\n                                \"ContactPerson\": self.form.ContactPerson.value,\n                                \"LhdnFormatId\": parseInt(self.form.TextFormatLhdnId.value),\n                                \"StateCodeId\": self.form.MasterStateId.value,\n                            },\n                        });\n                    }\n                    else if (parseInt(self.form.TextType.value) == TextClass.AUTOPAY.valueOf()) {\n                        PayrollSettingsService.Update({\n                            EntityId: self.payrollSettingId,\n                            Entity:\n                            {\n                                \"CreditingDay\": self.form.CreditingDate.valueAsDate.getDay(),\n                                \"OrganisationName\": self.form.OrganisationName.value,\n                                \"OrganisationCode\": self.form.OrganisationCode.value,\n                                \"AutopayFormatId\": parseInt(self.form.TextFormatAutopayId.value)\n                            },\n                        });\n                    }\n                    else if (parseInt(self.form.TextType.value) == TextClass.SOCSO.valueOf()) {\n                        PayrollSettingsService.Update({\n                            EntityId: self.payrollSettingId,\n                            Entity:\n                            {\n                                \"SocsoFormatId\": parseInt(self.form.TextFormatEisSocsoId.value)\n                            },\n                        });\n                    }\n                    else if (parseInt(self.form.TextType.value) == TextClass.EIS.valueOf()) {\n                        PayrollSettingsService.Update({\n                            EntityId: self.payrollSettingId,\n                            Entity:\n                            {\n                                \"EisFormatId\": parseInt(self.form.TextFormatEisSocsoId.value)\n                            },\n                        });\n                    }\n                    else if (parseInt(self.form.TextType.value) == TextClass.EPF.valueOf()) {\n                        PayrollSettingsService.Update({\n                            EntityId: self.payrollSettingId,\n                            Entity:\n                            {\n                                \"EpfFormatId\": parseInt(self.form.TextFormatEpfId.value)\n                            },\n                        });\n                    }\n                    var TextFormat;\n                    if (parseInt(self.form.TextType.value) == TextClass.LHDN.valueOf())\n                        TextFormat = self.form.TextFormatLhdnId.value;\n\n                    else if (parseInt(self.form.TextType.value) == TextClass.AUTOPAY.valueOf()) \n                        TextFormat = self.form.TextFormatAutopayId.value;\n                    else if (parseInt(self.form.TextType.value) == TextClass.EPF.valueOf()) \n                        TextFormat = self.form.TextFormatEpfId.value;\n                    \n                    else if (parseInt(self.form.TextType.value) == TextClass.EIS.valueOf()\n                        || parseInt(self.form.TextType.value) == TextClass.SOCSO.valueOf()) \n                        TextFormat = self.form.TextFormatEisSocsoId.value;\n                    \n\n\n\n                    \n                    var queryString = \"PayMonth=\" + encodeURIComponent(self.form.PayMonth.value) +\n                        \"&PayYear=\" + encodeURIComponent(self.form.PayYear.value) +\n                        \"&Type=\" + encodeURIComponent(self.form.TextType.value) +\n                        \"&CompanyCode=\" + encodeURIComponent(self.form.OrganisationCode.value) +\n                        \"&CompanyName=\" + encodeURIComponent(self.form.OrganisationName.value) +\n                        \"&CreditingDate=\" + encodeURIComponent(self.form.CreditingDate.value) +\n                        \"&Email=\" + encodeURIComponent(self.form.Email.value) +\n                        \"&PhoneNumber=\" + encodeURIComponent(self.form.PhoneNumber.value) +\n                        \"&ContactPerson=\" + encodeURIComponent(self.form.ContactPerson.value) +\n                        \"&EmployeeArrayString=\" + encodeURIComponent(self.form.EmployeeRowList.value) +\n                        \"&StateCodeId=\" + encodeURIComponent(self.form.MasterStateId.value) +\n                        \"&TextFormat=\" + encodeURIComponent(TextFormat) +\n                        \"&testMode=\" + encodeURIComponent(self.form.TestingMode.value)\n\n                    var url = window.location.origin + '/PayrollSettings/Payroll/TxtGenerate?' + queryString\n                    var xhr = new XMLHttpRequest();\n                    xhr.open('GET', url, true);\n                    xhr.responseType = 'blob';\n                    xhr.onload = function () {\n                        if (xhr.status === 200) {\n                            var blob = xhr.response;\n                            const fileUrl = window.URL.createObjectURL(blob);\n                            // Create an anchor element\n                            const a = document.createElement('a');\n                            a.style.display = 'none';\n                            // Set the href to the Object URL\n                            a.href = fileUrl;\n                            // Set the download attribute with the desired file name\n                            var fileName = `${self.form.TextType.text}.txt`; // Default filename if not provided by the server\n                            a.download = fileName;\n                            // Append the anchor to the body (required for it to work)\n                            document.body.appendChild(a);\n\n                            // Simulate a click to trigger the download\n                            a.click();\n\n                            // Clean up by removing the anchor and revoking the object URL\n                            document.body.removeChild(a);\n                            window.URL.revokeObjectURL(fileUrl);\n\n                        } else {\n                            notifyError('Error encounter when downloading Payslip Pdf');\n                        }\n                    };\n                    xhr.send() \n\n\n                        }\n                    \n               \n            }\n        );\n\n        return buttons\n    }\n    public dialogOpen(asPanel?: boolean): void {\n        super.dialogOpen();\n        var self = this;\n        serviceCall<ListResponse<any>>({\n            service: AnnouncementWizardService.baseUrl + '/GetTodayDateTime',\n            method: \"GET\",\n            data: {\n            },\n            async: false,\n            onSuccess: (response) => {\n                self.dateString = response\n                CompanySettingsService.List({\n                }, response => {\n                    var today = new Date(self.dateString)\n                    var PayDate = 0\n                    for (var index in response.Entities) {\n                        if (response.Entities[index].IsActive == 1) {\n                            PayDate = response.Entities[index].PayDay\n                            break\n                        }\n                    }\n                   \n                })\n            }\n        })\n\n\n\n\n        this.saveAndCloseButton.hide()\n        this.editButton.hide()\n        this.applyChangesButton.hide()\n        this.deleteButton.hide()\n        this.localizationButton.hide()\n        this.cloneButton.hide()\n        this.undeleteButton.hide()\n        //EditorUtils.setReadonly(this.form.EmployeeRowList.element, true);\n        var MasterStateElement = document.getElementById(this.idPrefix + 'MasterStateId')\n    \n        var PayMonthElement = document.getElementById(this.idPrefix + 'PayMonth')\n        var PayYearElement = document.getElementById(this.idPrefix + 'PayYear')\n        let PayMonthEditor = new Select2Editor($(PayMonthElement))\n        let PayYearEditor = new Select2Editor($(PayYearElement))\n        let StateEditor = new Select2Editor($(MasterStateElement))\n        \n\n        MasterStateService.List({\n            //Criteria: Criteria('EmployeeRowId').in(self.form.EmployeeRowListBuffer.values),\n        }, response => {\n            for (var res in response.Entities) {\n                if (!isEmptyOrNull(response.Entities[res].StateCode))\n                    StateEditor.addItem({ id: (response.Entities[res].Id).toString(), text: (response.Entities[res].Name).toString(), }); // 8am - 6pm , will consider lates\n            }\n        })\n        const months: string[] = [\n            'January',   // 0\n            'February',  // 1\n            'March',     // 2\n            'April',     // 3\n            'May',       // 4\n            'June',      // 5\n            'July',      // 6\n            'August',    // 7\n            'September', // 8\n            'October',   // 9\n            'November',  // 10\n            'December'   // 11\n        ];\n        var today = new Date(self.dateString)\n        var todayYear = today.getFullYear()\n        var todayMonth = today.getMonth()\n        // Example usage:\n        for (let i = 0; i < months.length; i++) \n            PayMonthEditor.addItem({ id: (i).toString(), text: (months[i]).toString(), }); // 8am - 6pm , will consider lates\n        \n        PayMonthEditor.set_value(todayMonth.toString())\n        for (let i = -1; i < 2; i++) \n            PayYearEditor.addItem({ id: (todayYear + i).toString(), text: (todayYear + i).toString(), }); // 8am - 6pm , will consider lates\n        \n        PayYearEditor.set_value(todayYear.toString())\n\n        var MasterStateIdElement = document.getElementById(this.idPrefix + 'MasterStateId')\n        $(MasterStateIdElement).on('change', async function () {\n            self.handleDownloadButton()\n\n        })\n        var TestingModeElement = document.getElementById(this.idPrefix + 'TestingMode')\n        $(TestingModeElement).on('change', async function () {\n            self.handleDownloadButton()\n\n\n        })\n        var TextFormatEpfElement = document.getElementById(this.idPrefix + 'TextFormatEpfId')\n        $(TextFormatEpfElement).on('change', async function () {\n            if (parseInt(self.form.TextFormatEpfId.value) == TextFormatEpf.CIMB.valueOf()) \n                $(`.PhoneNumber, .ContactPerson`).show()\n            \n            else \n                $(`.PhoneNumber, .ContactPerson`).hide()\n            self.handleDownloadButton()\n            \n           \n        });\n        var TextFormatAutopayIdElement = document.getElementById(this.idPrefix + 'TextFormatAutopayId');\n        $(TextFormatAutopayIdElement).on('change', async function () {\n            self.handleDownloadButton()\n        })\n        var TextTypeElement = document.getElementById(this.idPrefix + 'TextType')\n        var TextFormatEisSocsoIdElement = document.getElementById(this.idPrefix + 'TextFormatEisSocsoId')\n        $(TextFormatEisSocsoIdElement).on('change', async function () {\n            self.handleDownloadButton()\n        })\n        var TextFormatLhdnIdElement = document.getElementById(this.idPrefix + 'TextFormatLhdnId')\n        $(TextFormatLhdnIdElement).on('change', async function () {\n            self.handleDownloadButton()\n        })\n\n        $(`.TextFormatEisSocsoId, .TextFormatEpfId, .TextFormatAutopayId, .TextFormatLhdnId, .TestingMode, .MasterStateId`).hide();\n        $(TextTypeElement).on('change', async function () {\n            $(`.Email, .PhoneNumber, .ContactPerson, .CreditingDate, .OrganisationName, .OrganisationCode, .MasterStateId`).hide()\n            $(`.TextFormatEisSocsoId, .TextFormatEpfId, .TextFormatAutopayId, .TextFormatLhdnId, .TestingMode`).hide();\n            if (parseInt(self.form.TextType.value) == TextClass.LHDN.valueOf()) {\n                self.form.Email.value = self.Email\n                self.form.PhoneNumber.value = self.PhoneNumber\n                self.form.ContactPerson.value = self.ContactPerson \n                $(`.Email, .PhoneNumber, .ContactPerson, .TextFormatLhdnId, .CreditingDate`).show()\n                console.log('hahaha')\n            }\n            else if (parseInt(self.form.TextType.value) == TextClass.AUTOPAY.valueOf()) {\n                $(`.TextFormatAutopayId`).show();\n                var dateGenerated = new Date(todayYear, todayMonth, self.payDay)\n                var DateObjYear = dateGenerated.getFullYear().toString()\n                var DateObjMonth = (dateGenerated.getMonth() + 1).toString()\n                var DateObjDay = dateGenerated.getDate().toString()\n                var LatestDateFormat = DateObjMonth.padStart(2, '0') + '/' + DateObjDay.padStart(2, '0') + '/' + DateObjYear\n                self.form.CreditingDate.value = LatestDateFormat\n                self.form.OrganisationName.value = self.OrganisationName\n                self.form.OrganisationCode.value = self.OrganisationCode\n                $(` .CreditingDate, .OrganisationName, .OrganisationCode`).show()\n            }            \n            else if (parseInt(self.form.TextType.value) == TextClass.EPF.valueOf()) {\n                $(`.TextFormatEpfId, .TestingMode`).show();\n                var dateGenerated = new Date(todayYear, todayMonth, self.payDay)\n                var DateObjYear = dateGenerated.getFullYear().toString()\n                var DateObjMonth = (dateGenerated.getMonth() + 1).toString()\n                var DateObjDay = dateGenerated.getDate().toString()\n                var LatestDateFormat = DateObjMonth.padStart(2, '0') + '/' + DateObjDay.padStart(2, '0') + '/' + DateObjYear\n\n                self.form.CreditingDate.value = LatestDateFormat\n                $(` .CreditingDate, .MasterStateId`).show()\n        \n                    if (parseInt(self.form.TextFormatEpfId.value) == TextFormatEpf.CIMB.valueOf()) {\n                        if (!isEmptyOrNull(self.form.MasterStateId.value) && !isEmptyOrNull(self.form.TextFormatEpfId.value)\n                            && !isEmptyOrNull(self.form.TestingMode.value) && !isEmptyOrNull(self.form.ContactPerson.value)\n                            && !isEmptyOrNull(self.form.PhoneNumber.value)) {\n                            $('.downloadButton').removeClass('hidden')\n                            return\n                        }\n                    }\n                \n\n                   \n            }\n            else if (parseInt(self.form.TextType.value) == TextClass.EIS.valueOf()\n                || parseInt(self.form.TextType.value) == TextClass.SOCSO.valueOf()) {\n                $(`.TextFormatEisSocsoId`).show();\n            }  \n            self.handleDownloadButton()\n            //dispute in format occur in epf and SOCSO/EIS \n        })\n        var ContactPersonElement = document.getElementById(this.idPrefix + 'ContactPerson')\n        $(ContactPersonElement).on('input', async function () {\n            let value = this.value;\n            // Limit to 3 characters\n            if (value.length > 40) \n                value = value.slice(0, 40);\n            // Update input value\n            this.value = value;\n            self.handleDownloadButton()\n        })\n        var EmailElement = document.getElementById(this.idPrefix + 'Email')\n        $(EmailElement).on('input', async function () {\n            let value = this.value;\n            // Limit to 3 characters\n            if (value.length > 40) \n                value = value.slice(0, 40);\n            this.value = value;\n            self.handleDownloadButton()\n\n        })\n        var PhoneNumberElement = document.getElementById(this.idPrefix + 'PhoneNumber')\n        $(PhoneNumberElement).on('input', async function () {\n            let value = this.value;\n            // Remove non-numeric characters\n            value = value.replace(/\\D/g, '');\n            // Limit to 3 characters\n            if (value.length > 20) \n                value = value.slice(0, 20);\n            // Update input value\n            this.value = value;\n            self.handleDownloadButton()\n        })\n        var SectionListElement = document.getElementById(this.idPrefix + 'SectionList');\n        var OccupationListElement = document.getElementById(this.idPrefix + 'OccupationList');\n        var DepartmentListElement = document.getElementById(this.idPrefix + 'DepartmentList');\n        var DivisionListElement = document.getElementById(this.idPrefix + 'DivisionList');\n        var JobGradeListElement = document.getElementById(this.idPrefix + 'JobGradeList');\n        var TestingModeElement = document.getElementById(this.idPrefix + 'TestingMode');\n        $(TestingModeElement).on('change', async function () {\n            self.handleDownloadButton()\n        })\n        var EmailElement = document.getElementById(this.idPrefix + 'Email');\n        $(EmailElement).on('change', async function () {\n            self.handleDownloadButton()\n        })\n        var CreditingDateElement = document.getElementById(this.idPrefix + 'CreditingDate');\n        $(CreditingDateElement).on('change', async function () {\n            self.handleDownloadButton()\n        })\n        var OrganisationCodeElement = document.getElementById(this.idPrefix + 'OrganisationCode');\n        $(OrganisationCodeElement).on('input', async function () {\n            self.handleDownloadButton()\n        })\n        var OrganisationNameElement = document.getElementById(this.idPrefix + 'OrganisationName');\n        $(OrganisationNameElement).on('input', async function () {\n            self.handleDownloadButton()\n        })\n        var TextFormatAutopayIdElement = document.getElementById(this.idPrefix + 'TextFormatAutopayId');\n        $(TextFormatAutopayIdElement).on('input', async function () {\n            self.handleDownloadButton()\n        })\n\n        $(`#s2id_${this.idPrefix}EmployeeRowList`).on('click', async function (e) {\n            $(`.select2-drop`).hide()\n            return\n\n        })\n\n\n        $(PayMonthElement).on('change', async function () {\n            if (isEmptyOrNull($(PayMonthElement).val()) || isEmptyOrNull($(PayYearElement).val()))\n                self.form.EmployeeRowList.value = \"\"\n            self.AllButton()\n\n        })\n        $(PayYearElement).on('change', async function () {\n            if (isEmptyOrNull($(PayMonthElement).val()) || isEmptyOrNull($(PayYearElement).val()))\n                self.form.EmployeeRowList.value = \"\"\n            self.AllButton()\n\n        })\n        $(OccupationListElement).on('change', async function () {\n            self.form.All.value = false\n            self.AllButton()\n\n        })\n        $(DivisionListElement).on('change', async function () {\n            self.form.All.value = false\n            self.AllButton()\n\n        })\n        $(JobGradeListElement).on('change', async function () {\n            self.form.All.value = false\n            self.AllButton()\n\n        })\n        $(DepartmentListElement).on('change', async function () {\n            self.form.All.value = false\n            self.AllButton()\n\n        })\n        $(SectionListElement).on('change', async function () {\n            self.form.All.value = false\n            self.AllButton()\n\n        })\n\n        var AllElement = document.getElementById(this.idPrefix + 'All');\n        $(AllElement).on('change', async function () {\n           self.AllButton()\n        })\n        $(`.Email, .PhoneNumber, .ContactPerson, .CreditingDate, .OrganisationName, .OrganisationCode, .MasterStateId, .TextFormatId`).hide()\n      \n    }\n    public handleDownloadButton(): void{\n        var self = this\n        if (isEmptyOrNull(self.form.EmployeeRowList.value)) {\n            $('.downloadButton').addClass('hidden')\n            return\n        }\n        if (parseInt(self.form.TextType.value) == TextClass.EPF.valueOf()) {\n            if (parseInt(self.form.TextFormatEpfId.value) == TextFormatEpf.CIMB.valueOf()) {\n                if (!isEmptyOrNull(self.form.MasterStateId.value) && !isEmptyOrNull(self.form.TextFormatEpfId.value)\n                    && !isEmptyOrNull(self.form.TestingMode.value) && !isEmptyOrNull(self.form.ContactPerson.value)\n                    && !isEmptyOrNull(self.form.PhoneNumber.value) && !isEmptyOrNull(self.form.CreditingDate.value)) {\n                    $('.downloadButton').removeClass('hidden')\n                    return\n                }\n                else\n                    $('.downloadButton').addClass('hidden')\n            }\n            else if (parseInt(self.form.TextFormatEpfId.value) == TextFormatEpf.KWSP.valueOf()) {\n                if (!isEmptyOrNull(self.form.MasterStateId.value) && !isEmptyOrNull(self.form.TestingMode.value)\n                    && !isEmptyOrNull(self.form.CreditingDate.value)) {\n                    $('.downloadButton').removeClass('hidden')\n                    return\n                }\n                else\n                    $('.downloadButton').addClass('hidden')\n            }\n            else\n                $('.downloadButton').addClass('hidden')\n\n        }\n        else if (parseInt(self.form.TextType.value) == TextClass.LHDN.valueOf()) {\n            if (parseInt(self.form.TextFormatLhdnId.value) == TextFormatLHDN.CIMB.valueOf()) {\n                if (!isEmptyOrNull(self.form.Email.value) && !isEmptyOrNull(self.form.ContactPerson.value)\n                    && !isEmptyOrNull(self.form.PhoneNumber.value) && !isEmptyOrNull(self.form.CreditingDate.value)) {\n                    $('.downloadButton').removeClass('hidden')\n                    return\n                }\n                else\n                    $('.downloadButton').addClass('hidden')\n            }\n            else\n                $('.downloadButton').addClass('hidden')\n        }\n        else if (parseInt(self.form.TextType.value) == TextClass.AUTOPAY.valueOf()) {\n            if (parseInt(self.form.TextFormatAutopayId.value) == TextFormatAutopay.CIMB.valueOf()) {\n                if (!isEmptyOrNull(self.form.OrganisationName.value) \n                    && !isEmptyOrNull(self.form.OrganisationCode.value) && !isEmptyOrNull(self.form.CreditingDate.value)) {\n                    $('.downloadButton').removeClass('hidden')\n                    return\n                }\n                else\n                    $('.downloadButton').addClass('hidden')\n            }\n            else\n                $('.downloadButton').addClass('hidden')\n        }\n        else if (parseInt(self.form.TextType.value) == TextClass.EIS.valueOf()\n            || (parseInt(self.form.TextType.value) == TextClass.SOCSO.valueOf())\n        ) {\n            if (!isEmptyOrNull(self.form.TextFormatEisSocsoId.value)) {\n                $('.downloadButton').removeClass('hidden')\n                return\n            }\n            else\n                $('.downloadButton').addClass('hidden')\n        }\n        else\n            $('.downloadButton').addClass('hidden')\n    }\n\n    public  AllButton(): void {\n        var self = this\n        if (self.form.All.value == true) {\n            var resultHolder = ''\n            for (var index in self.EmployeeData) \n                resultHolder = `${resultHolder} , ${self.EmployeeData[index].Id.toString() }`\n            self.form.EmployeeRowListBuffer.value = resultHolder\n        }\n        else if (self.form.All.value == false) \n            self.SearchCallback();\n        \n        self.SearchEmployeeCallback();\n        self.handleDownloadButton();\n\n    }\n    protected getDialogOptions() {\n        let opt = super.getDialogOptions()\n        opt.width = opt.width + 100\n        return opt\n    }\n\n    public SearchCallback(): void {\n        var self = this\n        var PayMonthElement = document.getElementById(this.idPrefix + 'PayMonth');\n        var PayYearElement = document.getElementById(this.idPrefix + 'PayYear');\n        var OccupationListElement = document.getElementById(this.idPrefix + 'OccupationList');\n        var DepartmentListElement = document.getElementById(this.idPrefix + 'DepartmentList');\n        var DivisionListElement = document.getElementById(this.idPrefix + 'DivisionList');\n        var JobGradeListElement = document.getElementById(this.idPrefix + 'JobGradeList');\n        var SectionListElement = document.getElementById(this.idPrefix + 'SectionList');\n        if (isEmptyOrNull($(PayMonthElement).val()) || isEmptyOrNull($(PayYearElement).val())) {\n            this.form.EmployeeRowList.value = this.form.EmployeeRowListBuffer.value = ''\n            return\n        }\n        function parseListFromElement(element) {\n            const valueStr = $(element).val();\n            return valueStr.length\n                ? valueStr.split(',').map(number => parseInt(number, 10))\n                : [];\n        }\n        // Use the utility function for each list\n        const JobGradeList = parseListFromElement(JobGradeListElement);\n        const DivisionList = parseListFromElement(DivisionListElement);\n        const DepartmentList = parseListFromElement(DepartmentListElement);\n        const OccupationList = parseListFromElement(OccupationListElement);\n        const SectionList = parseListFromElement(SectionListElement);\n        // Convert the lists to Sets for faster lookup\n        const jobGradeSet = new Set(JobGradeList);\n        const divisionSet = new Set(DivisionList);\n        const departmentSet = new Set(DepartmentList);\n        const occupationSet = new Set(OccupationList);\n        const sectionSet = new Set(SectionList);\n        for (let employee of self.EmployeeData) {\n            const { JobGradeID, DivisionID, DepartmentID, OccupationID, SectionID, Id } = employee;\n            // Check if the employee matches any criteria\n            const found =\n                jobGradeSet.has(JobGradeID) ||\n                divisionSet.has(DivisionID) ||\n                departmentSet.has(DepartmentID) ||\n                occupationSet.has(OccupationID) ||\n                sectionSet.has(SectionID);\n            let employeeRowListBuffer = self.form.EmployeeRowListBuffer.value;\n            let employeeRowList = employeeRowListBuffer ? employeeRowListBuffer.split(',').map(Number) : [];\n            if (!found) \n                employeeRowList = employeeRowList.filter(num => num !== Id);\n             else {\n                // Add employee if not already present\n                if (!employeeRowList.includes(Id)) \n                    employeeRowList.push(Id);\n            }\n            // Update the buffer value\n            self.form.EmployeeRowListBuffer.value = employeeRowList.join(',');\n        }\n\n    }\n\n    public  SearchEmployeeCallback(): void {\n        var self = this\n        var EmployeeRowIdListElement = document.getElementById(this.idPrefix + 'EmployeeRowListBuffer');\n        var EmployeeRowIdString = $(EmployeeRowIdListElement).val()\n        let numbers = EmployeeRowIdString.split(',')\n        let EmployeeRowIdList = [];\n        if (EmployeeRowIdString.length)\n            numbers.forEach(number => {\n                EmployeeRowIdList.push(parseInt(number)); // Convert string to integer and push to numberList\n            })\n  \n        if (EmployeeRowIdList.length == 0)\n            return\n        var criteria = Criteria.and(\n            [[PayrollRow.Fields.PayYear], '=', self.form.PayYear.value],\n            [[PayrollRow.Fields.PayMonth], '=', self.form.PayMonth.value],\n            [[PayrollRow.Fields.EmployeeRowId], 'in', [EmployeeRowIdList]],\n        );\n        PayrollService.List({\n            Criteria: criteria\n        }, response =>\n        {\n            var ResultHolder = ''\n            for (var index in response.Entities)\n            {\n                var currentEmployeeRowId = response.Entities[index].EmployeeRowId\n                if (EmployeeRowIdList.indexOf(currentEmployeeRowId) != -1 ) {\n                    ResultHolder = ResultHolder + ' , ' + currentEmployeeRowId \n                }\n            }\n            self.form.EmployeeRowList.value = ResultHolder\n            self.handleDownloadButton()\n        })\n        \n        \n    }\n}"],
  "mappings": "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",
  "names": ["import_q", "import_corelib", "import_q", "import_q", "import_corelib", "import_corelib", "import_q", "import_corelib", "TextDownloadingWizardDialog", "TextDownloadingWizardForm", "criteria", "self", "PayrollSettingsService", "response", "res", "entity", "EmployeeProfileService", "EmployeeProfileRow", "PayrollGeneratingWizardRow", "PayrollGeneratingWizardService", "buttons", "TextFormat", "queryString", "url", "xhr", "blob", "fileUrl", "a", "fileName", "asPanel", "AnnouncementWizardService", "CompanySettingsService", "today", "PayDate", "index", "MasterStateElement", "PayMonthElement", "PayYearElement", "PayMonthEditor", "PayYearEditor", "StateEditor", "MasterStateService", "months", "todayYear", "todayMonth", "i", "MasterStateIdElement", "__async", "TestingModeElement", "TextFormatEpfElement", "TextFormatAutopayIdElement", "TextTypeElement", "TextFormatEisSocsoIdElement", "TextFormatLhdnIdElement", "dateGenerated", "DateObjYear", "DateObjMonth", "DateObjDay", "LatestDateFormat", "ContactPersonElement", "value", "EmailElement", "PhoneNumberElement", "SectionListElement", "OccupationListElement", "DepartmentListElement", "DivisionListElement", "JobGradeListElement", "CreditingDateElement", "OrganisationCodeElement", "OrganisationNameElement", "e", "AllElement", "resultHolder", "opt", "parseListFromElement", "element", "valueStr", "number", "__name", "JobGradeList", "DivisionList", "DepartmentList", "OccupationList", "SectionList", "jobGradeSet", "divisionSet", "departmentSet", "occupationSet", "sectionSet", "employee", "JobGradeID", "DivisionID", "DepartmentID", "OccupationID", "SectionID", "Id", "found", "employeeRowListBuffer", "employeeRowList", "num", "EmployeeRowIdListElement", "EmployeeRowIdString", "numbers", "EmployeeRowIdList", "PayrollRow", "PayrollService", "ResultHolder", "currentEmployeeRowId", "__decorateClass", "PayrollGrid", "container", "PayrollColumns", "PayrollDialog", "PayrollRow", "PayrollService", "filters", "PermissionKeys", "months", "OccupationService", "response", "index", "JobGradeService", "DepartmentService", "DivisionService", "SectionService", "EmployeeProfileService", "MasterCostCentreService", "YearList", "self", "cur", "terminateButtons", "element", "resignButtons", "queryString", "url", "xhr", "month", "year", "GeneratingWizard", "PayrollGeneratingWizardDialog", "error", "buttons", "PayrollSettingsService", "EpfSubjectionService", "EisSubjectionService", "HrdfSubjectionService", "PcbSubjectionService", "e", "PayrollSettingDialog", "PayrollSettingsDialog", "DownloadWizard", "PayrollWizardDialog", "deletePromises", "dataId", "deletePromise", "TextWizard", "TextDownloadingWizardDialog", "EpfDlg", "EpfSubjectionDialog", "EisDlg", "EisSubjectionDialog", "HrdfDlg", "HrdfSubjectionDialog", "PcbDlg", "PcbSubjectionDialog", "SocsoDlg", "SocsoSubjectionDialog", "SocsoSubjectionService", "row", "cell", "item", "target", "PayrollId", "DateBuffer", "date", "MonthString", "YearString", "EmployeeRowId", "Name", "blob", "a", "columns", "ctx", "DownloadPayroll", "__name", "__decorateClass", "pageInit", "PayrollGrid", "__name"]
}
