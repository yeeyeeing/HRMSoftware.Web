{
  "version": 3,
  "sources": ["../../../../../../Modules/HumanResource/PerformanceAppraisal/PerformanceAppraisalFileAttach/PerformanceAppraisalFileAttachPage.ts", "../../../../../../Modules/HumanResource/PerformanceAppraisal/PerformanceAppraisalFileAttach/PerformanceAppraisalFileAttachGrid.ts", "../../../../../../Modules/HumanResource/PerformanceAppraisal/PerformanceAppraisalFileAttach/PerformanceAppraisalFileAttachDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\nimport { PerformanceAppraisalFileAttachGrid } from './PerformanceAppraisalFileAttachGrid';\n\nexport default function pageInit() {\n    initFullHeightGridPage(new PerformanceAppraisalFileAttachGrid($('#GridDiv')).element);\n}", "import {DataGrid, Decorators, EntityGrid, ListResponse, ToolButton} from '@serenity-is/corelib';\nimport {\n    PerformanceAppraisalFileAttachColumns,\n    PerformanceAppraisalFileAttachRow,\n    PerformanceAppraisalFileAttachService, PerformanceAppraisalFormRow,\n    PerformanceAppraisalResponseRow\n} from '../../../ServerTypes/PerformanceAppraisal';\nimport JSZip from 'jszip';  \nimport { saveAs } from 'file-saver';\nimport { PerformanceAppraisalFileAttachDialog } from './PerformanceAppraisalFileAttachDialog';\nimport { confirm, alertDialog } from '@serenity-is/corelib/q';\nimport {CompanyProfileRow, PerformanceAppraisalFormService} from \"@/ServerTypes/PerformanceAppraisal\";\n\n@Decorators.registerClass('HRMSoftware.PerformanceAppraisal.PerformanceAppraisalFileAttachGrid')\nexport class PerformanceAppraisalFileAttachGrid extends EntityGrid<PerformanceAppraisalFileAttachRow, any> {\n    protected getColumnsKey() { return PerformanceAppraisalFileAttachColumns.columnsKey; }\n    protected getDialogType() { return PerformanceAppraisalFileAttachDialog; }\n    protected getRowDefinition() { return PerformanceAppraisalFileAttachRow; }\n    protected getService() { return PerformanceAppraisalFileAttachService.baseUrl; }\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n\n    protected onViewProcessData(response: ListResponse<CompanyProfileRow>) {\n        response = super.onViewProcessData(response);\n        this.toolbar.findButton(\"column-picker-button\").toggle(false);\n        return response;\n    }\n\n    protected getButtons(): ToolButton[] {\n        var buttons = super.getButtons();\n\n        buttons.push({\n            title: 'Download Files',\n            cssClass: '',\n            icon: 'fa fa-file-download',\n            onClick: () => {\n                this.downloadAllFiles();\n            }\n        });\n\n        buttons.push({\n            title: 'Delete All Records',\n            cssClass: 'delete-button',\n            onClick: () => this.deleteAllRecords()\n        });\n\n        return buttons;\n    }\n\n    private deleteAllRecords(): void {\n        const visibleRecords = this.view.getItems().map(item => item.Id); // Get all visible record IDs\n\n        if (visibleRecords.length === 0) {\n            // console.log(\"No records to delete.\");\n            return;\n        }\n\n        confirm(\"Are you sure you want to delete all visible records?\", () => {\n            PerformanceAppraisalFileAttachService.DeleteAll({\n                RecordIds: visibleRecords\n            }, response => {\n                this.refresh();\n                // console.log(\"All visible records have been deleted.\");\n            });\n        });\n    }\n\n    public async downloadAllFiles(): Promise<void> {\n        var items = this.view.getItems();\n\n        if (items.length === 0) {\n            alertDialog(\"There are no files available to download.\");\n            return;\n        }\n        \n        var zip = new JSZip();\n\n        var now = new Date();\n        var year = now.getFullYear();\n        var month = ('0' + (now.getMonth() + 1)).slice(-2);\n        var day = ('0' + now.getDate()).slice(-2);\n        var hours = ('0' + now.getHours()).slice(-2);\n        var minutes = ('0' + now.getMinutes()).slice(-2);\n        var seconds = ('0' + now.getSeconds()).slice(-2);\n\n        var fileName = `Files_${year}-${month}-${day}_${hours}-${minutes}-${seconds}.zip`;\n\n        var fetchPromises = items.map(async item => {\n            var currItem = <PerformanceAppraisalFileAttachRow>item;\n            \n            if (currItem.Files != null) {\n                var host = window.location.protocol + \"//\" + window.location.host;\n                var address = host + \"/upload/\" + currItem.Files;\n\n                const response = await fetch(address);\n                if (response.ok) {\n                    const blob = await response.blob();\n                    zip.file(currItem.Files, blob);\n                }\n            }\n        });\n\n        await Promise.all(fetchPromises);\n\n        zip.generateAsync({ type: 'blob' })\n            .then(function(content) {\n                saveAs(content, fileName);\n            });\n    }\n\n    protected getColumns() {\n        DataGrid.defaultRowHeight = 50;\n        let columns = super.getColumns();\n\n        columns.splice(0, 0, {\n            field: 'File',\n            name: '',\n            format: ctx => {\n                var currItem = <PerformanceAppraisalFileAttachRow>ctx.item;\n                var klass = \"\";\n                var href = \"\"\n                if (currItem.Files == null) {\n                    klass = \"disabled\";\n                }\n                else {\n\n                    var host = window.location.protocol + \"//\" + window.location.host;\n                    var address = host + \"/upload/\" + currItem.Files;\n                    href = address;\n                }\n                return '<a class=\"inline-action download-file-button ' + klass + '\" title=\"Download File\" target = \"_blank\" href=' + href + '>' +\n                    '<i class=\"fa fa-file-alt\" style=\"color: blue;\"></i></a>'\n            },\n            width: 24,\n            minWidth: 24,\n            maxWidth: 24\n        });\n        return columns;\n    }\n}", "import { Decorators, EntityDialog } from '@serenity-is/corelib';\nimport { PerformanceAppraisalFileAttachForm, PerformanceAppraisalFileAttachRow, PerformanceAppraisalFileAttachService } from '../../../ServerTypes/PerformanceAppraisal';\n\n@Decorators.registerClass('HRMSoftware.PerformanceAppraisal.PerformanceAppraisalFileAttachDialog')\nexport class PerformanceAppraisalFileAttachDialog extends EntityDialog<PerformanceAppraisalFileAttachRow, any> {\n    protected getFormKey() { return PerformanceAppraisalFileAttachForm.formKey; }\n    protected getRowDefinition() { return PerformanceAppraisalFileAttachRow; }\n    protected getService() { return PerformanceAppraisalFileAttachService.baseUrl; }\n\n    protected form = new PerformanceAppraisalFileAttachForm(this.idPrefix);\n}"],
  "mappings": "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",
  "names": ["import_q", "import_corelib", "import_jszip", "import_file_saver", "import_corelib", "PerformanceAppraisalFileAttachDialog", "PerformanceAppraisalFileAttachForm", "PerformanceAppraisalFileAttachRow", "PerformanceAppraisalFileAttachService", "__name", "__decorateClass", "import_q", "PerformanceAppraisalFileAttachGrid", "PerformanceAppraisalFileAttachColumns", "PerformanceAppraisalFileAttachDialog", "PerformanceAppraisalFileAttachRow", "PerformanceAppraisalFileAttachService", "container", "response", "buttons", "visibleRecords", "item", "__async", "items", "zip", "JSZip", "now", "year", "month", "day", "hours", "minutes", "seconds", "fileName", "fetchPromises", "currItem", "host", "address", "blob", "content", "columns", "ctx", "klass", "href", "__name", "__decorateClass", "pageInit", "PerformanceAppraisalFileAttachGrid", "__name"]
}
