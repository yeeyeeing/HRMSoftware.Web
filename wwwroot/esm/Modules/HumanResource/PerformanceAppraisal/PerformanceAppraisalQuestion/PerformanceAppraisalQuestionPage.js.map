{
  "version": 3,
  "sources": ["../../../../../../Modules/HumanResource/PerformanceAppraisal/PerformanceAppraisalQuestion/PerformanceAppraisalQuestionPage.ts", "../../../../../../Modules/HumanResource/PerformanceAppraisal/PerformanceAppraisalQuestion/PerformanceAppraisalQuestionGrid.ts", "../../../../../../Modules/HumanResource/PerformanceAppraisal/PerformanceAppraisalQuestion/PerformanceAppraisalQuestionDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\nimport { PerformanceAppraisalQuestionGrid } from './PerformanceAppraisalQuestionGrid';\n\nexport default function pageInit() {\n    initFullHeightGridPage(new PerformanceAppraisalQuestionGrid($('#GridDiv')).element);\n}", "import {Decorators, EntityGrid, ListResponse, ToolButton} from '@serenity-is/corelib';\nimport {\n    PerformanceAppraisalFormService,\n    PerformanceAppraisalQuestionColumns,\n    PerformanceAppraisalQuestionRow,\n    PerformanceAppraisalQuestionService\n} from '../../../ServerTypes/PerformanceAppraisal';\nimport { PerformanceAppraisalQuestionDialog } from './PerformanceAppraisalQuestionDialog';\nimport { confirm } from '@serenity-is/corelib/q';\nimport {PerformanceAppraisalFormRow} from \"@/ServerTypes/PerformanceAppraisal\";\n\n@Decorators.registerClass('HRMSoftware.PerformanceAppraisal.PerformanceAppraisalQuestionGrid')\nexport class PerformanceAppraisalQuestionGrid extends EntityGrid<PerformanceAppraisalQuestionRow, any> {\n    protected getColumnsKey() { return PerformanceAppraisalQuestionColumns.columnsKey; }\n    protected getDialogType() { return PerformanceAppraisalQuestionDialog; }\n    protected getRowDefinition() { return PerformanceAppraisalQuestionRow; }\n    protected getService() { return PerformanceAppraisalQuestionService.baseUrl; }\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n\n    protected onViewProcessData(response: ListResponse<PerformanceAppraisalFormRow>) {\n        response = super.onViewProcessData(response);\n        //this.toolbar.findButton(\"add-button\").toggle(false);\n        this.toolbar.findButton(\"column-picker-button\").toggle(false);\n        return response;\n    }\n\n    protected getButtons(): ToolButton[] {\n        let buttons = super.getButtons();\n\n        buttons.push({\n            title: 'Delete All Records',\n            cssClass: 'delete-button',\n            onClick: () => this.deleteAllRecords()\n        });\n\n        return buttons;\n    }\n    \n    private deleteAllRecords(): void {\n        const visibleRecords = this.view.getItems().map(item => item.Id); // Get all visible record IDs\n\n        if (visibleRecords.length === 0) {\n            // console.log(\"No records to delete.\");\n            return;\n        }\n\n        confirm(\"Are you sure you want to delete all visible records?\", () => {\n            PerformanceAppraisalQuestionService.DeleteAll({\n                RecordIds: visibleRecords\n            }, response => {\n                this.refresh();\n                // console.log(\"All visible records have been deleted.\");\n            });\n        });\n    }\n}", "import { Decorators, EntityDialog } from '@serenity-is/corelib';\nimport { PerformanceAppraisalQuestionForm, \n    PerformanceAppraisalQuestionRow, \n    PerformanceAppraisalQuestionService,\n    PerformanceAppraisalQuestionAnswerType} from '../../../ServerTypes/PerformanceAppraisal';\nimport { alertDialog } from '@serenity-is/corelib/q';\n\n@Decorators.registerClass('HRMSoftware.PerformanceAppraisal.PerformanceAppraisalQuestionDialog')\nexport class PerformanceAppraisalQuestionDialog extends EntityDialog<PerformanceAppraisalQuestionRow, any> {\n    protected getFormKey() { return PerformanceAppraisalQuestionForm.formKey; }\n    protected getRowDefinition() { return PerformanceAppraisalQuestionRow; }\n    protected getService() { return PerformanceAppraisalQuestionService.baseUrl; }\n\n    protected form = new PerformanceAppraisalQuestionForm(this.idPrefix);\n\n    protected onDialogOpen() {\n        super.onDialogOpen();\n\n        this.element.closest(\".ui-dialog\").css(\"top\", \"10%\");\n    }\n\n    protected afterLoadEntity() {\n        super.afterLoadEntity();\n\n        // Set the active tab to \"Test2\"\n        this.element.find('.s-Dialog-Tabs').tabs('option', 'active', 2);\n    }\n\n    public list_of_question: string[] = [];\n    public list_of_answerType: number[] = [];\n    \n    constructor() {\n        super();\n\n        PerformanceAppraisalQuestionService.List({\n        }, response => {\n\n            for (var key in response.Entities) {\n\n                this.list_of_question.push(response.Entities[key][\"Questions\"].toLowerCase())\n                this.list_of_answerType.push(response.Entities[key][\"AnswerType\"])\n            }\n        });\n    }\n\n    protected save_submitHandler(response): void {\n        var list_of_errors: string[] = [];\n\n        var InsertedQuestion = this.form.Questions.value.toLowerCase()\n        const insertedAnswerTypeStr = this.form.AnswerType.value;\n        const InsertedAnswerType = parseInt(insertedAnswerTypeStr, 10);\n        \n        for (let i = 0; i < this.list_of_question.length; i++) {\n            if (this.list_of_question[i] === InsertedQuestion) {\n                if (this.list_of_answerType[i] === InsertedAnswerType) {\n                    list_of_errors.push(\"This question with the same answer type is already inserted.\");\n                    break; \n                }\n            }\n        }\n\n        if (list_of_errors.length > 0) {\n            const concatenatedString: string = list_of_errors.map(item => `${item}`).join('\\n');\n            alertDialog(concatenatedString)\n        }\n        else\n            super.save_submitHandler(response)\n    }\n}"],
  "mappings": "wNAAC,IAAAA,EAAuC,SCAxC,IAAAC,EAA+D,SCA/D,IAAAC,EAAyC,SAKzC,IAAAC,EAA4B,SAGrB,IAAMC,EAAN,cAAiD,cAAmD,CAuBvG,aAAc,CACV,MAAM,EAnBV,KAAU,KAAO,IAAIC,EAAiC,KAAK,QAAQ,EAenE,KAAO,iBAA6B,CAAC,EACrC,KAAO,mBAA+B,CAAC,EAKnCC,EAAoC,KAAK,CACzC,EAAGC,GAAY,CAEX,QAASC,KAAOD,EAAS,SAErB,KAAK,iBAAiB,KAAKA,EAAS,SAASC,CAAG,EAAE,UAAa,YAAY,CAAC,EAC5E,KAAK,mBAAmB,KAAKD,EAAS,SAASC,CAAG,EAAE,UAAa,CAEzE,CAAC,CACL,CAlCU,YAAa,CAAE,OAAOH,EAAiC,OAAS,CAChE,kBAAmB,CAAE,OAAOI,CAAiC,CAC7D,YAAa,CAAE,OAAOH,EAAoC,OAAS,CAInE,cAAe,CACrB,MAAM,aAAa,EAEnB,KAAK,QAAQ,QAAQ,YAAY,EAAE,IAAI,MAAO,KAAK,CACvD,CAEU,iBAAkB,CACxB,MAAM,gBAAgB,EAGtB,KAAK,QAAQ,KAAK,gBAAgB,EAAE,KAAK,SAAU,SAAU,CAAC,CAClE,CAmBU,mBAAmBC,EAAgB,CACzC,IAAIG,EAA2B,CAAC,EAE5BC,EAAmB,KAAK,KAAK,UAAU,MAAM,YAAY,EAC7D,IAAMC,EAAwB,KAAK,KAAK,WAAW,MAC7CC,EAAqB,SAASD,EAAuB,EAAE,EAE7D,QAAS,EAAI,EAAG,EAAI,KAAK,iBAAiB,OAAQ,IAC9C,GAAI,KAAK,iBAAiB,CAAC,IAAMD,GACzB,KAAK,mBAAmB,CAAC,IAAME,EAAoB,CACnDH,EAAe,KAAK,8DAA8D,EAClF,KACJ,CAIR,GAAIA,EAAe,OAAS,EAAG,CAC3B,IAAMI,EAA6BJ,EAAe,IAAIK,GAAQ,GAAGA,GAAM,EAAE,KAAK;AAAA,CAAI,KAClF,eAAYD,CAAkB,CAClC,MAEI,MAAM,mBAAmBP,CAAQ,CACzC,CACJ,EA5DaS,EAAAZ,EAAA,sCAAAA,EAANa,EAAA,CADN,aAAW,cAAc,qEAAqE,GAClFb,GDAb,IAAAc,EAAwB,SAIjB,IAAMC,EAAN,cAA+C,YAAiD,CACzF,eAAgB,CAAE,OAAOC,EAAoC,UAAY,CACzE,eAAgB,CAAE,OAAOC,CAAoC,CAC7D,kBAAmB,CAAE,OAAOC,CAAiC,CAC7D,YAAa,CAAE,OAAOC,EAAoC,OAAS,CAE7E,YAAYC,EAAmB,CAC3B,MAAMA,CAAS,CACnB,CAEU,kBAAkBC,EAAqD,CAC7E,OAAAA,EAAW,MAAM,kBAAkBA,CAAQ,EAE3C,KAAK,QAAQ,WAAW,sBAAsB,EAAE,OAAO,EAAK,EACrDA,CACX,CAEU,YAA2B,CACjC,IAAIC,EAAU,MAAM,WAAW,EAE/B,OAAAA,EAAQ,KAAK,CACT,MAAO,qBACP,SAAU,gBACV,QAAS,IAAM,KAAK,iBAAiB,CACzC,CAAC,EAEMA,CACX,CAEQ,kBAAyB,CAC7B,IAAMC,EAAiB,KAAK,KAAK,SAAS,EAAE,IAAIC,GAAQA,EAAK,EAAE,EAE3DD,EAAe,SAAW,MAK9B,WAAQ,uDAAwD,IAAM,CAClEJ,EAAoC,UAAU,CAC1C,UAAWI,CACf,EAAGF,GAAY,CACX,KAAK,QAAQ,CAEjB,CAAC,CACL,CAAC,CACL,CACJ,EA9CaI,EAAAV,EAAA,oCAAAA,EAANW,EAAA,CADN,aAAW,cAAc,mEAAmE,GAChFX,GDTE,SAARY,GAA4B,IAC/B,0BAAuB,IAAIC,EAAiC,EAAE,UAAU,CAAC,EAAE,OAAO,CACtF,CAFwBC,EAAAF,EAAA",
  "names": ["import_q", "import_corelib", "import_corelib", "import_q", "PerformanceAppraisalQuestionDialog", "PerformanceAppraisalQuestionForm", "PerformanceAppraisalQuestionService", "response", "key", "PerformanceAppraisalQuestionRow", "list_of_errors", "InsertedQuestion", "insertedAnswerTypeStr", "InsertedAnswerType", "concatenatedString", "item", "__name", "__decorateClass", "import_q", "PerformanceAppraisalQuestionGrid", "PerformanceAppraisalQuestionColumns", "PerformanceAppraisalQuestionDialog", "PerformanceAppraisalQuestionRow", "PerformanceAppraisalQuestionService", "container", "response", "buttons", "visibleRecords", "item", "__name", "__decorateClass", "pageInit", "PerformanceAppraisalQuestionGrid", "__name"]
}
