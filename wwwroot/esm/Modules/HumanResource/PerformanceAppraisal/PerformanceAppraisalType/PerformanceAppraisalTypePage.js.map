{
  "version": 3,
  "sources": ["../../../../../../Modules/HumanResource/PerformanceAppraisal/PerformanceAppraisalType/PerformanceAppraisalTypePage.ts", "../../../../../../Modules/HumanResource/PerformanceAppraisal/PerformanceAppraisalType/PerformanceAppraisalTypeGrid.ts", "../../../../../../Modules/HumanResource/PerformanceAppraisal/PerformanceAppraisalType/PerformanceAppraisalTypeDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\nimport { PerformanceAppraisalTypeGrid } from './PerformanceAppraisalTypeGrid';\n\nexport default function pageInit() {\n    initFullHeightGridPage(new PerformanceAppraisalTypeGrid($('#GridDiv')).element);\n}", "import {Decorators, EntityGrid, ListResponse, ToolButton} from '@serenity-is/corelib';\nimport { PerformanceAppraisalTypeColumns, PerformanceAppraisalTypeRow, PerformanceAppraisalTypeService } from '../../../ServerTypes/PerformanceAppraisal';\nimport { PerformanceAppraisalTypeDialog } from './PerformanceAppraisalTypeDialog';\nimport { confirm, alertDialog } from '@serenity-is/corelib/q';\nimport {PerformanceAppraisalFormRow, PerformanceAppraisalFormService} from \"@/ServerTypes/PerformanceAppraisal\";\nimport {hasPermission} from \"@/Administration/User/Authentication/Authorization\";\nimport {PermissionKeys} from \"@/ServerTypes/Administration/PermissionKeys\";\n\n@Decorators.registerClass('HRMSoftware.PerformanceAppraisal.PerformanceAppraisalTypeGrid')\nexport class PerformanceAppraisalTypeGrid extends EntityGrid<PerformanceAppraisalTypeRow, any> {\n    protected getColumnsKey() { return PerformanceAppraisalTypeColumns.columnsKey; }\n    protected getDialogType() { return PerformanceAppraisalTypeDialog; }\n    protected getRowDefinition() { return PerformanceAppraisalTypeRow; }\n    protected getService() { return PerformanceAppraisalTypeService.baseUrl; }\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n\n    protected onViewProcessData(response: ListResponse<PerformanceAppraisalFormRow>) {\n        response = super.onViewProcessData(response);\n        //this.toolbar.findButton(\"add-button\").toggle(false);\n        this.toolbar.findButton(\"column-picker-button\").toggle(false);\n        return response;\n    }\n\n    protected getButtons(): ToolButton[] {\n        let buttons = super.getButtons();\n        \n        buttons.push({\n            title: 'Delete All Records',\n            cssClass: 'delete-button',\n            onClick: () => this.deleteAllRecords()\n        });\n\n        return buttons;\n    }\n\n    private deleteAllRecords(): void {\n        const visibleRecords = this.view.getItems().map(item => item.Id); // Get all visible record IDs\n\n        if (visibleRecords.length === 0) {\n            // console.log(\"No records to delete.\");\n            return;\n        }\n\n        confirm(\"Are you sure you want to delete all visible records?\", () => {\n            PerformanceAppraisalTypeService.DeleteAll({\n                RecordIds: visibleRecords\n            }, response => {\n                this.refresh();\n                // console.log(\"All visible records have been deleted.\");\n            });\n        });\n    }\n}", "import { Decorators, EntityDialog } from '@serenity-is/corelib';\nimport { PerformanceAppraisalTypeForm, PerformanceAppraisalTypeRow, PerformanceAppraisalTypeService } from '../../../ServerTypes/PerformanceAppraisal';\nimport {PerformanceAppraisalQuestionService} from \"@/ServerTypes/PerformanceAppraisal\";\nimport { alertDialog } from '@serenity-is/corelib/q';\n\n@Decorators.registerClass('HRMSoftware.PerformanceAppraisal.PerformanceAppraisalTypeDialog')\nexport class PerformanceAppraisalTypeDialog extends EntityDialog<PerformanceAppraisalTypeRow, any> {\n    protected getFormKey() { return PerformanceAppraisalTypeForm.formKey; }\n    protected getRowDefinition() { return PerformanceAppraisalTypeRow; }\n    protected getService() { return PerformanceAppraisalTypeService.baseUrl; }\n\n    protected form = new PerformanceAppraisalTypeForm(this.idPrefix);\n\n    protected onDialogOpen() {\n        super.onDialogOpen();\n\n        this.element.closest(\".ui-dialog\").css(\"top\", \"20%\");\n    }\n\n    public list_of_type: string[] = [];\n\n    constructor() {\n        super();\n\n        PerformanceAppraisalTypeService.List({\n        }, response => {\n\n            for (var key in response.Entities) {\n\n                this.list_of_type.push(response.Entities[key][\"Type\"].toLowerCase())\n            }\n        });\n    }\n\n    protected save_submitHandler(response): void {\n        var list_of_errors: string[] = [];\n\n        var InsertedType = this.form.Type.value.toLowerCase()\n\n        for (let i = 0; i < this.list_of_type.length; i++) {\n            if (this.list_of_type[i] === InsertedType) {\n                list_of_errors.push(\"The name of appraisal type is already inserted.\");\n                break;\n            }\n        }\n\n        if (list_of_errors.length > 0) {\n            const concatenatedString: string = list_of_errors.map(item => `${item}`).join('\\n');\n            alertDialog(concatenatedString)\n        }\n        else\n            super.save_submitHandler(response)\n    }\n}"],
  "mappings": "wNAAC,IAAAA,EAAuC,SCAxC,IAAAC,EAA+D,SCA/D,IAAAC,EAAyC,SAGzC,IAAAC,EAA4B,SAGrB,IAAMC,EAAN,cAA6C,cAA+C,CAe/F,aAAc,CACV,MAAM,EAXV,KAAU,KAAO,IAAIC,EAA6B,KAAK,QAAQ,EAQ/D,KAAO,aAAyB,CAAC,EAK7BC,EAAgC,KAAK,CACrC,EAAGC,GAAY,CAEX,QAASC,KAAOD,EAAS,SAErB,KAAK,aAAa,KAAKA,EAAS,SAASC,CAAG,EAAE,KAAQ,YAAY,CAAC,CAE3E,CAAC,CACL,CAzBU,YAAa,CAAE,OAAOH,EAA6B,OAAS,CAC5D,kBAAmB,CAAE,OAAOI,CAA6B,CACzD,YAAa,CAAE,OAAOH,EAAgC,OAAS,CAI/D,cAAe,CACrB,MAAM,aAAa,EAEnB,KAAK,QAAQ,QAAQ,YAAY,EAAE,IAAI,MAAO,KAAK,CACvD,CAiBU,mBAAmBC,EAAgB,CACzC,IAAIG,EAA2B,CAAC,EAE5BC,EAAe,KAAK,KAAK,KAAK,MAAM,YAAY,EAEpD,QAASC,EAAI,EAAGA,EAAI,KAAK,aAAa,OAAQA,IAC1C,GAAI,KAAK,aAAaA,CAAC,IAAMD,EAAc,CACvCD,EAAe,KAAK,iDAAiD,EACrE,KACJ,CAGJ,GAAIA,EAAe,OAAS,EAAG,CAC3B,IAAMG,EAA6BH,EAAe,IAAII,GAAQ,GAAGA,GAAM,EAAE,KAAK;AAAA,CAAI,KAClF,eAAYD,CAAkB,CAClC,MAEI,MAAM,mBAAmBN,CAAQ,CACzC,CACJ,EA/CaQ,EAAAX,EAAA,kCAAAA,EAANY,EAAA,CADN,aAAW,cAAc,iEAAiE,GAC9EZ,GDHb,IAAAa,EAAqC,SAM9B,IAAMC,EAAN,cAA2C,YAA6C,CACjF,eAAgB,CAAE,OAAOC,EAAgC,UAAY,CACrE,eAAgB,CAAE,OAAOC,CAAgC,CACzD,kBAAmB,CAAE,OAAOC,CAA6B,CACzD,YAAa,CAAE,OAAOC,EAAgC,OAAS,CAEzE,YAAYC,EAAmB,CAC3B,MAAMA,CAAS,CACnB,CAEU,kBAAkBC,EAAqD,CAC7E,OAAAA,EAAW,MAAM,kBAAkBA,CAAQ,EAE3C,KAAK,QAAQ,WAAW,sBAAsB,EAAE,OAAO,EAAK,EACrDA,CACX,CAEU,YAA2B,CACjC,IAAIC,EAAU,MAAM,WAAW,EAE/B,OAAAA,EAAQ,KAAK,CACT,MAAO,qBACP,SAAU,gBACV,QAAS,IAAM,KAAK,iBAAiB,CACzC,CAAC,EAEMA,CACX,CAEQ,kBAAyB,CAC7B,IAAMC,EAAiB,KAAK,KAAK,SAAS,EAAE,IAAIC,GAAQA,EAAK,EAAE,EAE3DD,EAAe,SAAW,MAK9B,WAAQ,uDAAwD,IAAM,CAClEJ,EAAgC,UAAU,CACtC,UAAWI,CACf,EAAGF,GAAY,CACX,KAAK,QAAQ,CAEjB,CAAC,CACL,CAAC,CACL,CACJ,EA9CaI,EAAAV,EAAA,gCAAAA,EAANW,EAAA,CADN,aAAW,cAAc,+DAA+D,GAC5EX,GDNE,SAARY,GAA4B,IAC/B,0BAAuB,IAAIC,EAA6B,EAAE,UAAU,CAAC,EAAE,OAAO,CAClF,CAFwBC,EAAAF,EAAA",
  "names": ["import_q", "import_corelib", "import_corelib", "import_q", "PerformanceAppraisalTypeDialog", "PerformanceAppraisalTypeForm", "PerformanceAppraisalTypeService", "response", "key", "PerformanceAppraisalTypeRow", "list_of_errors", "InsertedType", "i", "concatenatedString", "item", "__name", "__decorateClass", "import_q", "PerformanceAppraisalTypeGrid", "PerformanceAppraisalTypeColumns", "PerformanceAppraisalTypeDialog", "PerformanceAppraisalTypeRow", "PerformanceAppraisalTypeService", "container", "response", "buttons", "visibleRecords", "item", "__name", "__decorateClass", "pageInit", "PerformanceAppraisalTypeGrid", "__name"]
}
