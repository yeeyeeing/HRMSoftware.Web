{
  "version": 3,
  "sources": ["../../../../../../Modules/HumanResource/AbsentRecord/AbsentRecord/AbsentRecordPage.ts", "../../../../../../Modules/HumanResource/AbsentRecord/AbsentRecord/AbsentRecordGrid.ts", "../../../../../../Modules/ServerTypes/AbsentRecord/AbsentRecordColumns.ts", "../../../../../../Modules/ServerTypes/AbsentRecord/AbsentRecordForm.ts", "../../../../../../Modules/ServerTypes/AbsentRecord/AbsentRecordRow.ts", "../../../../../../Modules/ServerTypes/AbsentRecord/AbsentRecordService.ts", "../../../../../../Modules/HumanResource/AbsentRecord/AbsentRecord/AbsentRecordDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\nimport { AbsentRecordGrid } from './AbsentRecordGrid';\n\nexport default function pageInit() {\n    initFullHeightGridPage(new AbsentRecordGrid($('#GridDiv')).element);\n}", "import { Decorators, EntityGrid, ListResponse } from '@serenity-is/corelib';\nimport { AbsentRecordColumns, AbsentRecordRow, AbsentRecordService } from '../../../ServerTypes/AbsentRecord';\nimport { AbsentRecordDialog } from './AbsentRecordDialog';\nimport { OccupationService } from '../../../ServerTypes/OrganisationHierarchy';\nimport { JobGradeService } from '../../../ServerTypes/OrganisationHierarchy';\nimport { PermissionKeys } from '../../../ServerTypes/Administration';\nimport { Authorization } from '@serenity-is/corelib/q';\nimport { Select2Editor, QuickFilter, Widget } from '@serenity-is/corelib';\nimport { EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { DepartmentService } from '../../../ServerTypes/OrganisationHierarchy/DepartmentService';\nimport { DivisionService } from '../../../ServerTypes/OrganisationHierarchy/DivisionService';\n\n@Decorators.registerClass('HRMSoftware.AbsentRecord.AbsentRecordGrid')\nexport class AbsentRecordGrid extends EntityGrid<AbsentRecordRow, any> {\n    protected getColumnsKey() { return AbsentRecordColumns.columnsKey; }\n    protected getDialogType() { return AbsentRecordDialog; }\n    protected getRowDefinition() { return AbsentRecordRow; }\n    protected getService() { return AbsentRecordService.baseUrl; }\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n    protected onViewProcessData(response: ListResponse<AbsentRecordRow>) {\n        response = super.onViewProcessData(response);\n        this.toolbar.findButton(\"column-picker-button\").toggle(false);\n        return response;\n    }\n    protected getQuickFilters(): QuickFilter<Widget<any>, any>[] {\n        //Gets the Filters defined in the Columns or in parent grids.\n        let filters = super.getQuickFilters();\n        var thisrow = AbsentRecordRow\n        // console.log(filters[3].type = Select2Editor)\n        if (Authorization.hasPermission(PermissionKeys.HumanResources)) {\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: thisrow.Fields.OccupationName,\n                type: Select2Editor,\n                title: \"Occupation\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: thisrow.Fields.JobGradeName,\n                type: Select2Editor,\n                title: \"Job Grade\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: thisrow.Fields.DivisionName,\n                type: Select2Editor,\n                title: \"Division\",\n\n            });\n\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: thisrow.Fields.DepartmentName,\n                type: Select2Editor,\n                title: \"Department\",\n\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: thisrow.Fields.EmployeeName,\n                type: Select2Editor,\n                title: \"Name\",\n            });\n            filters.push({\n                cssClass: \"hidden-xs\",\n                field: thisrow.Fields.EmployeeId,\n                type: Select2Editor,\n                title: \"Employee ID\",\n            });\n            filters.reverse()\n\n        }\n        return filters;\n    }\n    protected createQuickFilters(): void {\n        // let base class to create quick filters first\n\n        super.createQuickFilters();\n        var thisrow = AbsentRecordRow\n        if (Authorization.hasPermission(PermissionKeys.HumanResources)) {\n\n            OccupationService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, thisrow.Fields.OccupationName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            JobGradeService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, thisrow.Fields.JobGradeName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            DepartmentService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, thisrow.Fields.DepartmentName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n            })\n            DivisionService.List({\n            }, response => {\n                for (var index in response.Entities)\n                    this.findQuickFilter(Select2Editor, thisrow.Fields.DivisionName).items.push({ id: (response.Entities[index].Name).toString(), text: (response.Entities[index].Name).toString(), })\n\n            })\n            EmployeeProfileService.List({\n            }, response => {\n                for (var index in response.Entities) {\n                    this.findQuickFilter(Select2Editor, thisrow.Fields.EmployeeName).items.push({ id: (response.Entities[index].EmployeeName).toString(), text: (response.Entities[index].EmployeeName).toString(), })\n                    this.findQuickFilter(Select2Editor, thisrow.Fields.EmployeeId).items.push({ id: (response.Entities[index].EmployeeID).toString(), text: (response.Entities[index].EmployeeID).toString(), })\n\n                }\n            })\n        }\n        else\n            this.toolbar.findButton(\"add-button\").toggle(false);\n\n    }\n\n}", "\uFEFFimport { StatusFormatter } from \"@/HumanResource/PayrollSettings/NoPaidLeave/StatusFormatter\";\n\nexport class AbsentRecordColumns {\n    static columnsKey = 'AbsentRecord.AbsentRecord';\n}\n\n[StatusFormatter]; // referenced types", "\uFEFFimport { LookupEditor, StringEditor, DateEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface AbsentRecordForm {\n    EmployeeRowId: LookupEditor;\n    EmployeeName: StringEditor;\n    AbsentDate: DateEditor;\n}\n\nexport class AbsentRecordForm extends PrefixedContext {\n    static formKey = 'AbsentRecord.AbsentRecord';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!AbsentRecordForm.init)  {\n            AbsentRecordForm.init = true;\n\n            var w0 = LookupEditor;\n            var w1 = StringEditor;\n            var w2 = DateEditor;\n\n            initFormType(AbsentRecordForm, [\n                'EmployeeRowId', w0,\n                'EmployeeName', w1,\n                'AbsentDate', w2\n            ]);\n        }\n    }\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface AbsentRecordRow {\n    DepartmentID?: number;\n    DepartmentName?: string;\n    DivisionID?: number;\n    DivisionName?: string;\n    OccupationID?: number;\n    OccupationName?: string;\n    JobGradeID?: number;\n    JobGradeName?: string;\n    Id?: number;\n    EmployeeRowId?: number;\n    AbsentDate?: string;\n    EmployeeId?: string;\n    Processed?: number;\n    EmployeeName?: string;\n    HalfDay?: number;\n}\n\nexport abstract class AbsentRecordRow {\n    static readonly idProperty = 'Id';\n    static readonly nameProperty = 'EmployeeName';\n    static readonly localTextPrefix = 'AbsentRecord.AbsentRecord';\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = 'Administration:HumanResources';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<AbsentRecordRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { AbsentRecordRow } from \"./AbsentRecordRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace AbsentRecordService {\n    export const baseUrl = 'AbsentRecord/AbsentRecord';\n\n    export declare function Create(request: SaveRequest<AbsentRecordRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<AbsentRecordRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<AbsentRecordRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<AbsentRecordRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"AbsentRecord/AbsentRecord/Create\",\n        Update: \"AbsentRecord/AbsentRecord/Update\",\n        Delete: \"AbsentRecord/AbsentRecord/Delete\",\n        Retrieve: \"AbsentRecord/AbsentRecord/Retrieve\",\n        List: \"AbsentRecord/AbsentRecord/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>AbsentRecordService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "import { Decorators, EditorUtils, EntityDialog, Select2Editor } from '@serenity-is/corelib';\nimport { AbsentRecordForm, AbsentRecordRow, AbsentRecordService } from '../../../ServerTypes/AbsentRecord';\nimport { EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\n\n@Decorators.registerClass('HRMSoftware.AbsentRecord.AbsentRecordDialog')\nexport class AbsentRecordDialog extends EntityDialog<AbsentRecordRow, any> {\n    protected getFormKey() { return AbsentRecordForm.formKey; }\n    protected getRowDefinition() { return AbsentRecordRow; }\n    protected getService() { return AbsentRecordService.baseUrl; }\n\n    protected form = new AbsentRecordForm(this.idPrefix);\n\n\n\n\n    public dialogOpen(asPanel?: boolean): void {\n   \n\n\n        super.dialogOpen(asPanel);\n        var EmployeeRowIdValue = this.form.EmployeeRowId.value\n        EditorUtils.setReadonly(this.form.EmployeeName.element, true);\n\n        EmployeeProfileService.List({\n        }, response => {\n\n            var EmployeeRowIdElement = document.getElementById(this.idPrefix + 'EmployeeRowId')\n            let EmployeeRowIdEditor = new Select2Editor($(EmployeeRowIdElement))\n\n            var PersonNameElement = document.getElementById(this.idPrefix + 'EmployeeName')\n            interface Item {\n                id: number;\n                name: string;\n            }\n            let listOfDicts: Item[] = [];\n\n            for (var index in response.Entities) {\n                EmployeeRowIdEditor.addItem({ id: (response.Entities[index].Id).toString(), text: (response.Entities[index].EmployeeID).toString(), }); // 8am - 6pm , will consider lates\n                listOfDicts.push({ id: response.Entities[index].Id, name: response.Entities[index].EmployeeName });\n            }\n\n            $(EmployeeRowIdElement).on('change', async function () {\n\n\n                for (var index in listOfDicts) {\n                    if (listOfDicts[index].id == $(EmployeeRowIdElement).val())\n                        $(PersonNameElement).val(listOfDicts[index].name)\n                }\n            })\n            if (EmployeeRowIdValue != null)\n                $(EmployeeRowIdElement).val(EmployeeRowIdValue.toString()).trigger('change');\n\n        });\n      \n\n    }\n\n}"],
  "mappings": "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",
  "names": ["import_q", "import_corelib", "AbsentRecordColumns", "__name", "import_corelib", "import_q", "_AbsentRecordForm", "prefix", "w0", "w1", "w2", "AbsentRecordForm", "__name", "import_q", "AbsentRecordRow", "__name", "import_q", "AbsentRecordService", "x", "r", "s", "o", "import_corelib", "AbsentRecordDialog", "AbsentRecordForm", "AbsentRecordRow", "AbsentRecordService", "asPanel", "EmployeeRowIdValue", "EmployeeProfileService", "response", "EmployeeRowIdElement", "EmployeeRowIdEditor", "PersonNameElement", "listOfDicts", "index", "__async", "__name", "__decorateClass", "import_q", "import_corelib", "AbsentRecordGrid", "AbsentRecordColumns", "AbsentRecordDialog", "AbsentRecordRow", "AbsentRecordService", "container", "response", "filters", "thisrow", "PermissionKeys", "OccupationService", "index", "JobGradeService", "DepartmentService", "DivisionService", "EmployeeProfileService", "__name", "__decorateClass", "pageInit", "AbsentRecordGrid", "__name"]
}
