{
  "version": 3,
  "sources": ["../../../../../../Modules/HumanResource/PublicHoliday/PublicHoliday/PublicHolidayPage.ts", "../../../../../../Modules/HumanResource/PublicHoliday/PublicHoliday/PublicHolidayGrid.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\nimport { PublicHolidayGrid } from './PublicHolidayGrid';\n\nexport default function pageInit() {\n    initFullHeightGridPage(new PublicHolidayGrid($('#GridDiv')).element);\n}", "import {  Decorators, EntityGrid, ListResponse, RetrieveResponse } from '@serenity-is/corelib';\nimport { PublicHolidayColumns, PublicHolidayRow, PublicHolidayService } from '../../../ServerTypes/PublicHoliday';\nimport { PublicHolidayDialog } from './PublicHolidayDialog';\nimport Holidays from 'date-holidays'\nimport { EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { confirm,serviceCall } from '@serenity-is/corelib/q';\nimport { InitYearService } from '../../../ServerTypes/InitYear';\nimport { CompanySettingsService } from '../../../ServerTypes/CompanySettings';\n\n@Decorators.registerClass('HRMSoftware.PublicHoliday.PublicHolidayGrid')\nexport class PublicHolidayGrid extends EntityGrid<PublicHolidayRow, any> {\n    protected getColumnsKey() { return PublicHolidayColumns.columnsKey; }\n    protected getDialogType() { return PublicHolidayDialog; }\n    protected getRowDefinition() { return PublicHolidayRow; }\n    protected getService() { return PublicHolidayService.baseUrl; }\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n\n    protected getButtons() {\n        var buttons = super.getButtons();\n\n     \n\n        buttons.push({\n            title: 'Renew Public Holiday',\n            cssClass: 'apply-changes-button',\n            onClick: e => {\n                confirm(\n                    \"Do you sure you want to renew the public holiday\",\n                    () => {\n                        var country\n                       \n                        CompanySettingsService.List({\n                        }, response => {\n                            country = response.Entities[0].BasedCountry\n                            console.log(country)\n\n                            InitYearService.List({\n                            }, response => {\n\n                                for (var index in response.Entities) {\n                                    var hd = new Holidays(country)\n                                    var year = response.Entities[index].Year\n                                    var current_year_holidays = hd.getHolidays(year)\n                                    for (var current_holiday in current_year_holidays) {\n                                        var date = current_year_holidays[current_holiday].date.substring(0, 10);\n\n                                        var dateObj = new Date(date);\n\n                                        // Extract year, month, and day from the date object\n                                        var year = dateObj.getFullYear();\n                                        var month = (dateObj.getMonth() + 1).toString().padStart(2, '0'); // Month is 0-indexed\n                                        var day = dateObj.getDate().toString().padStart(2, '0');\n\n                                        // Generate the YYYY-MM-DD format string\n                                        var formattedDate = `${year}-${month}-${day}`;\n                                        var HolidayName = current_year_holidays[current_holiday].name;\n\n                                        serviceCall<RetrieveResponse<any>>({\n                                            service: EmployeeProfileService.baseUrl + '/CreatePublicHolidayRecord',\n                                            data: {\n                                                'HolidayName': HolidayName,\n                                                'Date': formattedDate,\n                                                'CountryCode': country\n                                            },\n                                            method: \"GET\",\n                                            async: false,\n                                            onSuccess: (response) => {\n                                            },\n                                            onError: (error) => {\n                                                console.log(error.Error);\n                                            }\n                                        });\n\n                                    }\n\n                                }\n\n                                location.reload()\n\n\n\n                            });\n\n\n\n\n\n                        });\n\n                    \n                    }\n\n                )\n\n            },\n            separator: true\n        });\n\n        return buttons;\n    }\n\n    protected onViewProcessData(response: ListResponse<PublicHolidayRow>) {\n        response = super.onViewProcessData(response);\n        this.toolbar.findButton(\"column-picker-button\").toggle(false);\n        return response;\n\n    }\n\n\n    protected onClick(e: JQueryEventObject, row: number, cell: number) {\n        super.onClick(e, row, cell);\n        if (e.isDefaultPrevented())\n            return;\n        // get reference to current item\n        var item = this.itemAt(row);\n        // get reference to clicked element\n        var target = $(e.target);\n        var value = target[0].checked == true ? 1 : -1\n        PublicHolidayService.Update({\n            EntityId: item.Id,\n            Entity:\n            {\n                \"IsActive\": value\n            },\n        });\n    }\n}"],
  "mappings": "07BAAC,IAAAA,EAAuC,SCAxC,IAAAC,EAAwE,SAKxE,IAAAC,EAAoC,SAK7B,IAAMC,EAAN,cAAgC,YAAkC,CAC3D,eAAgB,CAAE,OAAOC,EAAqB,UAAY,CAC1D,eAAgB,CAAE,OAAOC,CAAqB,CAC9C,kBAAmB,CAAE,OAAOC,CAAkB,CAC9C,YAAa,CAAE,OAAOC,EAAqB,OAAS,CAE9D,YAAYC,EAAmB,CAC3B,MAAMA,CAAS,CACnB,CAEU,YAAa,CACnB,IAAIC,EAAU,MAAM,WAAW,EAI/B,OAAAA,EAAQ,KAAK,CACT,MAAO,uBACP,SAAU,uBACV,QAASC,GAAK,IACV,WACI,mDACA,IAAM,CACF,IAAIC,EAEJC,EAAuB,KAAK,CAC5B,EAAGC,GAAY,CACXF,EAAUE,EAAS,SAAS,CAAC,EAAE,aAC/B,QAAQ,IAAIF,CAAO,EAEnBG,EAAgB,KAAK,CACrB,EAAGD,GAAY,CAEX,QAASE,KAASF,EAAS,SAAU,CACjC,IAAIG,EAAK,IAAIC,EAASN,CAAO,EACzBO,EAAOL,EAAS,SAASE,CAAK,EAAE,KAChCI,EAAwBH,EAAG,YAAYE,CAAI,EAC/C,QAASE,KAAmBD,EAAuB,CAC/C,IAAIE,EAAOF,EAAsBC,CAAe,EAAE,KAAK,UAAU,EAAG,EAAE,EAElEE,EAAU,IAAI,KAAKD,CAAI,EAGvBH,EAAOI,EAAQ,YAAY,EAC3BC,GAASD,EAAQ,SAAS,EAAI,GAAG,SAAS,EAAE,SAAS,EAAG,GAAG,EAC3DE,EAAMF,EAAQ,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAG,GAAG,EAGlDG,EAAgB,GAAGP,KAAQK,KAASC,IACpCE,EAAcP,EAAsBC,CAAe,EAAE,QAEzD,eAAmC,CAC/B,QAASO,EAAuB,QAAU,6BAC1C,KAAM,CACF,YAAeD,EACf,KAAQD,EACR,YAAed,CACnB,EACA,OAAQ,MACR,MAAO,GACP,UAAYE,GAAa,CACzB,EACA,QAAUe,GAAU,CAChB,QAAQ,IAAIA,EAAM,KAAK,CAC3B,CACJ,CAAC,CAEL,CAEJ,CAEA,SAAS,OAAO,CAIpB,CAAC,CAML,CAAC,CAGL,CAEJ,CAEJ,EACA,UAAW,EACf,CAAC,EAEMnB,CACX,CAEU,kBAAkBI,EAA0C,CAClE,OAAAA,EAAW,MAAM,kBAAkBA,CAAQ,EAC3C,KAAK,QAAQ,WAAW,sBAAsB,EAAE,OAAO,EAAK,EACrDA,CAEX,CAGU,QAAQ,EAAsBgB,EAAaC,EAAc,CAE/D,GADA,MAAM,QAAQ,EAAGD,EAAKC,CAAI,EACtB,GAAE,mBAAmB,EAGzB,KAAIC,EAAO,KAAK,OAAOF,CAAG,EAEtBG,EAAS,EAAE,EAAE,MAAM,EACnBC,EAAQD,EAAO,CAAC,EAAE,SAAW,GAAO,EAAI,GAC5CzB,EAAqB,OAAO,CACxB,SAAUwB,EAAK,GACf,OACA,CACI,SAAYE,CAChB,CACJ,CAAC,EACL,CACJ,EAvHaC,EAAA/B,EAAA,qBAAAA,EAANgC,EAAA,CADN,aAAW,cAAc,6CAA6C,GAC1DhC,GDPE,SAARiC,GAA4B,IAC/B,0BAAuB,IAAIC,EAAkB,EAAE,UAAU,CAAC,EAAE,OAAO,CACvE,CAFwBC,EAAAF,EAAA",
  "names": ["import_q", "import_corelib", "import_q", "PublicHolidayGrid", "PublicHolidayColumns", "PublicHolidayDialog", "PublicHolidayRow", "PublicHolidayService", "container", "buttons", "e", "country", "CompanySettingsService", "response", "InitYearService", "index", "hd", "Holidays", "year", "current_year_holidays", "current_holiday", "date", "dateObj", "month", "day", "formattedDate", "HolidayName", "EmployeeProfileService", "error", "row", "cell", "item", "target", "value", "__name", "__decorateClass", "pageInit", "PublicHolidayGrid", "__name"]
}
