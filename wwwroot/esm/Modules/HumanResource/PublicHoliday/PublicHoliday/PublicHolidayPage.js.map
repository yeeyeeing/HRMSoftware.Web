{
  "version": 3,
  "sources": ["../../../../../../Modules/HumanResource/PublicHoliday/PublicHoliday/PublicHolidayPage.ts", "../../../../../../Modules/HumanResource/PublicHoliday/PublicHoliday/PublicHolidayGrid.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\nimport { PublicHolidayGrid } from './PublicHolidayGrid';\n\nexport default function pageInit() {\n    initFullHeightGridPage(new PublicHolidayGrid($('#GridDiv')).element);\n}", "import {  Decorators, EntityGrid, ListResponse, RetrieveResponse } from '@serenity-is/corelib';\nimport { PublicHolidayColumns, PublicHolidayRow, PublicHolidayService } from '../../../ServerTypes/PublicHoliday';\nimport { PublicHolidayDialog } from './PublicHolidayDialog';\nimport Holidays from 'date-holidays'\nimport { EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { confirm,serviceCall } from '@serenity-is/corelib/q';\nimport { InitYearService } from '../../../ServerTypes/InitYear';\nimport { CompanySettingsService } from '../../../ServerTypes/CompanySettings';\n\n@Decorators.registerClass('HRMSoftware.PublicHoliday.PublicHolidayGrid')\nexport class PublicHolidayGrid extends EntityGrid<PublicHolidayRow, any> {\n    protected getColumnsKey() { return PublicHolidayColumns.columnsKey; }\n    protected getDialogType() { return PublicHolidayDialog; }\n    protected getRowDefinition() { return PublicHolidayRow; }\n    protected getService() { return PublicHolidayService.baseUrl; }\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n\n    protected getButtons() {\n        var buttons = super.getButtons();\n        var self = this\n     \n\n        buttons.push({\n            title: 'Renew Public Holiday',\n            cssClass: 'apply-changes-button',\n            onClick: e => {\n                confirm(\n                    \"Do you sure you want to renew the public holiday\",\n                    async () => {\n                        try {\n                            let country: string | undefined;\n                            const companySettings = await new Promise<any[]>((resolve, reject) => {\n                                CompanySettingsService.List({}, response => {\n                                    resolve(response.Entities);\n                                }, error => reject(error));\n                            });\n                            for (const res of companySettings) {\n                                if (res.IsActive === 1) {\n                                    country = res.BasedCountry;\n                                    break;\n                                }\n                            }\n                            if (!country) \n                                return;\n                            \n                            // Get all years from InitYearService\n                            const years = await new Promise<any[]>((resolve, reject) => {\n                                InitYearService.List({}, response => {\n                                    resolve(response.Entities);\n                                }, error => reject(error));\n                            });\n                            // Store promises for all service calls\n                            const servicePromises: Promise<any>[] = [];\n                            for (const yearEntry of years) {\n                                const hd = new Holidays(country);\n                                const year = yearEntry.Year;\n                                const current_year_holidays = hd.getHolidays(year);\n                                console.log(hd);\n                                console.log(current_year_holidays);\n\n                                for (const current_holiday of current_year_holidays) {\n                                    const date = current_holiday.date.substring(0, 10);\n                                    const dateObj = new Date(date);\n\n                                    // Format date to YYYY-MM-DD\n                                    const formattedDate = `${dateObj.getFullYear()}-${(dateObj.getMonth() + 1).toString().padStart(2, '0')}-${dateObj.getDate().toString().padStart(2, '0')}`;\n                                    const HolidayName = current_holiday.name;\n                                    \n                                    console.log(HolidayName);\n                                    console.log(formattedDate);\n                                    console.log(country);\n                                    \n                                    // Store each service call in the promises array\n                                    const serviceCallPromise = new Promise<void>((resolve, reject) => {\n                                        serviceCall<RetrieveResponse<any>>({\n                                            service: EmployeeProfileService.baseUrl + '/CreatePublicHolidayRecord',\n                                            data: {\n                                                'HolidayName': HolidayName,\n                                                'Date': formattedDate,\n                                                'CountryCode': country\n                                            },\n                                            method: \"GET\",\n                                            async: false,\n                                            onSuccess: () => resolve(),\n                                            onError: (error) => {\n                                                console.log(error.Error);\n                                                reject(error);\n                                            }\n                                        });\n                                    });\n\n                                    servicePromises.push(serviceCallPromise);\n                                }\n                            }\n                            // Wait for all service calls to complete\n                            await Promise.all(servicePromises);\n                            self.refresh()\n                        } catch (error) {\n                            console.error(\"Error processing holidays:\", error);\n                        }\n                    }\n                );\n            },\n            separator: true\n        });\n\n        return buttons;\n    }\n\n    protected onViewProcessData(response: ListResponse<PublicHolidayRow>) {\n        response = super.onViewProcessData(response);\n        this.toolbar.findButton(\"column-picker-button\").toggle(false);\n        return response;\n\n    }\n\n\n    protected onClick(e: JQueryEventObject, row: number, cell: number) {\n        super.onClick(e, row, cell);\n        if (e.isDefaultPrevented())\n            return;\n        // get reference to current item\n        var item = this.itemAt(row);\n        // get reference to clicked element\n        var target = $(e.target);\n        var value = target[0].checked == true ? 1 : -1\n        PublicHolidayService.Update({\n            EntityId: item.Id,\n            Entity:\n            {\n                \"IsActive\": value\n            },\n        });\n    }\n}"],
  "mappings": "o/BAAC,IAAAA,EAAuC,SCAxC,IAAAC,EAAwE,SAKxE,IAAAC,EAAoC,SAK7B,IAAMC,EAAN,cAAgC,YAAkC,CAC3D,eAAgB,CAAE,OAAOC,EAAqB,UAAY,CAC1D,eAAgB,CAAE,OAAOC,CAAqB,CAC9C,kBAAmB,CAAE,OAAOC,CAAkB,CAC9C,YAAa,CAAE,OAAOC,EAAqB,OAAS,CAE9D,YAAYC,EAAmB,CAC3B,MAAMA,CAAS,CACnB,CAEU,YAAa,CACnB,IAAIC,EAAU,MAAM,WAAW,EAC3BC,EAAO,KAGX,OAAAD,EAAQ,KAAK,CACT,MAAO,uBACP,SAAU,uBACV,QAASE,GAAK,IACV,WACI,mDACA,IAAYC,EAAA,sBACR,GAAI,CACA,IAAIC,EACEC,EAAkB,MAAM,IAAI,QAAe,CAACC,EAASC,IAAW,CAClEC,EAAuB,KAAK,CAAC,EAAGC,GAAY,CACxCH,EAAQG,EAAS,QAAQ,CAC7B,EAAGC,GAASH,EAAOG,CAAK,CAAC,CAC7B,CAAC,EACD,QAAWC,KAAON,EACd,GAAIM,EAAI,WAAa,EAAG,CACpBP,EAAUO,EAAI,aACd,KACJ,CAEJ,GAAI,CAACP,EACD,OAGJ,IAAMQ,EAAQ,MAAM,IAAI,QAAe,CAACN,EAASC,IAAW,CACxDM,EAAgB,KAAK,CAAC,EAAGJ,GAAY,CACjCH,EAAQG,EAAS,QAAQ,CAC7B,EAAGC,GAASH,EAAOG,CAAK,CAAC,CAC7B,CAAC,EAEKI,EAAkC,CAAC,EACzC,QAAWC,KAAaH,EAAO,CAC3B,IAAMI,EAAK,IAAIC,EAASb,CAAO,EACzBc,EAAOH,EAAU,KACjBI,EAAwBH,EAAG,YAAYE,CAAI,EACjD,QAAQ,IAAIF,CAAE,EACd,QAAQ,IAAIG,CAAqB,EAEjC,QAAWC,KAAmBD,EAAuB,CACjD,IAAME,EAAOD,EAAgB,KAAK,UAAU,EAAG,EAAE,EAC3CE,EAAU,IAAI,KAAKD,CAAI,EAGvBE,EAAgB,GAAGD,EAAQ,YAAY,MAAMA,EAAQ,SAAS,EAAI,GAAG,SAAS,EAAE,SAAS,EAAG,GAAG,KAAKA,EAAQ,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAG,GAAG,IAChJE,EAAcJ,EAAgB,KAEpC,QAAQ,IAAII,CAAW,EACvB,QAAQ,IAAID,CAAa,EACzB,QAAQ,IAAInB,CAAO,EAGnB,IAAMqB,EAAqB,IAAI,QAAc,CAACnB,EAASC,IAAW,IAC9D,eAAmC,CAC/B,QAASmB,EAAuB,QAAU,6BAC1C,KAAM,CACF,YAAeF,EACf,KAAQD,EACR,YAAenB,CACnB,EACA,OAAQ,MACR,MAAO,GACP,UAAW,IAAME,EAAQ,EACzB,QAAUI,GAAU,CAChB,QAAQ,IAAIA,EAAM,KAAK,EACvBH,EAAOG,CAAK,CAChB,CACJ,CAAC,CACL,CAAC,EAEDI,EAAgB,KAAKW,CAAkB,CAC3C,CACJ,CAEA,MAAM,QAAQ,IAAIX,CAAe,EACjCb,EAAK,QAAQ,CACjB,OAASS,EAAP,CACE,QAAQ,MAAM,6BAA8BA,CAAK,CACrD,CACJ,EACJ,CACJ,EACA,UAAW,EACf,CAAC,EAEMV,CACX,CAEU,kBAAkBS,EAA0C,CAClE,OAAAA,EAAW,MAAM,kBAAkBA,CAAQ,EAC3C,KAAK,QAAQ,WAAW,sBAAsB,EAAE,OAAO,EAAK,EACrDA,CAEX,CAGU,QAAQ,EAAsBkB,EAAaC,EAAc,CAE/D,GADA,MAAM,QAAQ,EAAGD,EAAKC,CAAI,EACtB,GAAE,mBAAmB,EAGzB,KAAIC,EAAO,KAAK,OAAOF,CAAG,EAEtBG,EAAS,EAAE,EAAE,MAAM,EACnBC,EAAQD,EAAO,CAAC,EAAE,SAAW,GAAO,EAAI,GAC5ChC,EAAqB,OAAO,CACxB,SAAU+B,EAAK,GACf,OACA,CACI,SAAYE,CAChB,CACJ,CAAC,EACL,CACJ,EA/HaC,EAAAtC,EAAA,qBAAAA,EAANuC,EAAA,CADN,aAAW,cAAc,6CAA6C,GAC1DvC,GDPE,SAARwC,GAA4B,IAC/B,0BAAuB,IAAIC,EAAkB,EAAE,UAAU,CAAC,EAAE,OAAO,CACvE,CAFwBC,EAAAF,EAAA",
  "names": ["import_q", "import_corelib", "import_q", "PublicHolidayGrid", "PublicHolidayColumns", "PublicHolidayDialog", "PublicHolidayRow", "PublicHolidayService", "container", "buttons", "self", "e", "__async", "country", "companySettings", "resolve", "reject", "CompanySettingsService", "response", "error", "res", "years", "InitYearService", "servicePromises", "yearEntry", "hd", "Holidays", "year", "current_year_holidays", "current_holiday", "date", "dateObj", "formattedDate", "HolidayName", "serviceCallPromise", "EmployeeProfileService", "row", "cell", "item", "target", "value", "__name", "__decorateClass", "pageInit", "PublicHolidayGrid", "__name"]
}
