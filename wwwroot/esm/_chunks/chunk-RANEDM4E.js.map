{
  "version": 3,
  "sources": ["../../../Modules/HumanResource/EmployeeGroup/EmployeeGroup/EmployeeGroupDialog.ts"],
  "sourcesContent": ["import { Decorators, EntityDialog, Select2Editor, EditorUtils } from '@serenity-is/corelib';\nimport { disableSelection } from '@serenity-is/sleekgrid';\nimport { EmployeeGroupForm, EmployeeGroupRow, EmployeeGroupService, EmployeeGroupShiftRow, EmployeeGroupShiftService } from '../../../ServerTypes/EmployeeGroup';\nimport { EmployeeGroupingsService } from '../../../ServerTypes/EmployeeGroupings';\nimport { EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { getLookup, getLookupAsync } from '@serenity-is/corelib/q';\nimport 'toolcool-color-picker';\nimport { serviceCall, RetrieveResponse, alertDialog } from '@serenity-is/corelib/q';\nimport ColorPicker from '@thednp/color-picker';\nimport { ViewShiftHistoryService } from '../../../ServerTypes/ViewShiftHistory';\nimport { ShiftService } from '../../../ServerTypes/Shift';\nimport { EmployeeGroupShiftPatternRow, EmployeeGroupShiftPatternService } from '../../../ServerTypes/EmployeeGroup';\nimport { SetEmployeeShiftService } from '../../../ServerTypes/SetEmployeeShift';\nimport { isEmptyOrNull } from '@serenity-is/corelib/q';\nimport { ShiftHistoryRow, ShiftHistoryService } from '../../../ServerTypes/ShiftHistory';\n\n@Decorators.registerClass('HRMSoftware.EmployeeGroup.EmployeeGroupDialog')\nexport class EmployeeGroupDialog extends EntityDialog<EmployeeGroupRow, any> {\n    protected getFormKey() { return EmployeeGroupForm.formKey; }\n    protected getRowDefinition() { return EmployeeGroupRow; }\n    protected getService() { return EmployeeGroupService.baseUrl; }\n    public ColorCode: string;\n    protected form = new EmployeeGroupForm(this.idPrefix);\n    public EmployeeProfileTable: any;\n\n    constructor() {\n        super();\n         this.EmployeeProfileTable = getLookup(\"EmployeeProfile.EmployeeProfile\")\n\n    }\n\n\n\n    protected getDialogOptions() {\n        let opt = super.getDialogOptions()\n        opt.height = 800\n        opt.width = 1000\n        return opt\n    }\n   \n  \n    protected save_submitHandler(response): void\n    {\n        var res = response\n        var self = this\n        function parseDate(dateStr: string): Date {\n            return new Date(dateStr);\n        }\n        function areShiftsOverlapping(\n            start1: Date, end1: Date,\n            start2: Date, end2: Date\n        ): boolean {\n            // Check if one shift starts before the other shift ends and ends after the other shift starts\n            return start1 < end2 && end1 >= start2;\n        }\n        function areAnyShiftsOverlapping(shifts): boolean {\n            var result = false\n            for (let i = 0; i < shifts.length; i++) {\n\n                var start1 = parseDate(shifts[i].ShiftStartDate);\n                var end1 = parseDate(shifts[i].ShiftEndDate);\n                for (let j = 0; j < shifts.length; j++) {\n                    if (i == j)\n                        continue\n                    var start2 = parseDate(shifts[j].ShiftStartDate);\n                    var end2 = parseDate(shifts[j].ShiftEndDate);\n                    if (areShiftsOverlapping(start1, end1, start2, end2)) {\n                        var concatenatedString = 'There is a clash between '\n                            + shifts[i].Shift + ' and ' + shifts[j].Shift;\n                        alertDialog(concatenatedString)\n                        result = true\n                        break;\n                    }\n                }\n                if (result == true)\n                    break\n            }\n            return result; // No overlaps\n        }\n        var Results: any[] = []\n\n        if (areAnyShiftsOverlapping(this.form.Shifts.value))//check for overlapping shift dates\n            return\n\n        for (let i = 0; i < this.form.EmployeeList.values.length; i++) {\n            for (let j = 0; j < this.form.Shifts.value.length; j++) {\n                var Obj = new ConcreteEmployeeShiftPatternRow()\n                Obj.EmployeeRowId = parseInt(this.form.EmployeeList.values[i])\n                Obj.ShiftStartDate = this.form.Shifts.value[j].ShiftStartDate\n                Obj.ShiftEndDate = this.form.Shifts.value[j].ShiftEndDate\n                Obj.ShiftId = this.form.Shifts.value[j].ShiftId\n                Results.push(Obj)\n            }\n        }\n        this.form.ActualShifts.value = Results\n        this.form.ActualShifts.refresh()\n        if (this.isNew()) {\n            var EmployeeListElement = document.getElementById(this.idPrefix + 'EmployeeList')\n            EmployeeGroupShiftPatternService.List({\n                Criteria: [[EmployeeGroupShiftPatternRow.Fields.EmployeeRowId], '=', $(EmployeeListElement).val()]\n            }, response => {\n                var save = true\n                console.log(response)\n                for (res in response.Entities) {\n                    if (!isEmptyOrNull(response.Entities[res].EmployeeRowId)) {\n                        if (this.form.EmployeeList.values.includes(response.Entities[res].EmployeeRowId.toString())) {\n                            var Start1 = parseDate(response.Entities[res].ShiftStartDate)\n                            var End1 = parseDate(response.Entities[res].ShiftEndDate)\n                            for (let i = 0; i < self.form.Shifts.value.length; i++) {\n                                var Start2 = parseDate(self.form.Shifts.value[i].ShiftStartDate)\n                                var End2 = parseDate(self.form.Shifts.value[i].ShiftEndDate)\n                                if (areShiftsOverlapping(Start1, End1, Start2, End2) == true) {\n                                    var EmployeeID\n                                    for (var index in self.EmployeeProfileTable.items) {\n                                        if (self.EmployeeProfileTable.items[index].Id == response.Entities[res].EmployeeRowId) {\n                                            EmployeeID = self.EmployeeProfileTable.items[index].EmployeeID\n                                            break\n                                        }\n                                    }\n\n\n                                        var concatenatedString = 'Employee ' + EmployeeID + ' Already has a Shift from ' + response.Entities[res].ShiftStartDate +\n                                            ' until ' + response.Entities[res].ShiftEndDate\n                                        save = false\n                                        alertDialog(concatenatedString)\n\n                                    if (save = false)\n                                        return\n\n                                }\n                            }\n\n                        }\n\n                    }\n\n                }\n                if (save == true)\n                    super.save_submitHandler(res)\n            })\n\n        }\n        else {\n            EmployeeGroupShiftPatternService.List({\n                Criteria: [[EmployeeGroupShiftPatternRow.Fields.EmployeeRowId], '=', self.form.EmployeeList.values]\n\n            }, response => {\n                var save = true\n                for (res in response.Entities) {\n                    if (response.Entities[res].EmployeeGroupId = self.entityId) \n                        continue\n                    else if (!isEmptyOrNull(response.Entities[res].EmployeeRowId)) {\n                        if (this.form.EmployeeList.values.indexOf(response.Entities[res].EmployeeRowId.toString()) != -1) {\n                            var Start1 = parseDate(response.Entities[res].ShiftStartDate)\n                            var End1 = parseDate(response.Entities[res].ShiftEndDate)\n                            for (let i = 0; i < self.form.Shifts.value.length; i++) {\n                                var Start2 = parseDate(self.form.Shifts.value[i].ShiftStartDate)\n                                var End2 = parseDate(self.form.Shifts.value[i].ShiftEndDate)\n                           \n                                if (areShiftsOverlapping(Start1, End1, Start2, End2)) {\n                                    var EmployeeID\n                                    for (var index in self.EmployeeProfileTable.items) {\n                                        if (self.EmployeeProfileTable.items[index].Id == response.Entities[res].EmployeeRowId) {\n                                            EmployeeID = self.EmployeeProfileTable.items[index].EmployeeID\n                                            break\n                                        }\n                                    }\n                                        var concatenatedString = 'Employee ' + EmployeeID + ' Already has a Shift from ' + response.Entities[res].ShiftStartDate +\n                                            ' until ' + response.Entities[res].ShiftEndDate\n                                        save = false\n                                        alertDialog(concatenatedString)\n                                    if (save = false)\n                                        return\n                                }\n                            }\n                        }\n                    }\n                }\n                if (save == true) {\n                    for (res in response.Entities) {\n                        if (response.Entities[res].EmployeeGroupId == self.entityId) {\n                            EmployeeShiftPatternService.Delete({\n                                EntityId: response.Entities[res].Id\n                            });\n                        }\n                    }\n                    EmployeeGroupShiftService.List({\n                        Criteria: [[EmployeeGroupShiftRow.Fields.EmployeeGroupID], '=', self.entityId]\n                    }, response => {\n                        for (var res in response.Entities) {\n                            if (response.Entities[res].EmployeeGroupId == self.entityId) {\n                                EmployeeGroupShiftService.Delete({\n                                    EntityId: response.Entities[res].Id\n                                });\n                            }\n                        }\n\n                        for (let i = 0; i < self.form.Shifts.value.length; i++) {\n                            EmployeeGroupShiftService.Create({\n                                Entity:\n                                {\n                                    \"EmployeeGroupId\": self.entityId,\n                                    \"ShiftStartDate\": self.form.Shifts.value[i].ShiftStartDate,\n                                    \"ShiftEndDate\": self.form.Shifts.value[i].ShiftEndDate,\n                                    \"ShiftId\": self.form.Shifts.value[i].ShiftId,\n                                },\n                            });\n                            for (let j = 0; j < self.form.EmployeeList.values.length; j++) {\n                                EmployeeShiftPatternService.Create({\n                                    Entity:\n                                    {\n                                        \"EmployeeRowId\": parseInt(self.form.EmployeeList.values[j]),\n                                        \"EmployeeGroupID\": self.entityId,\n                                        \"ShiftStartDate\": self.form.Shifts.value[i].ShiftStartDate,\n                                        \"ShiftEndDate\": self.form.Shifts.value[i].ShiftEndDate,\n                                        \"ShiftId\": self.form.Shifts.value[i].ShiftId,\n                                    },\n                                });\n\n                            }\n\n                        }\n\n\n                        self.dialogClose()\n\n                    })\n                    \n\n                }\n            })\n\n\n\n\n\n        }\n            \n        \n        \n    }\n\n\n    protected onDialogOpen()\n    {\n        super.onDialogOpen()\n        if (!this.isNew()) {\n            this.form.Shifts.value = this.form.Shifts.value.sort((a, b) => new Date(a.ShiftStartDate).getTime() - new Date(b.ShiftStartDate).getTime());\n            this.form.Shifts.refresh()\n        }\n\n        $(this.form.Shifts.value).on(\"change\", function () {\n            console.log('haha')\n        })\n\n        EditorUtils.setReadonly(this.form.ShiftColor.element, true);\n        $('.ActualShifts').hide()\n\n        var ColorChoser = document.createElement('toolcool-color-picker');\n        // Set the id attribute\n        ColorChoser.setAttribute('id', 'color-picker-1');\n        // Set the color attribute\n        ColorChoser.setAttribute('color', '#e76ff1');\n\n        this.form.ShiftColor.element.after(ColorChoser)\n\n        \n        ColorChoser.addEventListener('change', (evt: Event) => {\n            const customEvent = evt as CustomEvent;\n            this.ColorCode = customEvent.detail.hex\n            this.form.ShiftColor.value = this.ColorCode\n\n        });\n\n\n        this.form.ShiftColor.element.click(function () {\n\n            ColorChoser.opened = true \n\n        }\n        )\n\n\n\n\n    }\n}\n\nclass ConcreteEmployeeShiftPatternRow extends EmployeeGroupShiftPatternRow {\n    constructor() {\n        super();\n    }\n}"],
  "mappings": "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",
  "names": ["import_corelib", "import_q", "import_q", "import_q", "EmployeeGroupDialog", "EmployeeGroupForm", "EmployeeGroupRow", "EmployeeGroupService", "opt", "response", "res", "self", "parseDate", "dateStr", "__name", "areShiftsOverlapping", "start1", "end1", "start2", "end2", "areAnyShiftsOverlapping", "shifts", "result", "i", "j", "concatenatedString", "Results", "Obj", "ConcreteEmployeeShiftPatternRow", "EmployeeListElement", "EmployeeGroupShiftPatternService", "EmployeeGroupShiftPatternRow", "save", "Start1", "End1", "Start2", "End2", "EmployeeID", "index", "EmployeeGroupShiftService", "EmployeeGroupShiftRow", "a", "b", "ColorChoser", "evt", "customEvent", "__decorateClass"]
}
