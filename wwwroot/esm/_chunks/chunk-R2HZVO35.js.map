{
  "version": 3,
  "sources": ["../../../Modules/ServerTypes/PerformanceAppraisal/CompanyProfileColumns.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/CompanyProfileRow.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/CompanyProfileService.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalEvaluationColumns.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalEvaluationRow.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalEvaluationService.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalFileAttachColumns.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalFileAttachRow.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalFileAttachService.ts", "../../../Modules/ServerTypes/Web/Modules.PerformanceAppraisal.PerformanceAppraisalForm.PerformanceAppraisalFormStatus.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalFormColumns.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalFormRow.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalFormService.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalQuestionAnswerType.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalQuestionColumns.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalQuestionRow.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalQuestionService.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalResponseColumns.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalResponseRow.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalResponseService.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalTemplateColumns.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalTemplateRow.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalTemplateService.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalTypeColumns.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalTypeRow.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalTypeService.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/CompanyProfileForm.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalEvaluationForm.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalFileAttachForm.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalFormForm.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalQuestionForm.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalResponseForm.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalReviewerRow.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalReviewerService.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalTemplateDepartmentColumns.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalTemplateDepartmentForm.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalTemplateDepartmentRow.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalTemplateDepartmentService.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalTemplateForm.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalTemplateQuestionColumns.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalTemplateQuestionForm.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalTemplateQuestionRow.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalTemplateQuestionService.ts", "../../../Modules/ServerTypes/PerformanceAppraisal/PerformanceAppraisalTypeForm.ts"],
  "sourcesContent": ["\uFEFFexport class CompanyProfileColumns {\n    static columnsKey = 'PerformanceAppraisal.CompanyProfile';\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface CompanyProfileRow {\n    Id?: number;\n    Title?: string;\n    Address?: string;\n    Tel?: string;\n    Website?: string;\n    Picture?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class CompanyProfileRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'Title';\n    static readonly localTextPrefix = 'PerformanceAppraisal.CompanyProfile';\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<CompanyProfileRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { CompanyProfileRow } from \"./CompanyProfileRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace CompanyProfileService {\n    export const baseUrl = 'PerformanceAppraisal/CompanyProfile';\n\n    export declare function Create(request: SaveRequest<CompanyProfileRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<CompanyProfileRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<CompanyProfileRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<CompanyProfileRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PerformanceAppraisal/CompanyProfile/Create\",\n        Update: \"PerformanceAppraisal/CompanyProfile/Update\",\n        Delete: \"PerformanceAppraisal/CompanyProfile/Delete\",\n        Retrieve: \"PerformanceAppraisal/CompanyProfile/Retrieve\",\n        List: \"PerformanceAppraisal/CompanyProfile/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>CompanyProfileService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFexport class PerformanceAppraisalEvaluationColumns {\n    static columnsKey = 'PerformanceAppraisal.PerformanceAppraisalEvaluation';\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface PerformanceAppraisalEvaluationRow {\n    Id?: number;\n    FormId?: number;\n    Evaluation?: string;\n    Goals?: string;\n    Summary?: string;\n    BonusRate?: number;\n    OverallRate?: number;\n    EmployeeSignature?: string;\n    HodSignature?: string;\n    GeneralManagerSignature?: string;\n    EmployeeSignDate?: string;\n    HodSignDate?: string;\n    GeneralManagerSignDate?: string;\n    EmployeeSignID?: number;\n    HodSignID?: number;\n    GeneralManagerSignID?: number;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class PerformanceAppraisalEvaluationRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'Evaluation';\n    static readonly localTextPrefix = 'PerformanceAppraisal.PerformanceAppraisalEvaluation';\n    static readonly deletePermission = '*';\n    static readonly insertPermission = '*';\n    static readonly readPermission = '*';\n    static readonly updatePermission = '*';\n\n    static readonly Fields = fieldsProxy<PerformanceAppraisalEvaluationRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { PerformanceAppraisalEvaluationRow } from \"./PerformanceAppraisalEvaluationRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace PerformanceAppraisalEvaluationService {\n    export const baseUrl = 'PerformanceAppraisal/PerformanceAppraisalEvaluation';\n\n    export declare function Create(request: SaveRequest<PerformanceAppraisalEvaluationRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<PerformanceAppraisalEvaluationRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<PerformanceAppraisalEvaluationRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<PerformanceAppraisalEvaluationRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PerformanceAppraisal/PerformanceAppraisalEvaluation/Create\",\n        Update: \"PerformanceAppraisal/PerformanceAppraisalEvaluation/Update\",\n        Delete: \"PerformanceAppraisal/PerformanceAppraisalEvaluation/Delete\",\n        Retrieve: \"PerformanceAppraisal/PerformanceAppraisalEvaluation/Retrieve\",\n        List: \"PerformanceAppraisal/PerformanceAppraisalEvaluation/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>PerformanceAppraisalEvaluationService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFexport class PerformanceAppraisalFileAttachColumns {\n    static columnsKey = 'PerformanceAppraisal.PerformanceAppraisalFileAttach';\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface PerformanceAppraisalFileAttachRow {\n    Id?: number;\n    Files?: string;\n    Remark?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class PerformanceAppraisalFileAttachRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'Files';\n    static readonly localTextPrefix = 'PerformanceAppraisal.PerformanceAppraisalFileAttach';\n    static readonly deletePermission = '*';\n    static readonly insertPermission = '*';\n    static readonly readPermission = '*';\n    static readonly updatePermission = '*';\n\n    static readonly Fields = fieldsProxy<PerformanceAppraisalFileAttachRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { PerformanceAppraisalFileAttachRow } from \"./PerformanceAppraisalFileAttachRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\nimport { DeleteAllRequest } from \"../Web/Modules.PerformanceAppraisal.DeleteAllRequest\";\n\nexport namespace PerformanceAppraisalFileAttachService {\n    export const baseUrl = 'PerformanceAppraisal/PerformanceAppraisalFileAttach';\n\n    export declare function Create(request: SaveRequest<PerformanceAppraisalFileAttachRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<PerformanceAppraisalFileAttachRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<PerformanceAppraisalFileAttachRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<PerformanceAppraisalFileAttachRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function DeleteAll(request: DeleteAllRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PerformanceAppraisal/PerformanceAppraisalFileAttach/Create\",\n        Update: \"PerformanceAppraisal/PerformanceAppraisalFileAttach/Update\",\n        Delete: \"PerformanceAppraisal/PerformanceAppraisalFileAttach/Delete\",\n        Retrieve: \"PerformanceAppraisal/PerformanceAppraisalFileAttach/Retrieve\",\n        List: \"PerformanceAppraisal/PerformanceAppraisalFileAttach/List\",\n        DeleteAll: \"PerformanceAppraisal/PerformanceAppraisalFileAttach/DeleteAll\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List', \n        'DeleteAll'\n    ].forEach(x => {\n        (<any>PerformanceAppraisalFileAttachService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\n\nexport enum PerformanceAppraisalFormStatus {\n    Incomplete = 1,\n    Completed = 2,\n    Draft = 3,\n    AwaitingReview = 4,\n    PendingEmpDiscussion = 5,\n    PendingGmApproval = 6,\n    ReviewCompleted = 7\n}\nDecorators.registerEnumType(PerformanceAppraisalFormStatus, 'HRMSoftware.Web.Modules.PerformanceAppraisal.PerformanceAppraisalForm.PerformanceAppraisalFormStatus', 'PerformanceAppraisal.PerformanceAppraisalFormStatus');", "\uFEFFimport { PerformanceAppraisalFormStatus } from \"../Web/Modules.PerformanceAppraisal.PerformanceAppraisalForm.PerformanceAppraisalFormStatus\";\n\nexport class PerformanceAppraisalFormColumns {\n    static columnsKey = 'PerformanceAppraisal.PerformanceAppraisalForm';\n}\n\n[PerformanceAppraisalFormStatus]; // referenced types", "\uFEFFimport { PerformanceAppraisalFormStatus } from \"../Web/Modules.PerformanceAppraisal.PerformanceAppraisalForm.PerformanceAppraisalFormStatus\";\nimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface PerformanceAppraisalFormRow {\n    Id?: number;\n    TemplateId?: number;\n    TemplateName?: string;\n    HodId?: number;\n    EmployeeRowId?: number;\n    EmployeeName?: string;\n    EmployeeId?: string;\n    TypeId?: number;\n    TypeName?: string;\n    StartDate?: string;\n    EndDate?: string;\n    EvaluateStartDate?: string;\n    EvaluateEndDate?: string;\n    ApprovalStartDate?: string;\n    ApprovalEndDate?: string;\n    SubmissionStatus?: PerformanceAppraisalFormStatus;\n    ReviewStatus?: PerformanceAppraisalFormStatus;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class PerformanceAppraisalFormRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly localTextPrefix = 'PerformanceAppraisal.PerformanceAppraisalForm';\n    static readonly deletePermission = '*';\n    static readonly insertPermission = '*';\n    static readonly readPermission = '*';\n    static readonly updatePermission = '*';\n\n    static readonly Fields = fieldsProxy<PerformanceAppraisalFormRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { PerformanceAppraisalFormRow } from \"./PerformanceAppraisalFormRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\nimport { DeleteAllRequest } from \"../Web/Modules.PerformanceAppraisal.DeleteAllRequest\";\n\nexport namespace PerformanceAppraisalFormService {\n    export const baseUrl = 'PerformanceAppraisal/PerformanceAppraisalForm';\n\n    export declare function Create(request: SaveRequest<PerformanceAppraisalFormRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<PerformanceAppraisalFormRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<PerformanceAppraisalFormRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<PerformanceAppraisalFormRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function DeleteAll(request: DeleteAllRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PerformanceAppraisal/PerformanceAppraisalForm/Create\",\n        Update: \"PerformanceAppraisal/PerformanceAppraisalForm/Update\",\n        Delete: \"PerformanceAppraisal/PerformanceAppraisalForm/Delete\",\n        Retrieve: \"PerformanceAppraisal/PerformanceAppraisalForm/Retrieve\",\n        List: \"PerformanceAppraisal/PerformanceAppraisalForm/List\",\n        DeleteAll: \"PerformanceAppraisal/PerformanceAppraisalForm/DeleteAll\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List', \n        'DeleteAll'\n    ].forEach(x => {\n        (<any>PerformanceAppraisalFormService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\n\nexport enum PerformanceAppraisalQuestionAnswerType {\n    Type = 1,\n    Text = 2,\n    Rating = 3\n}\nDecorators.registerEnumType(PerformanceAppraisalQuestionAnswerType, 'HRMSoftware.PerformanceAppraisal.PerformanceAppraisalQuestionAnswerType', 'PerformanceAppraisal.PerformanceAppraisalQuestionAnswerType');", "\uFEFFimport { PerformanceAppraisalQuestionAnswerType } from \"./PerformanceAppraisalQuestionAnswerType\";\n\nexport class PerformanceAppraisalQuestionColumns {\n    static columnsKey = 'PerformanceAppraisal.PerformanceAppraisalQuestion';\n}\n\n[PerformanceAppraisalQuestionAnswerType]; // referenced types", "\uFEFFimport { PerformanceAppraisalQuestionAnswerType } from \"./PerformanceAppraisalQuestionAnswerType\";\nimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface PerformanceAppraisalQuestionRow {\n    Id?: number;\n    Questions?: string;\n    AnswerType?: PerformanceAppraisalQuestionAnswerType;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class PerformanceAppraisalQuestionRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'Questions';\n    static readonly localTextPrefix = 'PerformanceAppraisal.PerformanceAppraisalQuestion';\n    static readonly lookupKey = 'PerformanceAppraisal.PerformanceAppraisalQuestion';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<PerformanceAppraisalQuestionRow>('PerformanceAppraisal.PerformanceAppraisalQuestion') }\n    static async getLookupAsync() { return getLookupAsync<PerformanceAppraisalQuestionRow>('PerformanceAppraisal.PerformanceAppraisalQuestion') }\n\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = '*';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<PerformanceAppraisalQuestionRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { PerformanceAppraisalQuestionRow } from \"./PerformanceAppraisalQuestionRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\nimport { DeleteAllRequest } from \"../Web/Modules.PerformanceAppraisal.DeleteAllRequest\";\n\nexport namespace PerformanceAppraisalQuestionService {\n    export const baseUrl = 'PerformanceAppraisal/PerformanceAppraisalQuestion';\n\n    export declare function Create(request: SaveRequest<PerformanceAppraisalQuestionRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<PerformanceAppraisalQuestionRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<PerformanceAppraisalQuestionRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<PerformanceAppraisalQuestionRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function DeleteAll(request: DeleteAllRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PerformanceAppraisal/PerformanceAppraisalQuestion/Create\",\n        Update: \"PerformanceAppraisal/PerformanceAppraisalQuestion/Update\",\n        Delete: \"PerformanceAppraisal/PerformanceAppraisalQuestion/Delete\",\n        Retrieve: \"PerformanceAppraisal/PerformanceAppraisalQuestion/Retrieve\",\n        List: \"PerformanceAppraisal/PerformanceAppraisalQuestion/List\",\n        DeleteAll: \"PerformanceAppraisal/PerformanceAppraisalQuestion/DeleteAll\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List', \n        'DeleteAll'\n    ].forEach(x => {\n        (<any>PerformanceAppraisalQuestionService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFexport class PerformanceAppraisalResponseColumns {\n    static columnsKey = 'PerformanceAppraisal.PerformanceAppraisalResponse';\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface PerformanceAppraisalResponseRow {\n    Id?: number;\n    QuestionId?: number;\n    FormId?: number;\n    Question?: string;\n    AnswerType?: string;\n    Answer?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class PerformanceAppraisalResponseRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly localTextPrefix = 'PerformanceAppraisal.PerformanceAppraisalResponse';\n    static readonly deletePermission = 'Administration:Employee';\n    static readonly insertPermission = 'Administration:Employee';\n    static readonly readPermission = '*';\n    static readonly updatePermission = 'Administration:Employee';\n\n    static readonly Fields = fieldsProxy<PerformanceAppraisalResponseRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { PerformanceAppraisalResponseRow } from \"./PerformanceAppraisalResponseRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace PerformanceAppraisalResponseService {\n    export const baseUrl = 'PerformanceAppraisal/PerformanceAppraisalResponse';\n\n    export declare function Create(request: SaveRequest<PerformanceAppraisalResponseRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<PerformanceAppraisalResponseRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<PerformanceAppraisalResponseRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<PerformanceAppraisalResponseRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PerformanceAppraisal/PerformanceAppraisalResponse/Create\",\n        Update: \"PerformanceAppraisal/PerformanceAppraisalResponse/Update\",\n        Delete: \"PerformanceAppraisal/PerformanceAppraisalResponse/Delete\",\n        Retrieve: \"PerformanceAppraisal/PerformanceAppraisalResponse/Retrieve\",\n        List: \"PerformanceAppraisal/PerformanceAppraisalResponse/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>PerformanceAppraisalResponseService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFexport class PerformanceAppraisalTemplateColumns {\n    static columnsKey = 'PerformanceAppraisal.PerformanceAppraisalTemplate';\n}", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface PerformanceAppraisalTemplateRow {\n    Id?: number;\n    TemplateName?: string;\n    Duration?: number;\n    RatingScale?: number;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class PerformanceAppraisalTemplateRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'TemplateName';\n    static readonly localTextPrefix = 'PerformanceAppraisal.PerformanceAppraisalTemplate';\n    static readonly lookupKey = 'PerformanceAppraisal.PerformanceAppraisalTemplate';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<PerformanceAppraisalTemplateRow>('PerformanceAppraisal.PerformanceAppraisalTemplate') }\n    static async getLookupAsync() { return getLookupAsync<PerformanceAppraisalTemplateRow>('PerformanceAppraisal.PerformanceAppraisalTemplate') }\n\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = '*';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<PerformanceAppraisalTemplateRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { PerformanceAppraisalTemplateRow } from \"./PerformanceAppraisalTemplateRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\nimport { DeleteAllRequest } from \"../Web/Modules.PerformanceAppraisal.DeleteAllRequest\";\n\nexport namespace PerformanceAppraisalTemplateService {\n    export const baseUrl = 'PerformanceAppraisal/PerformanceAppraisalTemplate';\n\n    export declare function Create(request: SaveRequest<PerformanceAppraisalTemplateRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<PerformanceAppraisalTemplateRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<PerformanceAppraisalTemplateRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<PerformanceAppraisalTemplateRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function DeleteAll(request: DeleteAllRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PerformanceAppraisal/PerformanceAppraisalTemplate/Create\",\n        Update: \"PerformanceAppraisal/PerformanceAppraisalTemplate/Update\",\n        Delete: \"PerformanceAppraisal/PerformanceAppraisalTemplate/Delete\",\n        Retrieve: \"PerformanceAppraisal/PerformanceAppraisalTemplate/Retrieve\",\n        List: \"PerformanceAppraisal/PerformanceAppraisalTemplate/List\",\n        DeleteAll: \"PerformanceAppraisal/PerformanceAppraisalTemplate/DeleteAll\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List', \n        'DeleteAll'\n    ].forEach(x => {\n        (<any>PerformanceAppraisalTemplateService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFexport class PerformanceAppraisalTypeColumns {\n    static columnsKey = 'PerformanceAppraisal.PerformanceAppraisalType';\n}", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface PerformanceAppraisalTypeRow {\n    Id?: number;\n    Type?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class PerformanceAppraisalTypeRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'Type';\n    static readonly localTextPrefix = 'PerformanceAppraisal.PerformanceAppraisalType';\n    static readonly lookupKey = 'PerformanceAppraisal.PerformanceAppraisalType';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<PerformanceAppraisalTypeRow>('PerformanceAppraisal.PerformanceAppraisalType') }\n    static async getLookupAsync() { return getLookupAsync<PerformanceAppraisalTypeRow>('PerformanceAppraisal.PerformanceAppraisalType') }\n\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = '*';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<PerformanceAppraisalTypeRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { PerformanceAppraisalTypeRow } from \"./PerformanceAppraisalTypeRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\nimport { DeleteAllRequest } from \"../Web/Modules.PerformanceAppraisal.DeleteAllRequest\";\n\nexport namespace PerformanceAppraisalTypeService {\n    export const baseUrl = 'PerformanceAppraisal/PerformanceAppraisalType';\n\n    export declare function Create(request: SaveRequest<PerformanceAppraisalTypeRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<PerformanceAppraisalTypeRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<PerformanceAppraisalTypeRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<PerformanceAppraisalTypeRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function DeleteAll(request: DeleteAllRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PerformanceAppraisal/PerformanceAppraisalType/Create\",\n        Update: \"PerformanceAppraisal/PerformanceAppraisalType/Update\",\n        Delete: \"PerformanceAppraisal/PerformanceAppraisalType/Delete\",\n        Retrieve: \"PerformanceAppraisal/PerformanceAppraisalType/Retrieve\",\n        List: \"PerformanceAppraisal/PerformanceAppraisalType/List\",\n        DeleteAll: \"PerformanceAppraisal/PerformanceAppraisalType/DeleteAll\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List', \n        'DeleteAll'\n    ].forEach(x => {\n        (<any>PerformanceAppraisalTypeService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { ImageUploadEditor, StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface CompanyProfileForm {\n    Picture: ImageUploadEditor;\n    Title: StringEditor;\n    Address: StringEditor;\n    Tel: StringEditor;\n    Website: StringEditor;\n}\n\nexport class CompanyProfileForm extends PrefixedContext {\n    static formKey = 'PerformanceAppraisal.CompanyProfile';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!CompanyProfileForm.init)  {\n            CompanyProfileForm.init = true;\n\n            var w0 = ImageUploadEditor;\n            var w1 = StringEditor;\n\n            initFormType(CompanyProfileForm, [\n                'Picture', w0,\n                'Title', w1,\n                'Address', w1,\n                'Tel', w1,\n                'Website', w1\n            ]);\n        }\n    }\n}", "\uFEFFimport { TextAreaEditor, DecimalEditor, ImageUploadEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface PerformanceAppraisalEvaluationForm {\n    Evaluation: TextAreaEditor;\n    Goals: TextAreaEditor;\n    Summary: TextAreaEditor;\n    BonusRate: DecimalEditor;\n    OverallRate: DecimalEditor;\n    EmployeeSignature: ImageUploadEditor;\n    HodSignature: ImageUploadEditor;\n    GeneralManagerSignature: ImageUploadEditor;\n}\n\nexport class PerformanceAppraisalEvaluationForm extends PrefixedContext {\n    static formKey = 'PerformanceAppraisal.PerformanceAppraisalEvaluation';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!PerformanceAppraisalEvaluationForm.init)  {\n            PerformanceAppraisalEvaluationForm.init = true;\n\n            var w0 = TextAreaEditor;\n            var w1 = DecimalEditor;\n            var w2 = ImageUploadEditor;\n\n            initFormType(PerformanceAppraisalEvaluationForm, [\n                'Evaluation', w0,\n                'Goals', w0,\n                'Summary', w0,\n                'BonusRate', w1,\n                'OverallRate', w1,\n                'EmployeeSignature', w2,\n                'HodSignature', w2,\n                'GeneralManagerSignature', w2\n            ]);\n        }\n    }\n}", "\uFEFFimport { ImageUploadEditor, StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface PerformanceAppraisalFileAttachForm {\n    Files: ImageUploadEditor;\n    Remark: StringEditor;\n}\n\nexport class PerformanceAppraisalFileAttachForm extends PrefixedContext {\n    static formKey = 'PerformanceAppraisal.PerformanceAppraisalFileAttach';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!PerformanceAppraisalFileAttachForm.init)  {\n            PerformanceAppraisalFileAttachForm.init = true;\n\n            var w0 = ImageUploadEditor;\n            var w1 = StringEditor;\n\n            initFormType(PerformanceAppraisalFileAttachForm, [\n                'Files', w0,\n                'Remark', w1\n            ]);\n        }\n    }\n}", "\uFEFFimport { PrefixedContext } from \"@serenity-is/corelib\";\n\nexport interface PerformanceAppraisalFormForm {\n}\n\nexport class PerformanceAppraisalFormForm extends PrefixedContext {\n    static formKey = 'PerformanceAppraisal.PerformanceAppraisalForm';\n}", "\uFEFFimport { StringEditor, EnumEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { PerformanceAppraisalQuestionAnswerType } from \"./PerformanceAppraisalQuestionAnswerType\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface PerformanceAppraisalQuestionForm {\n    Questions: StringEditor;\n    AnswerType: EnumEditor;\n}\n\nexport class PerformanceAppraisalQuestionForm extends PrefixedContext {\n    static formKey = 'PerformanceAppraisal.PerformanceAppraisalQuestion';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!PerformanceAppraisalQuestionForm.init)  {\n            PerformanceAppraisalQuestionForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = EnumEditor;\n\n            initFormType(PerformanceAppraisalQuestionForm, [\n                'Questions', w0,\n                'AnswerType', w1\n            ]);\n        }\n    }\n}\n\n[PerformanceAppraisalQuestionAnswerType]; // referenced types", "\uFEFFimport { PrefixedContext } from \"@serenity-is/corelib\";\n\nexport interface PerformanceAppraisalResponseForm {\n}\n\nexport class PerformanceAppraisalResponseForm extends PrefixedContext {\n    static formKey = 'PerformanceAppraisal.PerformanceAppraisalResponse';\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface PerformanceAppraisalReviewerRow {\n    Id?: number;\n    FormId?: number;\n    EmployeeRowId?: number;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class PerformanceAppraisalReviewerRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly localTextPrefix = 'PerformanceAppraisal.PerformanceAppraisalReviewer';\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = '*';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<PerformanceAppraisalReviewerRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { PerformanceAppraisalReviewerRow } from \"./PerformanceAppraisalReviewerRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace PerformanceAppraisalReviewerService {\n    export const baseUrl = 'PerformanceAppraisal/PerformanceAppraisalReviewer';\n\n    export declare function Create(request: SaveRequest<PerformanceAppraisalReviewerRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<PerformanceAppraisalReviewerRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<PerformanceAppraisalReviewerRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<PerformanceAppraisalReviewerRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PerformanceAppraisal/PerformanceAppraisalReviewer/Create\",\n        Update: \"PerformanceAppraisal/PerformanceAppraisalReviewer/Update\",\n        Delete: \"PerformanceAppraisal/PerformanceAppraisalReviewer/Delete\",\n        Retrieve: \"PerformanceAppraisal/PerformanceAppraisalReviewer/Retrieve\",\n        List: \"PerformanceAppraisal/PerformanceAppraisalReviewer/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>PerformanceAppraisalReviewerService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFexport class PerformanceAppraisalTemplateDepartmentColumns {\n    static columnsKey = 'PerformanceAppraisal.PerformanceAppraisalTemplateDepartment';\n}", "\uFEFFimport { IntegerEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface PerformanceAppraisalTemplateDepartmentForm {\n    TemplateId: IntegerEditor;\n    DepartmentId: IntegerEditor;\n}\n\nexport class PerformanceAppraisalTemplateDepartmentForm extends PrefixedContext {\n    static formKey = 'PerformanceAppraisal.PerformanceAppraisalTemplateDepartment';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!PerformanceAppraisalTemplateDepartmentForm.init)  {\n            PerformanceAppraisalTemplateDepartmentForm.init = true;\n\n            var w0 = IntegerEditor;\n\n            initFormType(PerformanceAppraisalTemplateDepartmentForm, [\n                'TemplateId', w0,\n                'DepartmentId', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface PerformanceAppraisalTemplateDepartmentRow {\n    Id?: number;\n    TemplateId?: number;\n    DepartmentId?: number;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class PerformanceAppraisalTemplateDepartmentRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly localTextPrefix = 'PerformanceAppraisal.PerformanceAppraisalTemplateDepartment';\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<PerformanceAppraisalTemplateDepartmentRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { PerformanceAppraisalTemplateDepartmentRow } from \"./PerformanceAppraisalTemplateDepartmentRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace PerformanceAppraisalTemplateDepartmentService {\n    export const baseUrl = 'PerformanceAppraisal/PerformanceAppraisalTemplateDepartment';\n\n    export declare function Create(request: SaveRequest<PerformanceAppraisalTemplateDepartmentRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<PerformanceAppraisalTemplateDepartmentRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<PerformanceAppraisalTemplateDepartmentRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<PerformanceAppraisalTemplateDepartmentRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PerformanceAppraisal/PerformanceAppraisalTemplateDepartment/Create\",\n        Update: \"PerformanceAppraisal/PerformanceAppraisalTemplateDepartment/Update\",\n        Delete: \"PerformanceAppraisal/PerformanceAppraisalTemplateDepartment/Delete\",\n        Retrieve: \"PerformanceAppraisal/PerformanceAppraisalTemplateDepartment/Retrieve\",\n        List: \"PerformanceAppraisal/PerformanceAppraisalTemplateDepartment/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>PerformanceAppraisalTemplateDepartmentService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { PrefixedContext } from \"@serenity-is/corelib\";\n\nexport interface PerformanceAppraisalTemplateForm {\n}\n\nexport class PerformanceAppraisalTemplateForm extends PrefixedContext {\n    static formKey = 'PerformanceAppraisal.PerformanceAppraisalTemplate';\n}", "\uFEFFexport class PerformanceAppraisalTemplateQuestionColumns {\n    static columnsKey = 'PerformanceAppraisal.PerformanceAppraisalTemplateQuestion';\n}", "\uFEFFimport { LookupEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface PerformanceAppraisalTemplateQuestionForm {\n    QuestionId: LookupEditor;\n}\n\nexport class PerformanceAppraisalTemplateQuestionForm extends PrefixedContext {\n    static formKey = 'PerformanceAppraisal.PerformanceAppraisalTemplateQuestion';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!PerformanceAppraisalTemplateQuestionForm.init)  {\n            PerformanceAppraisalTemplateQuestionForm.init = true;\n\n            var w0 = LookupEditor;\n\n            initFormType(PerformanceAppraisalTemplateQuestionForm, [\n                'QuestionId', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface PerformanceAppraisalTemplateQuestionRow {\n    Id?: number;\n    TemplateId?: number;\n    QuestionId?: number;\n    QuestionText?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class PerformanceAppraisalTemplateQuestionRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly localTextPrefix = 'PerformanceAppraisal.PerformanceAppraisalTemplateQuestion';\n    static readonly lookupKey = 'PerformanceAppraisal.PerformanceAppraisalTemplateQuestion';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<PerformanceAppraisalTemplateQuestionRow>('PerformanceAppraisal.PerformanceAppraisalTemplateQuestion') }\n    static async getLookupAsync() { return getLookupAsync<PerformanceAppraisalTemplateQuestionRow>('PerformanceAppraisal.PerformanceAppraisalTemplateQuestion') }\n\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = '*';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<PerformanceAppraisalTemplateQuestionRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { PerformanceAppraisalTemplateQuestionRow } from \"./PerformanceAppraisalTemplateQuestionRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace PerformanceAppraisalTemplateQuestionService {\n    export const baseUrl = 'PerformanceAppraisal/PerformanceAppraisalTemplateQuestion';\n\n    export declare function Create(request: SaveRequest<PerformanceAppraisalTemplateQuestionRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<PerformanceAppraisalTemplateQuestionRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<PerformanceAppraisalTemplateQuestionRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<PerformanceAppraisalTemplateQuestionRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PerformanceAppraisal/PerformanceAppraisalTemplateQuestion/Create\",\n        Update: \"PerformanceAppraisal/PerformanceAppraisalTemplateQuestion/Update\",\n        Delete: \"PerformanceAppraisal/PerformanceAppraisalTemplateQuestion/Delete\",\n        Retrieve: \"PerformanceAppraisal/PerformanceAppraisalTemplateQuestion/Retrieve\",\n        List: \"PerformanceAppraisal/PerformanceAppraisalTemplateQuestion/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>PerformanceAppraisalTemplateQuestionService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface PerformanceAppraisalTypeForm {\n    Type: StringEditor;\n}\n\nexport class PerformanceAppraisalTypeForm extends PrefixedContext {\n    static formKey = 'PerformanceAppraisal.PerformanceAppraisalType';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!PerformanceAppraisalTypeForm.init)  {\n            PerformanceAppraisalTypeForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(PerformanceAppraisalTypeForm, [\n                'Type', w0\n            ]);\n        }\n    }\n}"],
  "mappings": "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",
  "names": ["CompanyProfileColumns", "__name", "import_q", "CompanyProfileRow", "__name", "import_q", "CompanyProfileService", "x", "r", "s", "o", "PerformanceAppraisalEvaluationColumns", "__name", "import_q", "PerformanceAppraisalEvaluationRow", "__name", "import_q", "PerformanceAppraisalEvaluationService", "x", "r", "s", "o", "PerformanceAppraisalFileAttachColumns", "__name", "import_q", "PerformanceAppraisalFileAttachRow", "__name", "import_q", "PerformanceAppraisalFileAttachService", "x", "r", "s", "o", "import_corelib", "PerformanceAppraisalFormStatus", "PerformanceAppraisalFormColumns", "__name", "import_q", "PerformanceAppraisalFormRow", "__name", "import_q", "PerformanceAppraisalFormService", "x", "r", "s", "o", "import_corelib", "PerformanceAppraisalQuestionAnswerType", "PerformanceAppraisalQuestionColumns", "__name", "import_q", "PerformanceAppraisalQuestionRow", "__async", "__name", "import_q", "PerformanceAppraisalQuestionService", "x", "r", "s", "o", "PerformanceAppraisalResponseColumns", "__name", "import_q", "PerformanceAppraisalResponseRow", "__name", "import_q", "PerformanceAppraisalResponseService", "x", "r", "s", "o", "PerformanceAppraisalTemplateColumns", "__name", "import_q", "PerformanceAppraisalTemplateRow", "__async", "__name", "import_q", "PerformanceAppraisalTemplateService", "x", "r", "s", "o", "PerformanceAppraisalTypeColumns", "__name", "import_q", "PerformanceAppraisalTypeRow", "__async", "__name", "import_q", "PerformanceAppraisalTypeService", "x", "r", "s", "o", "import_corelib", "import_q", "_CompanyProfileForm", "prefix", "w0", "w1", "CompanyProfileForm", "__name", "import_corelib", "import_q", "_PerformanceAppraisalEvaluationForm", "prefix", "w0", "w1", "w2", "PerformanceAppraisalEvaluationForm", "__name", "import_corelib", "import_q", "_PerformanceAppraisalFileAttachForm", "prefix", "w0", "w1", "PerformanceAppraisalFileAttachForm", "__name", "import_corelib", "PerformanceAppraisalFormForm", "__name", "import_corelib", "import_q", "_PerformanceAppraisalQuestionForm", "prefix", "w0", "w1", "PerformanceAppraisalQuestionForm", "__name", "import_corelib", "PerformanceAppraisalResponseForm", "__name", "import_q", "PerformanceAppraisalReviewerRow", "__name", "import_q", "PerformanceAppraisalReviewerService", "x", "r", "s", "o", "PerformanceAppraisalTemplateDepartmentColumns", "__name", "import_corelib", "import_q", "_PerformanceAppraisalTemplateDepartmentForm", "prefix", "w0", "PerformanceAppraisalTemplateDepartmentForm", "__name", "import_q", "PerformanceAppraisalTemplateDepartmentRow", "__name", "import_q", "PerformanceAppraisalTemplateDepartmentService", "x", "r", "s", "o", "import_corelib", "PerformanceAppraisalTemplateForm", "__name", "PerformanceAppraisalTemplateQuestionColumns", "__name", "import_corelib", "import_q", "_PerformanceAppraisalTemplateQuestionForm", "prefix", "w0", "PerformanceAppraisalTemplateQuestionForm", "__name", "import_q", "PerformanceAppraisalTemplateQuestionRow", "__async", "__name", "import_q", "PerformanceAppraisalTemplateQuestionService", "x", "r", "s", "o", "import_corelib", "import_q", "_PerformanceAppraisalTypeForm", "prefix", "w0", "PerformanceAppraisalTypeForm", "__name"]
}
