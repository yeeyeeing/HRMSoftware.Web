{
  "version": 3,
  "sources": ["../../../Modules/HumanResource/EmployeeProfile/UserCreation/UserCreationDialog.ts"],
  "sourcesContent": ["import { Decorators, EntityDialog, EditorUtils, Criteria } from '@serenity-is/corelib';\nimport { EmployeeProfileRow, UserCreationForm, UserCreationRow, UserCreationService } from '../../../ServerTypes/EmployeeProfile';\nimport { alertDialog, isEmptyOrNull } from '@serenity-is/corelib/q';\nimport { confirm, serviceCall, notifySuccess, notifyError } from '@serenity-is/corelib/q';\nimport { Select2Editor } from '@serenity-is/corelib';\nimport { EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { PayrollDialog } from '../../../Payroll/PayrollDialog';\nimport { PayrollWizDialog } from '../../PayrollWiz/PayrollWizDialog';\nimport { PayrollWizardDialog } from '../../PayrollWizard/PayrollWizardDialog';\nimport { CompanySettingsService } from '../../../ServerTypes/CompanySettings';\nimport { UserService } from '../../../ServerTypes/Administration';\n\n@Decorators.registerClass('HRMSoftware.EmployeeProfile.UserCreationDialog')\nexport class UserCreationDialog extends EntityDialog<UserCreationRow, any> {\n    protected getFormKey() { return UserCreationForm.formKey; }\n    protected getRowDefinition() { return UserCreationRow; }\n    protected getService() { return UserCreationService.baseUrl; }\n\n    protected form = new UserCreationForm(this.idPrefix);\n    public multipleSelectHr:any;\n\n    public SearchCallback(): void {\n        var self = this\n        function findEmployee(data, id) {\n            return data.find(item => item.id == id.toString());\n        }\n        if (self.form.AllEmployee.value == true) {\n            self.form.AllEmployee.value = false\n            self.form.EmployeeRowList.value = ''\n        }\n\n        \n\n        var OccupationListElement = document.getElementById(this.idPrefix + 'OccupationList');\n        var DepartmentListElement = document.getElementById(this.idPrefix + 'DepartmentList');\n        var DivisionListElement = document.getElementById(this.idPrefix + 'DivisionList');\n        var JobGradeListElement = document.getElementById(this.idPrefix + 'JobGradeList');\n        var SectionListElement = document.getElementById(this.idPrefix + 'SectionList');\n\n        var JobGradeStr = $(JobGradeListElement).val()\n        let JobGradeList = [];\n        let numbers = JobGradeStr.split(',')\n        if (JobGradeStr.length)\n            numbers.forEach(number => {\n                JobGradeList.push(parseInt(number)); // Convert string to integer and push to numberList\n            })\n        var SectionStr = $(SectionListElement).val()\n        let SectionList = [];\n        numbers = SectionStr.split(',')\n        if (SectionStr.length)\n            numbers.forEach(number => {\n                SectionList.push(parseInt(number)); // Convert string to integer and push to numberList\n            })\n        var DivisionStr = $(DivisionListElement).val()\n        numbers = DivisionStr.split(',')\n        let DivisionList = [];\n        if (DivisionStr.length)\n            numbers.forEach(number => {\n                DivisionList.push(parseInt(number)); // Convert string to integer and push to numberList\n            })\n        var DepartmentStr = $(DepartmentListElement).val()\n        numbers = DepartmentStr.split(',')\n        let DepartmentList = [];\n        if (DepartmentStr.length)\n            numbers.forEach(number => {\n                DepartmentList.push(parseInt(number)); // Convert string to integer and push to numberList\n            })\n        var OccupationStr = $(OccupationListElement).val()\n        numbers = OccupationStr.split(',')\n        let OccupationList = [];\n        if (OccupationStr.length)\n            numbers.forEach(number => {\n                OccupationList.push(parseInt(number)); // Convert string to integer and push to numberList\n            })\n        var criteria: any;\n\n        EmployeeProfileService.List({\n            Criteria: Criteria.and(criteria, [[EmployeeProfileRow.Fields.Terminated], '=', 0]\n                , [[EmployeeProfileRow.Fields.Resigned], '=', 0]\n                , [[EmployeeProfileRow.Fields.Retired], '=', 0])\n        }, response => {\n            let EmployeeBuffer : any [] = []\n            for (var index in response.Entities) {\n                if (response.Entities[index].CreateUser == true)\n                continue\n                var found = 0\n                for (var JobGradeIndex in JobGradeList) {\n                    if (response.Entities[index].JobGradeID == JobGradeList[JobGradeIndex]) {\n                        found = 1\n                        break\n                    }\n                }\n                for (var DivisionIndex in DivisionList) {\n                    if (response.Entities[index].DivisionID == DivisionList[DivisionIndex]) {\n                        found = 1\n                        break\n                    }\n                }\n                for (var DepartmentIndex in DepartmentList) {\n                    if (response.Entities[index].DepartmentID == DepartmentList[DepartmentIndex]) {\n                        found = 1\n                        break\n                    }\n                }\n                for (var OccupationIndex in OccupationList) {\n                    if (response.Entities[index].OccupationID == OccupationList[OccupationIndex]) {\n                        found = 1\n                        break\n                    }\n                }\n                for (var SectionIndex in SectionList) {\n                    if (response.Entities[index].SectionID == SectionList[SectionIndex]) {\n                        found = 1\n                        break\n                    }\n                }\n                if (found == 0) {\n                    let EmployeeRowList = []\n                    var EmployeeRowString = self.form.EmployeeRowList.value\n                    if (EmployeeRowString != \"\") {\n                        let EmployeeRowListBuffer = EmployeeRowString.split(',')\n                        EmployeeRowListBuffer.forEach(number => {\n                            EmployeeRowList.push(parseInt(number)); // Convert string to integer and push to numberList\n                        })\n                        EmployeeRowList = EmployeeRowList.filter(number => number !== response.Entities[index].Id);\n                        self.form.EmployeeRowList.value = EmployeeRowList.join(',')\n                    }\n                    else\n                        self.form.EmployeeRowList.value = \"\"\n                }\n                else {\n\n                    var obj = findEmployee(self.originalItems, response.Entities[index].Id)\n                    EmployeeBuffer.push(obj)\n                    let EmployeeRowList = []\n                    var EmployeeRowString = self.form.EmployeeRowList.value\n                    if (EmployeeRowString != \"\") {\n                        if (EmployeeRowString.includes(',')) {\n                            let EmployeeRowListBuffer = EmployeeRowString.split(',')\n                            EmployeeRowListBuffer.forEach(number => {\n                                EmployeeRowList.push(parseInt(number)); // Convert string to integer and push to numberList\n                            })\n                            if (EmployeeRowList.indexOf(response.Entities[index].Id) === -1)\n                                self.form.EmployeeRowList.value = self.form.EmployeeRowList.value + ' , ' + response.Entities[index].Id.toString()\n                        }\n                        else\n                            self.form.EmployeeRowList.value = self.form.EmployeeRowList.value + ' , ' + response.Entities[index].Id.toString()\n                    }\n                    else \n                        self.form.EmployeeRowList.value = response.Entities[index].Id.toString()\n                }\n            }\n            $(self.form.EmployeeRowHrPriveledge).trigger('change')\n            self.form.EmployeeRowHrPriveledge.items = EmployeeBuffer\n            self.form.EmployeeRowHrPriveledge.values = self.form.EmployeeRowHrPriveledge.values.filter(item => self.form.EmployeeRowList.values.includes(item));\n\n\n        })\n\n\n\n    }\n    public PartialSearchCallback(): void {\n        var self = this\n        function findEmployee(data, id) {\n            return data.find(item => item.id == id.toString());\n        }\n        let EmployeeBuffer: any[] = []\n        for (var index in this.form.EmployeeRowList.values) {\n            var obj = findEmployee(self.originalItems, this.form.EmployeeRowList.values[index])\n            EmployeeBuffer.push(obj)\n        }\n        this.form.EmployeeRowHrPriveledge.values = this.form.EmployeeRowHrPriveledge.values.filter(item => this.form.EmployeeRowList.values.includes(item));\n        self.form.EmployeeRowHrPriveledge.items = EmployeeBuffer\n    }\n    public counter: number;\n    public originalItems: any[];\n\n    public WaitingCounter: number;\n    protected getToolbarButtons() {\n        var self = this;\n        var buttons = super.getToolbarButtons();\n        $(\"#\" + this.idPrefix + 'Toolbar').addClass(\"ms-auto\")\n        buttons.push(\n            {\n\n                title: \"Create Accounts\",\t// *** Get button text from translation\n                cssClass: 'text-bg-success p-2 ml-auto',\n                icon: 'fas fa-hat-wizard text-green',\n                onClick: () => {\n                    if (self.form.EmployeeRowList.value.length == 0) {\n                        alertDialog(\"No employee account to create\")\n\n                        return\n                    }\n\n                    confirm(//  the user confirm dont want to download\n                        \"Are you sure to create account for these employees?\",\n                        () => {\n\n                            if (isEmptyOrNull(self.form.EmployeeRowList.value)) {\n                                notifyError('No employee is selected');\n                                return\n                            }\n                            var EmployeeRowIdString = self.form.EmployeeRowList.value\n                            let EmployeeRowIdList = [];\n                            let numbers = EmployeeRowIdString.split(',')\n                            if (EmployeeRowIdString.length)\n                                numbers.forEach(number => {\n                                    EmployeeRowIdList.push(parseInt(number)); // Convert string to integer and push to numberList\n                                })\n                            for (var index in EmployeeRowIdList) {\n                                EmployeeProfileService.Retrieve({\n                                    EntityId: EmployeeRowIdList[index]\n                                }, response => {\n                                    var Username = 'T' + response.Entity.EmployeeID\n                                    var PassWord= 'TSH' + response.Entity.EmployeeID\n\n                                    UserService.Create({\n                                        Entity:\n                                        {\n                                            \"Username\": Username,\n                                            \"DisplayName\": response.Entity.EmployeeName,\n                                            \"Password\": PassWord,\n                                            \"PasswordConfirm\": PassWord,\n                                            \"Email\": response.Entity.EmployeeEmail,\n                                            \"MobilePhoneNumber\": response.Entity.TelNumber1,\n                                            \"EmployeeRowID\": response.Entity.Id\n                                        },\n                                    });\n                                    EmployeeProfileService.Update({\n                                        EntityId: response.Entity.Id,\n                                        Entity:\n                                        {\n                                            \"UserPassword\": PassWord,\n                                            \"UserName\": Username\n\n                                        },\n                                    });\n\n\n                                })\n                            }\n\n                            self.form.EmployeeRowList.value = ''\n                            notifySuccess(\"Account creation success, the username will be same as password in format T{ID}\")\n                        })\n                },\n            }\n        );\n        return buttons\n    }\n\n    public dialogOpen(asPanel?: boolean): void {\n        super.dialogOpen();\n        function removeObjectById(data, idToRemove) {\n            return data.filter(item => item.id !== idToRemove.toString());\n        }\n        this.saveAndCloseButton.hide()\n        //this.saveAndCloseButton.text(\"Generate Payslip\")\n        this.editButton.hide()\n        this.applyChangesButton.hide()\n        this.deleteButton.hide()\n        this.localizationButton.hide()\n        this.cloneButton.hide()\n        this.undeleteButton.hide()\n        \n        var criteria: any;\n        this.originalItems = Array.from(this.form.EmployeeRowHrPriveledge.items)\n        this.form.EmployeeRowHrPriveledge.clearItems()\n        EmployeeProfileService.List({\n            Criteria: Criteria.and(criteria, [[EmployeeProfileRow.Fields.Terminated], '=', 0]\n                , [[EmployeeProfileRow.Fields.Resigned], '=', 0]\n                , [[EmployeeProfileRow.Fields.Retired], '=', 0])\n\n\n        }, response => {\n            var EmployeeList = this.form.EmployeeRowList.items\n            console.log(response.Entities)\n            for (var index in response.Entities) {\n                if (response.Entities[index].CreateUser == true) {\n                    console.log(response.Entities[index])\n                    EmployeeList = removeObjectById(EmployeeList, response.Entities[index].Id);\n                }\n            }\n            console.log(EmployeeList)\n            this.form.EmployeeRowList.items = EmployeeList\n        })\n        var self = this;\n      \n\n        var SectionListElement = document.getElementById(this.idPrefix + 'SectionList');\n        var OccupationListElement = document.getElementById(this.idPrefix + 'OccupationList');\n        var DepartmentListElement = document.getElementById(this.idPrefix + 'DepartmentList');\n        var DivisionListElement = document.getElementById(this.idPrefix + 'DivisionList');\n        var JobGradeListElement = document.getElementById(this.idPrefix + 'JobGradeList');\n        var EmployeeRowIdListElement = document.getElementById(this.idPrefix + 'EmployeeRowList');\n        var AllEmployeeElement = document.getElementById(this.idPrefix + 'AllEmployee');\n        $(SectionListElement).on('change', async function () {\n            self.SearchCallback()\n        })\n        $(OccupationListElement).on('change', async function () {\n            self.SearchCallback()\n        })\n        $(DivisionListElement).on('change', async function () {\n            self.SearchCallback();\n        })\n        $(JobGradeListElement).on('change', async function () {\n            self.SearchCallback();\n        })\n        $(DepartmentListElement).on('change', async function () {\n            self.SearchCallback();\n        })\n        $(EmployeeRowIdListElement).on('change', async function () {\n            self.PartialSearchCallback();\n        })\n        $(AllEmployeeElement).on('change', async function () {\n            if (self.form.AllEmployee.value == true) {\n                self.form.DepartmentList.value = ''\n                self.form.SectionList.value = ''\n                self.form.DivisionList.value = ''\n                self.form.JobGradeList.value = ''\n                self.form.OccupationList.value = ''\n                self.form.EmployeeRowList.value = ''\n                EmployeeProfileService.List({\n                }, response => {\n                    let EmployeeRowList = []\n\n                    for (var index in response.Entities) {\n                        var number = response.Entities[index].Id                      \n                        EmployeeRowList.push(number); // Convert string to integer and push to numberList\n\n                    }\n                    self.form.EmployeeRowList.value = EmployeeRowList.join(',')\n                    \n\n                })\n\n            }\n            else\n                self.form.EmployeeRowList.value = ''\n        })\n\n        \n\n    }\n\n\n}"],
  "mappings": "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",
  "names": ["import_corelib", "import_q", "UserCreationDialog", "UserCreationForm", "UserCreationRow", "UserCreationService", "self", "findEmployee", "data", "id", "item", "__name", "OccupationListElement", "DepartmentListElement", "DivisionListElement", "JobGradeListElement", "SectionListElement", "JobGradeStr", "JobGradeList", "numbers", "number", "SectionStr", "SectionList", "DivisionStr", "DivisionList", "DepartmentStr", "DepartmentList", "OccupationStr", "OccupationList", "criteria", "EmployeeProfileService", "EmployeeProfileRow", "response", "EmployeeBuffer", "index", "found", "JobGradeIndex", "DivisionIndex", "DepartmentIndex", "OccupationIndex", "SectionIndex", "EmployeeRowList", "EmployeeRowString", "obj", "buttons", "EmployeeRowIdString", "EmployeeRowIdList", "Username", "PassWord", "UserService", "asPanel", "removeObjectById", "idToRemove", "EmployeeList", "EmployeeRowIdListElement", "AllEmployeeElement", "__async", "__decorateClass"]
}
