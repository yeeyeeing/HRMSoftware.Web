{
  "version": 3,
  "sources": ["../../../Modules/HumanResource/EmployeeGroup/EmployeeGroup/EmployeeGroupDialog.ts"],
  "sourcesContent": ["import { Decorators, EntityDialog, Select2Editor, EditorUtils } from '@serenity-is/corelib';\nimport { disableSelection } from '@serenity-is/sleekgrid';\nimport { EmployeeGroupForm, EmployeeGroupingsRow, EmployeeGroupingsService, EmployeeGroupRow, EmployeeGroupService, EmployeeGroupShiftPatternRow, EmployeeGroupShiftPatternService, EmployeeGroupShiftRow, EmployeeGroupShiftService } from '../../../ServerTypes/EmployeeGroup';\nimport { EmployeeProfileRow, EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { getLookup, getLookupAsync } from '@serenity-is/corelib/q';\nimport 'toolcool-color-picker';\nimport { serviceCall, RetrieveResponse, alertDialog } from '@serenity-is/corelib/q';\nimport ColorPicker from '@thednp/color-picker';\nimport { ViewShiftHistoryService } from '../../../ServerTypes/ViewShiftHistory';\nimport { ShiftService } from '../../../ServerTypes/Shift';\nimport { SetEmployeeShiftService } from '../../../ServerTypes/SetEmployeeShift';\nimport { isEmptyOrNull } from '@serenity-is/corelib/q';\nimport { ShiftHistoryRow, ShiftHistoryService } from '../../../ServerTypes/ShiftHistory';\r\nimport { Criteria, ToolButton } from '@serenity-is/corelib';\nimport { confirmDialog, notifyInfo, confirm } from '@serenity-is/corelib/q';\n\n@Decorators.registerClass('HRMSoftware.EmployeeGroup.EmployeeGroupDialog')\nexport class EmployeeGroupDialog extends EntityDialog<EmployeeGroupRow, any> {\n    protected getFormKey() { return EmployeeGroupForm.formKey; }\n    protected getRowDefinition() { return EmployeeGroupRow; }\n    protected getService() { return EmployeeGroupService.baseUrl; }\n    public ColorCode: string;\n    protected form = new EmployeeGroupForm(this.idPrefix);\n    public EmployeeProfileTable: any;\n    public EmployeeData: EmployeeProfileRow[];\n    public GroupingData: EmployeeGroupingsRow[];\n    public IdToBypass: number[];\n\n    constructor() {\n        super();\n         this.EmployeeProfileTable = getLookup(\"EmployeeProfile.EmployeeProfile\")\n        var criteria: any;\n        \n        EmployeeProfileService.List({\n            Criteria: Criteria.and(criteria, [[EmployeeProfileRow.Fields.Retired], '=', '0'],\n                [[EmployeeProfileRow.Fields.Terminated], '=', '0'],\n                [[EmployeeProfileRow.Fields.Resigned], '=', '0']\n            )\n        }, response => {\n            this.EmployeeData = response.Entities\n        })\n        EmployeeGroupingsService.List({\n        }, response => {\n            this.GroupingData = response.Entities\n        })\n\n\n    }\n\n\n\n    protected getDialogOptions() {\n        let opt = super.getDialogOptions()\n        opt.height = 800\n        opt.width = 1000\n        return opt\n    }\n    public SearchCallback(): void {\n        var self = this\n        var OccupationListElement = document.getElementById(this.idPrefix + 'OccupationList');\n        var DepartmentListElement = document.getElementById(this.idPrefix + 'DepartmentList');\n        var DivisionListElement = document.getElementById(this.idPrefix + 'DivisionList');\n        var JobGradeListElement = document.getElementById(this.idPrefix + 'JobGradeList');\n        var SectionListElement = document.getElementById(this.idPrefix + 'SectionList');\n       \n        function parseListFromElement(element) {\n            const valueStr = $(element).val();\n            return valueStr.length\n                ? valueStr.split(',').map(number => parseInt(number, 10))\n                : [];\n        }\n        // Use the utility function for each list\n        const JobGradeList = parseListFromElement(JobGradeListElement);\n        const DivisionList = parseListFromElement(DivisionListElement);\n        const DepartmentList = parseListFromElement(DepartmentListElement);\n        const OccupationList = parseListFromElement(OccupationListElement);\n        const SectionList = parseListFromElement(SectionListElement);\n        // Convert the lists to Sets for faster lookup\n        const jobGradeSet = new Set(JobGradeList);\n        const divisionSet = new Set(DivisionList);\n        const departmentSet = new Set(DepartmentList);\n        const occupationSet = new Set(OccupationList);\n        const sectionSet = new Set(SectionList);\n        var employeeRowList\n        if (self.isNew() == true)\n            employeeRowList = self.form.EmployeeList.value ? self.form.EmployeeList.value.split(',').map(Number) : [];\n        else if (self.isNew() == false)\n            employeeRowList = self.form.NewAddedEmployee.value ? self.form.NewAddedEmployee.value.split(',').map(Number) : [];\n\n        for (let employee of self.EmployeeData) {\n            const { JobGradeID, DivisionID, DepartmentID, OccupationID, SectionID, Id } = employee;\n            const found =\n                jobGradeSet.has(JobGradeID) ||\n                divisionSet.has(DivisionID) ||\n                departmentSet.has(DepartmentID) ||\n                occupationSet.has(OccupationID) ||\n                sectionSet.has(SectionID);\n\n            if (!found) \n                employeeRowList = employeeRowList.filter(num => num !== Id);\n             else {\n                if (!employeeRowList.includes(Id)) \n                    employeeRowList.push(Id);\n            }\n            // Update the buffer value\n        }\n        let finalOutput: number[] = [];\n        for (let i = 0; i < employeeRowList.length; i++) {\n            var employeeGroup = self.GroupingData.find(item => item.EmployeeRowId === employeeRowList[i]);\n            //if (isEmptyOrNull(employeeGroup)) {\n                    finalOutput.push(employeeRowList[i])\n           // }\n        }\n        if (self.isNew() == true)\n            self.form.EmployeeList.value = finalOutput.join(',');\n        else if (self.isNew() == false)\n            self.form.NewAddedEmployee.value = finalOutput.join(',');\n\n\n        //const result = data.find(item => item.Id === 12);\n\n    }\n\n    public parseDate(dateStr: string): Date {\n    return new Date(dateStr);\n    }\n    public areShiftsOverlapping(\n         start1: Date, end1: Date,\n         start2: Date, end2: Date\n     ): boolean {\n    // Check if one shift starts before the other shift ends and ends after the other shift starts\n    return start1 < end2 && end1 >= start2;\n     }\n    public areAnyShiftsOverlapping(shifts): boolean {\n    var result = false\n    for (let i = 0; i < shifts.length; i++) {\n\n        var start1 = this.parseDate(shifts[i].ShiftStartDate);\n        var end1 = this.parseDate(shifts[i].ShiftEndDate);\n        for (let j = 0; j < shifts.length; j++) {\n            if (i == j)\n                continue\n            var start2 = this.parseDate(shifts[j].ShiftStartDate);\n            var end2 = this.parseDate(shifts[j].ShiftEndDate);\n            if (this.areShiftsOverlapping(start1, end1, start2, end2)) {\n                var concatenatedString = 'There is a clash between '\n                    + shifts[i].Shift + ' and ' + shifts[j].Shift;\n                alertDialog(concatenatedString)\n                result = true\n                break;\n            }\n        }\n        if (result == true)\n            break\n    }\n    return result; // No overlaps\n}\n\n    protected save_submitHandler(response): void\n    {\n        var originalRes = response\n        var self = this\n       \n\n        var Results: any[] = []\n\n        if(this.areAnyShiftsOverlapping(this.form.Shifts.value))//check for overlapping shift dates\n            return\n        \n        \n        var combined = self.form.EmployeeList.values.concat(self.form.NewAddedEmployee.values)\n        ViewShiftHistoryService.List({\n            Criteria: Criteria(EmployeeGroupShiftRow.Fields.EmployeeRowId).in(combined),\n        }, response => {\n            var listOfClashEmployee = []\n            var listOfClashEmployeeRowId = []\n\n            var ShiftStartList = []\n            var ShiftEndList = []\n            for (var res in response.Entities) {\n                if (self.IdToBypass.indexOf(response.Entities[res].Id) != -1) \n                    continue\n                var Start1 = this.parseDate(response.Entities[res].ShiftStartDate)\n                var End1 = this.parseDate(response.Entities[res].ShiftEndDate)\n             \n                for (let i = 0; i < self.form.Shifts.value.length; i++) {\n                    var Start2 = this.parseDate(self.form.Shifts.value[i].ShiftStartDate)\n                    var End2 = this.parseDate(self.form.Shifts.value[i].ShiftEndDate)\n                    if (this.areShiftsOverlapping(Start1, End1, Start2, End2) == true) {\n                        var EmployeeID\n                        \n                        for (var index in self.EmployeeProfileTable.items) {\n                            if (self.EmployeeProfileTable.items[index].Id == response.Entities[res].EmployeeRowID) {\n                                EmployeeID = self.EmployeeProfileTable.items[index].EmployeeID\n                                break\n                            }\n                        }\n                        listOfClashEmployee.push(EmployeeID)\n                        listOfClashEmployeeRowId.push(response.Entities[res].EmployeeRowID.toString())\n                        ShiftStartList.push(response.Entities[res].ShiftStartDate)\n                        ShiftEndList.push(response.Entities[res].ShiftEndDate)\n                    }\n                }\n            }\n           \n            if (listOfClashEmployee.length > 0) {\n                const earliestDate = new Date(Math.min(...ShiftStartList.map(date => Date.parse(date))));\n                const latestDate = new Date(Math.min(...ShiftEndList.map(date => Date.parse(date))));\n                const earliestDateString = earliestDate.toISOString().substring(0, 10)\n                const latestDateString = latestDate.toISOString().substring(0, 10)\n\n                var concatenatedString = listOfClashEmployee.join(',') + ' Already has a Shift from ' + earliestDateString +\n                    ' until ' + latestDateString +' do you want to remove these employees?'\n                confirm(concatenatedString, () => {\n                    const filteredList = self.form.EmployeeList.values.filter(item => !listOfClashEmployeeRowId.includes(item));\n\n                    console.log(filteredList)\n                    console.log(listOfClashEmployeeRowId)\n                    console.log(self.form.EmployeeList.values)\n                    self.form.EmployeeList.values = filteredList\n                    if (self.form.EmployeeList.values.length == 0) {\n                        alertDialog(\"No employee in the list\")\n                        return\n                    }\n                    for (let i = 0; i < self.form.EmployeeList.values.length; i++) {\n                        for (let j = 0; j < self.form.Shifts.value.length; j++) {\n                            var Obj = new ConcreteEmployeeShiftPatternRow()\n                            Obj.EmployeeRowId = parseInt(self.form.EmployeeList.values[i])\n                            Obj.ShiftStartDate = self.form.Shifts.value[j].ShiftStartDate\n                            Obj.ShiftEndDate = self.form.Shifts.value[j].ShiftEndDate\n                            Obj.ShiftId = self.form.Shifts.value[j].ShiftId\n                            Results.push(Obj)\n                        }\n                    }\n                    self.form.ActualShifts.value = Results\n\n                    super.save_submitHandler(originalRes)\r\n                }, {\r\n                    onNo: () => {\r\n                        return\n                    }\r\n                });\r\n\n                return\n            }\n            for (let i = 0; i < this.form.EmployeeList.values.length; i++) {\n                for (let j = 0; j < this.form.Shifts.value.length; j++) {\n                    var Obj = new ConcreteEmployeeShiftPatternRow()\n                    Obj.EmployeeRowId = parseInt(this.form.EmployeeList.values[i])\n                    Obj.ShiftStartDate = this.form.Shifts.value[j].ShiftStartDate\n                    Obj.ShiftEndDate = this.form.Shifts.value[j].ShiftEndDate\n                    Obj.ShiftId = this.form.Shifts.value[j].ShiftId\n                    Results.push(Obj)\n                }\n            }\n            this.form.ActualShifts.value = Results\n            super.save_submitHandler(originalRes)\n        })\n    }\n    protected dialogOpen() {\n        super.dialogOpen()\n        var self = this\n        var itemsToFilter = self.form.EmployeeList.values\n        self.form.NewAddedEmployee.items=  self.form.NewAddedEmployee.items.filter(item => !itemsToFilter.includes(item.id));\n        $(document).ready(function () {\r\n            $('<button>Add Employee into Group</button>')\r\n                .insertAfter(`#${self.idPrefix}NewAddedEmployee`)  // Insert the button after the specified element\r\n                .on('click', function () {\n                    if (!isEmptyOrNull(self.form.NewAddedEmployee.value)) {\n                        confirmDialog(\n                            `Do you want to add these employees into ${self.form.Name.value} Group?`,\n                            () => {\n                                var combined = self.form.EmployeeList.values.concat(self.form.NewAddedEmployee.values)\n                                ViewShiftHistoryService.List({\n                                    Criteria: Criteria(EmployeeGroupShiftRow.Fields.EmployeeRowId).in(combined),\n                                }, response => {\n                                    var listOfClashEmployee = []\n                                    var listOfClashEmployeeRowId = []\n                                    var ShiftStartList = []\n                                    var ShiftEndList = []\n                                    for (var res in response.Entities) {\n                                        if (self.IdToBypass.indexOf(response.Entities[res].Id) != -1)\n                                            continue\n                                        var Start1 = self.parseDate(response.Entities[res].ShiftStartDate)\n                                        var End1 = self.parseDate(response.Entities[res].ShiftEndDate)\n                                        for (let i = 0; i < self.form.Shifts.value.length; i++) {\n                                            var Start2 = self.parseDate(self.form.Shifts.value[i].ShiftStartDate)\n                                            var End2 = self.parseDate(self.form.Shifts.value[i].ShiftEndDate)\n                                            if (self.areShiftsOverlapping(Start1, End1, Start2, End2) == true) {\n                                                var EmployeeID\n                                                for (var index in self.EmployeeProfileTable.items) {\n                                                    if (self.EmployeeProfileTable.items[index].Id == response.Entities[res].EmployeeRowID) {\n                                                        EmployeeID = self.EmployeeProfileTable.items[index].EmployeeID\n                                                        break\n                                                    }\n                                                }\n                                                listOfClashEmployee.push(EmployeeID)\n                                                listOfClashEmployeeRowId.push(response.Entities[res].EmployeeRowID.toString())\n                                                ShiftStartList.push(response.Entities[res].ShiftStartDate)\n                                                ShiftEndList.push(response.Entities[res].ShiftEndDate)\n                                            }\n                                        }\n                                    }\n                                    if (listOfClashEmployee.length > 0) {\n                                        const earliestDate = new Date(Math.min(...ShiftStartList.map(date => Date.parse(date))));\n                                        const latestDate = new Date(Math.min(...ShiftEndList.map(date => Date.parse(date))));\n                                        const earliestDateString = earliestDate.toISOString().substring(0, 10)\n                                        const latestDateString = latestDate.toISOString().substring(0, 10)\n                                        var concatenatedString = listOfClashEmployee.join(',') + ' Already has a Shift from ' + earliestDateString +\n                                            ' until ' + latestDateString + ' do you want to remove these employees?'\n                                        confirm(concatenatedString, () => {\n                                            const filteredList = self.form.NewAddedEmployee.values.filter(item => !listOfClashEmployeeRowId.includes(item));\n                                            self.form.EmployeeList.value = `${self.form.EmployeeList.value},${filteredList}`\n                                            self.form.NewAddedEmployee.value = ''\n                                            var itemsToFilter = self.form.EmployeeList.values\n                                            self.form.NewAddedEmployee.items = self.fullItems\n                                            self.form.NewAddedEmployee.items = self.form.NewAddedEmployee.items.filter(item => !itemsToFilter.includes(item.id));\n                                            }, {\r\n                                            onNo: () => {\r\n                                                return\n                                            }\r\n                                        });\r\n\n\n                                        return\n                                    }\n\n                                    self.form.EmployeeList.value = `${self.form.EmployeeList.value},${self.form.NewAddedEmployee.value}`\n                                    self.form.NewAddedEmployee.value = ''\n                                    var itemsToFilter = self.form.EmployeeList.values\n                                    self.form.NewAddedEmployee.items = self.fullItems\n                                    self.form.NewAddedEmployee.items = self.form.NewAddedEmployee.items.filter(item => !itemsToFilter.includes(item.id));\n                                })\n                            }, {\n                                onNo: () => {\n                                    console.log(\"User canceled\");\n                                }\n                            }\n                                )\r\n                    }\n                });\r\n        });\n        $(`.Shifts .add-button`).on(\"click\", function(){\n\n            $(`.s-HRMSoftware-EmployeeGroup-EmployeeGroupShiftEditDialog`).on(\"dialogclose\", function () {\n                window['ShiftList'] = self.form.Shifts.value;  // Store the ID globally (using window)\n                window['CurrentEmployee'] = self.form.EmployeeList.values;  // Store the ID globally (using window)\n                window['NewEmployee'] = self.form.NewAddedEmployee.values;  // Store the ID globally (using window)\n               \n            })\n\n        })\n        window['ShiftList'] = self.form.Shifts.value;  // Store the ID globally (using window)\n        window['CurrentEmployee'] = self.form.EmployeeList.values;  // Store the ID globally (using window)\n        window['NewEmployee'] = self.form.NewAddedEmployee.values;  // Store the ID globally (using window)\n        var idToBypass = []\n        for (let i = 0; i < self.form.ActualShifts.value.length; i++) \n            idToBypass.push(self.form.ActualShifts.value[i].Id)\n        self.IdToBypass = idToBypass\n        window['idToBypass'] = self.IdToBypass\n    }\n    public fullItems: Select2Item[];\n    protected onDialogOpen()\n    {\n        super.onDialogOpen()\n        var self = this\n        self.fullItems = self.form.NewAddedEmployee.items\n        if (!this.isNew()) {\n            this.form.Shifts.value = this.form.Shifts.value.sort((a, b) => new Date(a.ShiftStartDate).getTime() - new Date(b.ShiftStartDate).getTime());\n            this.form.Shifts.refresh()\r\n        }\n\n        $(this.form.EmployeeList.element).on(\"change\", function () {\n            window['ShiftList'] = self.form.Shifts.value;  // Store the ID globally (using window)\n            window['CurrentEmployee'] = self.form.EmployeeList.values;  // Store the ID globally (using window)\n            window['NewEmployee'] = self.form.NewAddedEmployee.values;  // Store the ID globally (using window)\n            var itemsToFilter = self.form.EmployeeList.values\n            self.form.NewAddedEmployee.items = self.fullItems\n            self.form.NewAddedEmployee.items = self.form.NewAddedEmployee.items.filter(item => !itemsToFilter.includes(item.id));\n\n        })\n        $(this.form.NewAddedEmployee.element).on(\"change\", function () {\n            window['ShiftList'] = self.form.Shifts.value;  // Store the ID globally (using window)\n            window['CurrentEmployee'] = self.form.EmployeeList.values;  // Store the ID globally (using window)\n            window['NewEmployee'] = self.form.NewAddedEmployee.values;  // Store the ID globally (using window)\n        })\n\n\n        EditorUtils.setReadonly(this.form.ShiftColor.element, true);\n        $('.ActualShifts').hide()\n\n        var ColorChoser = document.createElement('toolcool-color-picker');\n        // Set the id attribute\n        ColorChoser.setAttribute('id', 'color-picker-1');\n        // Set the color attribute\n        ColorChoser.setAttribute('color', '#e76ff1');\n\n        this.form.ShiftColor.element.after(ColorChoser)\n\n        \n        ColorChoser.addEventListener('change', (evt: Event) => {\n            const customEvent = evt as CustomEvent;\n            this.ColorCode = customEvent.detail.hex\n            this.form.ShiftColor.value = this.ColorCode\n\n        });\n\n\n        this.form.ShiftColor.element.click(function () {\n\n            ColorChoser.opened = true \n\n        }\n        )\n\n\n        var SectionListElement = document.getElementById(this.idPrefix + 'SectionList');\n        var OccupationListElement = document.getElementById(this.idPrefix + 'OccupationList');\n        var DepartmentListElement = document.getElementById(this.idPrefix + 'DepartmentList');\n        var DivisionListElement = document.getElementById(this.idPrefix + 'DivisionList');\n        var JobGradeListElement = document.getElementById(this.idPrefix + 'JobGradeList');\n\n        $(`#s2id_${this.idPrefix}EmployeeList`).on('click', async function (e) {\n            $(`.select2-drop`).hide()\n            return\n\n        })\n\n\n        $(OccupationListElement).on('change', async function () {\n            self.SearchCallback()\n            //  self.SearchEmployeeCallback();\n\n        })\n        $(DivisionListElement).on('change', async function () {\n            self.SearchCallback();\n            // self.SearchEmployeeCallback();\n\n        })\n        $(JobGradeListElement).on('change', async function () {\n            self.SearchCallback();\n            //self.SearchEmployeeCallback();\n        })\n        $(DepartmentListElement).on('change', async function () {\n            self.SearchCallback();\n            //self.SearchEmployeeCallback();\n        })\n        $(SectionListElement).on('change', async function () {\n            self.SearchCallback();\n            //self.SearchEmployeeCallback();\n\n        })\n        window['ShiftList'] = self.form.Shifts.value;  // Store the ID globally (using window)\n        window['CurrentEmployee'] = self.form.EmployeeList.values;  // Store the ID globally (using window)\n        window['NewEmployee'] = self.form.NewAddedEmployee.values;  // Store the ID globally (using window)\n\n\n\n\n    }\n}\n\nclass ConcreteEmployeeShiftPatternRow extends EmployeeGroupShiftPatternRow {\n    constructor() {\n        super();\n    }\n}"],
  "mappings": "yQAAA,IAAAA,EAAqE,SAIrE,IAAAC,EAA0C,SAE1C,IAAAC,EAA2D,SAK3D,IAAAC,EAA8B,SAE9BC,EAAqC,SACrCD,EAAmD,SAG5C,IAAME,EAAN,cAAkC,cAAoC,CAWzE,aAAc,CACV,MAAM,EAPV,KAAU,KAAO,IAAIC,EAAkB,KAAK,QAAQ,EAQ/C,KAAK,wBAAuB,aAAU,iCAAiC,EACxE,IAAIC,EAEJC,EAAuB,KAAK,CACxB,SAAU,WAAS,IAAID,EAAU,CAAC,CAACE,EAAmB,OAAO,OAAO,EAAG,IAAK,GAAG,EAC3E,CAAC,CAACA,EAAmB,OAAO,UAAU,EAAG,IAAK,GAAG,EACjD,CAAC,CAACA,EAAmB,OAAO,QAAQ,EAAG,IAAK,GAAG,CACnD,CACJ,EAAGC,GAAY,CACX,KAAK,aAAeA,EAAS,QACjC,CAAC,EACDC,EAAyB,KAAK,CAC9B,EAAGD,GAAY,CACX,KAAK,aAAeA,EAAS,QACjC,CAAC,CAGL,CA7BU,YAAa,CAAE,OAAOJ,EAAkB,OAAS,CACjD,kBAAmB,CAAE,OAAOM,CAAkB,CAC9C,YAAa,CAAE,OAAOC,EAAqB,OAAS,CA+BpD,kBAAmB,CACzB,IAAIC,EAAM,MAAM,iBAAiB,EACjC,OAAAA,EAAI,OAAS,IACbA,EAAI,MAAQ,IACLA,CACX,CACO,gBAAuB,CAC1B,IAAIC,EAAO,KACPC,EAAwB,SAAS,eAAe,KAAK,SAAW,gBAAgB,EAChFC,EAAwB,SAAS,eAAe,KAAK,SAAW,gBAAgB,EAChFC,EAAsB,SAAS,eAAe,KAAK,SAAW,cAAc,EAC5EC,EAAsB,SAAS,eAAe,KAAK,SAAW,cAAc,EAC5EC,EAAqB,SAAS,eAAe,KAAK,SAAW,aAAa,EAE9E,SAASC,EAAqBC,EAAS,CACnC,IAAMC,EAAW,EAAED,CAAO,EAAE,IAAI,EAChC,OAAOC,EAAS,OACVA,EAAS,MAAM,GAAG,EAAE,IAAIC,GAAU,SAASA,EAAQ,EAAE,CAAC,EACtD,CAAC,CACX,CALSC,EAAAJ,EAAA,wBAOT,IAAMK,EAAeL,EAAqBF,CAAmB,EACvDQ,EAAeN,EAAqBH,CAAmB,EACvDU,EAAiBP,EAAqBJ,CAAqB,EAC3DY,EAAiBR,EAAqBL,CAAqB,EAC3Dc,EAAcT,EAAqBD,CAAkB,EAErDW,EAAc,IAAI,IAAIL,CAAY,EAClCM,EAAc,IAAI,IAAIL,CAAY,EAClCM,EAAgB,IAAI,IAAIL,CAAc,EACtCM,EAAgB,IAAI,IAAIL,CAAc,EACtCM,EAAa,IAAI,IAAIL,CAAW,EACtC,IAAIM,EACArB,EAAK,MAAM,GAAK,GAChBqB,EAAkBrB,EAAK,KAAK,aAAa,MAAQA,EAAK,KAAK,aAAa,MAAM,MAAM,GAAG,EAAE,IAAI,MAAM,EAAI,CAAC,EACnGA,EAAK,MAAM,GAAK,KACrBqB,EAAkBrB,EAAK,KAAK,iBAAiB,MAAQA,EAAK,KAAK,iBAAiB,MAAM,MAAM,GAAG,EAAE,IAAI,MAAM,EAAI,CAAC,GAEpH,QAASsB,KAAYtB,EAAK,aAAc,CACpC,GAAM,CAAE,WAAAuB,EAAY,WAAAC,EAAY,aAAAC,EAAc,aAAAC,EAAc,UAAAC,EAAW,GAAAC,CAAG,EAAIN,EAE1EN,EAAY,IAAIO,CAAU,GAC1BN,EAAY,IAAIO,CAAU,GAC1BN,EAAc,IAAIO,CAAY,GAC9BN,EAAc,IAAIO,CAAY,GAC9BN,EAAW,IAAIO,CAAS,EAKnBN,EAAgB,SAASO,CAAE,GAC5BP,EAAgB,KAAKO,CAAE,EAH3BP,EAAkBA,EAAgB,OAAOQ,GAAOA,IAAQD,CAAE,CAMlE,CACA,IAAIE,EAAwB,CAAC,EAC7B,QAASC,EAAI,EAAGA,EAAIV,EAAgB,OAAQU,IAAK,CAC7C,IAAIC,EAAgBhC,EAAK,aAAa,KAAKiC,GAAQA,EAAK,gBAAkBZ,EAAgBU,CAAC,CAAC,EAEpFD,EAAY,KAAKT,EAAgBU,CAAC,CAAC,CAE/C,CACI/B,EAAK,MAAM,GAAK,GAChBA,EAAK,KAAK,aAAa,MAAQ8B,EAAY,KAAK,GAAG,EAC9C9B,EAAK,MAAM,GAAK,KACrBA,EAAK,KAAK,iBAAiB,MAAQ8B,EAAY,KAAK,GAAG,EAK/D,CAEO,UAAUI,EAAuB,CACxC,OAAO,IAAI,KAAKA,CAAO,CACvB,CACO,qBACFC,EAAcC,EACdC,EAAcC,EACP,CAEZ,OAAOH,EAASG,GAAQF,GAAQC,CAC/B,CACM,wBAAwBE,EAAiB,CAChD,IAAIC,EAAS,GACb,QAAST,EAAI,EAAGA,EAAIQ,EAAO,OAAQR,IAAK,CAEpC,IAAII,EAAS,KAAK,UAAUI,EAAOR,CAAC,EAAE,cAAc,EAChDK,EAAO,KAAK,UAAUG,EAAOR,CAAC,EAAE,YAAY,EAChD,QAASU,EAAI,EAAGA,EAAIF,EAAO,OAAQE,IAC/B,GAAIV,GAAKU,EAET,KAAIJ,EAAS,KAAK,UAAUE,EAAOE,CAAC,EAAE,cAAc,EAChDH,EAAO,KAAK,UAAUC,EAAOE,CAAC,EAAE,YAAY,EAChD,GAAI,KAAK,qBAAqBN,EAAQC,EAAMC,EAAQC,CAAI,EAAG,CACvD,IAAII,EAAqB,4BACnBH,EAAOR,CAAC,EAAE,MAAQ,QAAUQ,EAAOE,CAAC,EAAE,SAC5C,eAAYC,CAAkB,EAC9BF,EAAS,GACT,KACJ,EAEJ,GAAIA,GAAU,GACV,KACR,CACA,OAAOA,CACX,CAEc,mBAAmB7C,EAC7B,CACI,IAAIgD,EAAchD,EACdK,EAAO,KAGP4C,EAAiB,CAAC,EAEtB,GAAG,MAAK,wBAAwB,KAAK,KAAK,OAAO,KAAK,EAItD,KAAIC,EAAW7C,EAAK,KAAK,aAAa,OAAO,OAAOA,EAAK,KAAK,iBAAiB,MAAM,EACrF8C,EAAwB,KAAK,CACzB,YAAU,YAASC,EAAsB,OAAO,aAAa,EAAE,GAAGF,CAAQ,CAC9E,EAAGlD,GAAY,CACX,IAAIqD,EAAsB,CAAC,EACvBC,EAA2B,CAAC,EAE5BC,EAAiB,CAAC,EAClBC,EAAe,CAAC,EACpB,QAASC,KAAOzD,EAAS,SACrB,GAAIK,EAAK,WAAW,QAAQL,EAAS,SAASyD,CAAG,EAAE,EAAE,GAAK,GAE1D,KAAIC,EAAS,KAAK,UAAU1D,EAAS,SAASyD,CAAG,EAAE,cAAc,EAC7DE,EAAO,KAAK,UAAU3D,EAAS,SAASyD,CAAG,EAAE,YAAY,EAE7D,QAASrB,EAAI,EAAGA,EAAI/B,EAAK,KAAK,OAAO,MAAM,OAAQ+B,IAAK,CACpD,IAAIwB,EAAS,KAAK,UAAUvD,EAAK,KAAK,OAAO,MAAM+B,CAAC,EAAE,cAAc,EAChEyB,EAAO,KAAK,UAAUxD,EAAK,KAAK,OAAO,MAAM+B,CAAC,EAAE,YAAY,EAChE,GAAI,KAAK,qBAAqBsB,EAAQC,EAAMC,EAAQC,CAAI,GAAK,GAAM,CAC/D,IAAIC,EAEJ,QAASC,KAAS1D,EAAK,qBAAqB,MACxC,GAAIA,EAAK,qBAAqB,MAAM0D,CAAK,EAAE,IAAM/D,EAAS,SAASyD,CAAG,EAAE,cAAe,CACnFK,EAAazD,EAAK,qBAAqB,MAAM0D,CAAK,EAAE,WACpD,KACJ,CAEJV,EAAoB,KAAKS,CAAU,EACnCR,EAAyB,KAAKtD,EAAS,SAASyD,CAAG,EAAE,cAAc,SAAS,CAAC,EAC7EF,EAAe,KAAKvD,EAAS,SAASyD,CAAG,EAAE,cAAc,EACzDD,EAAa,KAAKxD,EAAS,SAASyD,CAAG,EAAE,YAAY,CACzD,CACJ,EAGJ,GAAIJ,EAAoB,OAAS,EAAG,CAChC,IAAMW,EAAe,IAAI,KAAK,KAAK,IAAI,GAAGT,EAAe,IAAIU,GAAQ,KAAK,MAAMA,CAAI,CAAC,CAAC,CAAC,EACjFC,EAAa,IAAI,KAAK,KAAK,IAAI,GAAGV,EAAa,IAAIS,GAAQ,KAAK,MAAMA,CAAI,CAAC,CAAC,CAAC,EAC7EE,EAAqBH,EAAa,YAAY,EAAE,UAAU,EAAG,EAAE,EAC/DI,EAAmBF,EAAW,YAAY,EAAE,UAAU,EAAG,EAAE,EAEjE,IAAInB,EAAqBM,EAAoB,KAAK,GAAG,EAAI,6BAA+Bc,EACpF,UAAYC,EAAkB,6CAClC,WAAQrB,EAAoB,IAAM,CAC9B,IAAMsB,EAAehE,EAAK,KAAK,aAAa,OAAO,OAAOiC,GAAQ,CAACgB,EAAyB,SAAShB,CAAI,CAAC,EAM1G,GAJA,QAAQ,IAAI+B,CAAY,EACxB,QAAQ,IAAIf,CAAwB,EACpC,QAAQ,IAAIjD,EAAK,KAAK,aAAa,MAAM,EACzCA,EAAK,KAAK,aAAa,OAASgE,EAC5BhE,EAAK,KAAK,aAAa,OAAO,QAAU,EAAG,IAC3C,eAAY,yBAAyB,EACrC,MACJ,CACA,QAAS+B,EAAI,EAAGA,EAAI/B,EAAK,KAAK,aAAa,OAAO,OAAQ+B,IACtD,QAASU,EAAI,EAAGA,EAAIzC,EAAK,KAAK,OAAO,MAAM,OAAQyC,IAAK,CACpD,IAAIwB,EAAM,IAAIC,EACdD,EAAI,cAAgB,SAASjE,EAAK,KAAK,aAAa,OAAO+B,CAAC,CAAC,EAC7DkC,EAAI,eAAiBjE,EAAK,KAAK,OAAO,MAAMyC,CAAC,EAAE,eAC/CwB,EAAI,aAAejE,EAAK,KAAK,OAAO,MAAMyC,CAAC,EAAE,aAC7CwB,EAAI,QAAUjE,EAAK,KAAK,OAAO,MAAMyC,CAAC,EAAE,QACxCG,EAAQ,KAAKqB,CAAG,CACpB,CAEJjE,EAAK,KAAK,aAAa,MAAQ4C,EAE/B,MAAM,mBAAmBD,CAAW,CACxC,EAAG,CACC,KAAM,IAAM,CAEZ,CACJ,CAAC,EAED,MACJ,CACA,QAASZ,EAAI,EAAGA,EAAI,KAAK,KAAK,aAAa,OAAO,OAAQA,IACtD,QAASU,EAAI,EAAGA,EAAI,KAAK,KAAK,OAAO,MAAM,OAAQA,IAAK,CACpD,IAAIwB,EAAM,IAAIC,EACdD,EAAI,cAAgB,SAAS,KAAK,KAAK,aAAa,OAAOlC,CAAC,CAAC,EAC7DkC,EAAI,eAAiB,KAAK,KAAK,OAAO,MAAMxB,CAAC,EAAE,eAC/CwB,EAAI,aAAe,KAAK,KAAK,OAAO,MAAMxB,CAAC,EAAE,aAC7CwB,EAAI,QAAU,KAAK,KAAK,OAAO,MAAMxB,CAAC,EAAE,QACxCG,EAAQ,KAAKqB,CAAG,CACpB,CAEJ,KAAK,KAAK,aAAa,MAAQrB,EAC/B,MAAM,mBAAmBD,CAAW,CACxC,CAAC,EACL,CACU,YAAa,CACnB,MAAM,WAAW,EACjB,IAAI3C,EAAO,KACPmE,EAAgBnE,EAAK,KAAK,aAAa,OAC3CA,EAAK,KAAK,iBAAiB,MAAQA,EAAK,KAAK,iBAAiB,MAAM,OAAOiC,GAAQ,CAACkC,EAAc,SAASlC,EAAK,EAAE,CAAC,EACnH,EAAE,QAAQ,EAAE,MAAM,UAAY,CAC1B,EAAE,0CAA0C,EACvC,YAAY,IAAIjC,EAAK,0BAA0B,EAC/C,GAAG,QAAS,UAAY,IAChB,iBAAcA,EAAK,KAAK,iBAAiB,KAAK,MAC/C,iBACI,2CAA2CA,EAAK,KAAK,KAAK,eAC1D,IAAM,CACF,IAAI6C,EAAW7C,EAAK,KAAK,aAAa,OAAO,OAAOA,EAAK,KAAK,iBAAiB,MAAM,EACrF8C,EAAwB,KAAK,CACzB,YAAU,YAASC,EAAsB,OAAO,aAAa,EAAE,GAAGF,CAAQ,CAC9E,EAAGlD,GAAY,CACX,IAAIqD,EAAsB,CAAC,EACvBC,EAA2B,CAAC,EAC5BC,EAAiB,CAAC,EAClBC,EAAe,CAAC,EACpB,QAASC,KAAOzD,EAAS,SACrB,GAAIK,EAAK,WAAW,QAAQL,EAAS,SAASyD,CAAG,EAAE,EAAE,GAAK,GAE1D,KAAIC,EAASrD,EAAK,UAAUL,EAAS,SAASyD,CAAG,EAAE,cAAc,EAC7DE,EAAOtD,EAAK,UAAUL,EAAS,SAASyD,CAAG,EAAE,YAAY,EAC7D,QAASrB,EAAI,EAAGA,EAAI/B,EAAK,KAAK,OAAO,MAAM,OAAQ+B,IAAK,CACpD,IAAIwB,EAASvD,EAAK,UAAUA,EAAK,KAAK,OAAO,MAAM+B,CAAC,EAAE,cAAc,EAChEyB,EAAOxD,EAAK,UAAUA,EAAK,KAAK,OAAO,MAAM+B,CAAC,EAAE,YAAY,EAChE,GAAI/B,EAAK,qBAAqBqD,EAAQC,EAAMC,EAAQC,CAAI,GAAK,GAAM,CAC/D,IAAIC,EACJ,QAASC,KAAS1D,EAAK,qBAAqB,MACxC,GAAIA,EAAK,qBAAqB,MAAM0D,CAAK,EAAE,IAAM/D,EAAS,SAASyD,CAAG,EAAE,cAAe,CACnFK,EAAazD,EAAK,qBAAqB,MAAM0D,CAAK,EAAE,WACpD,KACJ,CAEJV,EAAoB,KAAKS,CAAU,EACnCR,EAAyB,KAAKtD,EAAS,SAASyD,CAAG,EAAE,cAAc,SAAS,CAAC,EAC7EF,EAAe,KAAKvD,EAAS,SAASyD,CAAG,EAAE,cAAc,EACzDD,EAAa,KAAKxD,EAAS,SAASyD,CAAG,EAAE,YAAY,CACzD,CACJ,EAEJ,GAAIJ,EAAoB,OAAS,EAAG,CAChC,IAAMW,EAAe,IAAI,KAAK,KAAK,IAAI,GAAGT,EAAe,IAAIU,GAAQ,KAAK,MAAMA,CAAI,CAAC,CAAC,CAAC,EACjFC,EAAa,IAAI,KAAK,KAAK,IAAI,GAAGV,EAAa,IAAIS,GAAQ,KAAK,MAAMA,CAAI,CAAC,CAAC,CAAC,EAC7EE,EAAqBH,EAAa,YAAY,EAAE,UAAU,EAAG,EAAE,EAC/DI,EAAmBF,EAAW,YAAY,EAAE,UAAU,EAAG,EAAE,EACjE,IAAInB,EAAqBM,EAAoB,KAAK,GAAG,EAAI,6BAA+Bc,EACpF,UAAYC,EAAmB,6CACnC,WAAQrB,EAAoB,IAAM,CAC9B,IAAMsB,EAAehE,EAAK,KAAK,iBAAiB,OAAO,OAAOiC,GAAQ,CAACgB,EAAyB,SAAShB,CAAI,CAAC,EAC9GjC,EAAK,KAAK,aAAa,MAAQ,GAAGA,EAAK,KAAK,aAAa,SAASgE,IAClEhE,EAAK,KAAK,iBAAiB,MAAQ,GACnC,IAAImE,EAAgBnE,EAAK,KAAK,aAAa,OAC3CA,EAAK,KAAK,iBAAiB,MAAQA,EAAK,UACxCA,EAAK,KAAK,iBAAiB,MAAQA,EAAK,KAAK,iBAAiB,MAAM,OAAOiC,GAAQ,CAACkC,EAAc,SAASlC,EAAK,EAAE,CAAC,CACnH,EAAG,CACH,KAAM,IAAM,CAEZ,CACJ,CAAC,EAGD,MACJ,CAEAjC,EAAK,KAAK,aAAa,MAAQ,GAAGA,EAAK,KAAK,aAAa,SAASA,EAAK,KAAK,iBAAiB,QAC7FA,EAAK,KAAK,iBAAiB,MAAQ,GACnC,IAAImE,EAAgBnE,EAAK,KAAK,aAAa,OAC3CA,EAAK,KAAK,iBAAiB,MAAQA,EAAK,UACxCA,EAAK,KAAK,iBAAiB,MAAQA,EAAK,KAAK,iBAAiB,MAAM,OAAOiC,GAAQ,CAACkC,EAAc,SAASlC,EAAK,EAAE,CAAC,CACvH,CAAC,CACL,EAAG,CACC,KAAM,IAAM,CACR,QAAQ,IAAI,eAAe,CAC/B,CACJ,CACI,CAEhB,CAAC,CACT,CAAC,EACD,EAAE,qBAAqB,EAAE,GAAG,QAAS,UAAU,CAE3C,EAAE,2DAA2D,EAAE,GAAG,cAAe,UAAY,CACzF,OAAO,UAAejC,EAAK,KAAK,OAAO,MACvC,OAAO,gBAAqBA,EAAK,KAAK,aAAa,OACnD,OAAO,YAAiBA,EAAK,KAAK,iBAAiB,MAEvD,CAAC,CAEL,CAAC,EACD,OAAO,UAAeA,EAAK,KAAK,OAAO,MACvC,OAAO,gBAAqBA,EAAK,KAAK,aAAa,OACnD,OAAO,YAAiBA,EAAK,KAAK,iBAAiB,OACnD,IAAIoE,EAAa,CAAC,EAClB,QAASrC,EAAI,EAAGA,EAAI/B,EAAK,KAAK,aAAa,MAAM,OAAQ+B,IACrDqC,EAAW,KAAKpE,EAAK,KAAK,aAAa,MAAM+B,CAAC,EAAE,EAAE,EACtD/B,EAAK,WAAaoE,EAClB,OAAO,WAAgBpE,EAAK,UAChC,CAEU,cACV,CACI,MAAM,aAAa,EACnB,IAAIA,EAAO,KACXA,EAAK,UAAYA,EAAK,KAAK,iBAAiB,MACvC,KAAK,MAAM,IACZ,KAAK,KAAK,OAAO,MAAQ,KAAK,KAAK,OAAO,MAAM,KAAK,CAACqE,EAAGC,IAAM,IAAI,KAAKD,EAAE,cAAc,EAAE,QAAQ,EAAI,IAAI,KAAKC,EAAE,cAAc,EAAE,QAAQ,CAAC,EAC1I,KAAK,KAAK,OAAO,QAAQ,GAG7B,EAAE,KAAK,KAAK,aAAa,OAAO,EAAE,GAAG,SAAU,UAAY,CACvD,OAAO,UAAetE,EAAK,KAAK,OAAO,MACvC,OAAO,gBAAqBA,EAAK,KAAK,aAAa,OACnD,OAAO,YAAiBA,EAAK,KAAK,iBAAiB,OACnD,IAAImE,EAAgBnE,EAAK,KAAK,aAAa,OAC3CA,EAAK,KAAK,iBAAiB,MAAQA,EAAK,UACxCA,EAAK,KAAK,iBAAiB,MAAQA,EAAK,KAAK,iBAAiB,MAAM,OAAOiC,GAAQ,CAACkC,EAAc,SAASlC,EAAK,EAAE,CAAC,CAEvH,CAAC,EACD,EAAE,KAAK,KAAK,iBAAiB,OAAO,EAAE,GAAG,SAAU,UAAY,CAC3D,OAAO,UAAejC,EAAK,KAAK,OAAO,MACvC,OAAO,gBAAqBA,EAAK,KAAK,aAAa,OACnD,OAAO,YAAiBA,EAAK,KAAK,iBAAiB,MACvD,CAAC,EAGD,cAAY,YAAY,KAAK,KAAK,WAAW,QAAS,EAAI,EAC1D,EAAE,eAAe,EAAE,KAAK,EAExB,IAAIuE,EAAc,SAAS,cAAc,uBAAuB,EAEhEA,EAAY,aAAa,KAAM,gBAAgB,EAE/CA,EAAY,aAAa,QAAS,SAAS,EAE3C,KAAK,KAAK,WAAW,QAAQ,MAAMA,CAAW,EAG9CA,EAAY,iBAAiB,SAAWC,GAAe,CACnD,IAAMC,EAAcD,EACpB,KAAK,UAAYC,EAAY,OAAO,IACpC,KAAK,KAAK,WAAW,MAAQ,KAAK,SAEtC,CAAC,EAGD,KAAK,KAAK,WAAW,QAAQ,MAAM,UAAY,CAE3CF,EAAY,OAAS,EAEzB,CACA,EAGA,IAAIlE,EAAqB,SAAS,eAAe,KAAK,SAAW,aAAa,EAC1EJ,EAAwB,SAAS,eAAe,KAAK,SAAW,gBAAgB,EAChFC,EAAwB,SAAS,eAAe,KAAK,SAAW,gBAAgB,EAChFC,EAAsB,SAAS,eAAe,KAAK,SAAW,cAAc,EAC5EC,EAAsB,SAAS,eAAe,KAAK,SAAW,cAAc,EAEhF,EAAE,SAAS,KAAK,sBAAsB,EAAE,GAAG,QAAS,SAAgBsE,EAAG,QAAAC,EAAA,sBACnE,EAAE,eAAe,EAAE,KAAK,CAG5B,GAAC,EAGD,EAAE1E,CAAqB,EAAE,GAAG,SAAU,UAAkB,QAAA0E,EAAA,sBACpD3E,EAAK,eAAe,CAGxB,GAAC,EACD,EAAEG,CAAmB,EAAE,GAAG,SAAU,UAAkB,QAAAwE,EAAA,sBAClD3E,EAAK,eAAe,CAGxB,GAAC,EACD,EAAEI,CAAmB,EAAE,GAAG,SAAU,UAAkB,QAAAuE,EAAA,sBAClD3E,EAAK,eAAe,CAExB,GAAC,EACD,EAAEE,CAAqB,EAAE,GAAG,SAAU,UAAkB,QAAAyE,EAAA,sBACpD3E,EAAK,eAAe,CAExB,GAAC,EACD,EAAEK,CAAkB,EAAE,GAAG,SAAU,UAAkB,QAAAsE,EAAA,sBACjD3E,EAAK,eAAe,CAGxB,GAAC,EACD,OAAO,UAAeA,EAAK,KAAK,OAAO,MACvC,OAAO,gBAAqBA,EAAK,KAAK,aAAa,OACnD,OAAO,YAAiBA,EAAK,KAAK,iBAAiB,MAKvD,CACJ,EA3baU,EAAApB,EAAA,uBAAAA,EAANsF,EAAA,CADN,aAAW,cAAc,+CAA+C,GAC5DtF,GA6bb,IAAM4E,EAAN,cAA8CW,CAA6B,CACvE,aAAc,CACV,MAAM,CACV,CACJ,EAJMnE,EAAAwD,EAAA",
  "names": ["import_corelib", "import_q", "import_q", "import_q", "import_corelib", "EmployeeGroupDialog", "EmployeeGroupForm", "criteria", "EmployeeProfileService", "EmployeeProfileRow", "response", "EmployeeGroupingsService", "EmployeeGroupRow", "EmployeeGroupService", "opt", "self", "OccupationListElement", "DepartmentListElement", "DivisionListElement", "JobGradeListElement", "SectionListElement", "parseListFromElement", "element", "valueStr", "number", "__name", "JobGradeList", "DivisionList", "DepartmentList", "OccupationList", "SectionList", "jobGradeSet", "divisionSet", "departmentSet", "occupationSet", "sectionSet", "employeeRowList", "employee", "JobGradeID", "DivisionID", "DepartmentID", "OccupationID", "SectionID", "Id", "num", "finalOutput", "i", "employeeGroup", "item", "dateStr", "start1", "end1", "start2", "end2", "shifts", "result", "j", "concatenatedString", "originalRes", "Results", "combined", "ViewShiftHistoryService", "EmployeeGroupShiftRow", "listOfClashEmployee", "listOfClashEmployeeRowId", "ShiftStartList", "ShiftEndList", "res", "Start1", "End1", "Start2", "End2", "EmployeeID", "index", "earliestDate", "date", "latestDate", "earliestDateString", "latestDateString", "filteredList", "Obj", "ConcreteEmployeeShiftPatternRow", "itemsToFilter", "idToBypass", "a", "b", "ColorChoser", "evt", "customEvent", "e", "__async", "__decorateClass", "EmployeeGroupShiftPatternRow"]
}
