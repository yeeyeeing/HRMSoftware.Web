{
  "version": 3,
  "sources": ["../../../Modules/HumanResource/AnnualLeavePolicy/AnnualLeavePolicy/AnnualLeavePolicyEditor.ts", "../../../Modules/ServerTypes/AnnualLeavePolicy/AnnualLeavePolicyColumns.ts", "../../../Modules/ServerTypes/AnnualLeavePolicy/AnnualLeavePolicyForm.ts", "../../../Modules/ServerTypes/AnnualLeavePolicy/AnnualLeavePolicyRow.ts", "../../../Modules/ServerTypes/AnnualLeavePolicy/AnnualLeavePolicyService.ts", "../../../Modules/HumanResource/AnnualLeavePolicy/AnnualLeavePolicy/AnnualLeavePolicyEditDialog.ts"],
  "sourcesContent": ["import { Decorators } from '@serenity-is/corelib';\nimport { AnnualLeavePolicyColumns, AnnualLeavePolicyRow } from '../../../ServerTypes/AnnualLeavePolicy';\nimport { GridEditorBase } from \"@serenity-is/extensions\";\nimport { AnnualLeavePolicyEditDialog } from './AnnualLeavePolicyEditDialog';\n@Decorators.registerEditor('HRMSoftware.AnnualLeavePolicy.AnnualLeavePolicyEditor')\nexport class AnnualLeavePolicyEditor extends GridEditorBase<AnnualLeavePolicyRow> {\n    protected getColumnsKey() { return AnnualLeavePolicyColumns.columnsKey; }\n    protected getDialogType() { return AnnualLeavePolicyEditDialog; }\n    protected getLocalTextPrefix() { return AnnualLeavePolicyRow.localTextPrefix; }\n    protected getAddButtonCaption() {\n        return \"Add\";\n    }\n    validateEntity(row, id) {\n        return true;\n    }\n}", "\uFEFFexport class AnnualLeavePolicyColumns {\n    static columnsKey = 'AnnualLeavePolicy.AnnualLeavePolicy';\n}", "\uFEFFimport { IntegerEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface AnnualLeavePolicyForm {\n    ServiceFromYear: IntegerEditor;\n    ServiceUntilYear: IntegerEditor;\n    EligibleDays: IntegerEditor;\n    MaximumAccumulated: IntegerEditor;\n}\n\nexport class AnnualLeavePolicyForm extends PrefixedContext {\n    static formKey = 'AnnualLeavePolicy.AnnualLeavePolicy';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!AnnualLeavePolicyForm.init)  {\n            AnnualLeavePolicyForm.init = true;\n\n            var w0 = IntegerEditor;\n\n            initFormType(AnnualLeavePolicyForm, [\n                'ServiceFromYear', w0,\n                'ServiceUntilYear', w0,\n                'EligibleDays', w0,\n                'MaximumAccumulated', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface AnnualLeavePolicyRow {\n    Id?: number;\n    Year?: number;\n    ServiceFromYear?: number;\n    ServiceUntilYear?: number;\n    EligibleDays?: number;\n    MaximumAccumulated?: number;\n    PolicyRow?: number;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class AnnualLeavePolicyRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'Year';\n    static readonly localTextPrefix = 'AnnualLeavePolicy.AnnualLeavePolicy';\n    static readonly deletePermission = '*';\n    static readonly insertPermission = '*';\n    static readonly readPermission = '*';\n    static readonly updatePermission = '*';\n\n    static readonly Fields = fieldsProxy<AnnualLeavePolicyRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { AnnualLeavePolicyRow } from \"./AnnualLeavePolicyRow\";\nimport { ServiceOptions, ServiceRequest, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace AnnualLeavePolicyService {\n    export const baseUrl = 'AnnualLeavePolicy/AnnualLeavePolicy';\n\n    export declare function Create(request: SaveRequest<AnnualLeavePolicyRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<AnnualLeavePolicyRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<AnnualLeavePolicyRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<AnnualLeavePolicyRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function ListAnnualLeavePolicy(request: ServiceRequest, onSuccess?: (response: ListResponse<AnnualLeavePolicyRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"AnnualLeavePolicy/AnnualLeavePolicy/Create\",\n        Update: \"AnnualLeavePolicy/AnnualLeavePolicy/Update\",\n        Delete: \"AnnualLeavePolicy/AnnualLeavePolicy/Delete\",\n        Retrieve: \"AnnualLeavePolicy/AnnualLeavePolicy/Retrieve\",\n        List: \"AnnualLeavePolicy/AnnualLeavePolicy/List\",\n        ListAnnualLeavePolicy: \"AnnualLeavePolicy/AnnualLeavePolicy/ListAnnualLeavePolicy\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List', \n        'ListAnnualLeavePolicy'\n    ].forEach(x => {\n        (<any>AnnualLeavePolicyService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "import {  Decorators, EditorUtils, EntityDialog } from '@serenity-is/corelib';\nimport { AnnualLeavePolicyForm, AnnualLeavePolicyRow, AnnualLeavePolicyService } from '../../../ServerTypes/AnnualLeavePolicy';\nimport { GridEditorDialog } from \"@serenity-is/extensions\";\nimport { alertDialog } from '@serenity-is/corelib/q';\n\n@Decorators.registerClass('HRMSoftware.AnnualLeavePolicy.AnnualLeavePolicyEditDialog')\nexport class AnnualLeavePolicyEditDialog extends GridEditorDialog<AnnualLeavePolicyRow> {\n    protected getFormKey() { return AnnualLeavePolicyForm.formKey; }\n    protected getLocalTextPrefix() { return AnnualLeavePolicyRow.localTextPrefix; }\n\n    protected form: AnnualLeavePolicyForm;\n    public StartingRange: number[] = [];\n    public EndingRange: number[] = [];\n\n    constructor() {\n        super();\n        this.form = new AnnualLeavePolicyForm(this.idPrefix);\n\n    }\n\n    /*\n    protected initDialog(dialog)\n    {\n        super.initDialog(dialog);\n        \n        AnnualLeavePolicyService.List({\n        }, response => {\n\n            for (var index in response.Entities)\n            {\n\n                console.log(this.form.idPrefix)\n                console.log(this.form.byId)\n                this.StartingRange.push(response.Entities[index].ServiceFromYear)\n                this.EndingRange.push(response.Entities[index].ServiceUntilYear)\n            }\n\n\n        });\n        \n\n       // EditorUtils.setReadonly(this.form.Year.element, true);\n    }\n    */\n\n    protected save_submitHandler(response):\n        void {\n\n        if (this.form.ServiceFromYear.value < 0) {\n            alertDialog('Service From Year Cannot be less than 0')\n            return\n        }\n\n        if (this.form.ServiceUntilYear.value < 0) {\n            alertDialog('Service Until Year Cannot be less than 0')\n            return\n        }\n\n        if (this.form.ServiceUntilYear.value >99) {\n            alertDialog('Service Until Year must be less than 99')\n            return\n        }\n\n        if (this.form.ServiceUntilYear.value - this.form.ServiceFromYear.value < 0) {\n            alertDialog('Service Until Year must be greater than Service From Year')\n            return\n        }\n\n\n       \n        super.save_submitHandler(response)\n        \n\n\n\n    }\n\n\n\n\n\n\n}"],
  "mappings": "6IAAA,IAAAA,EAA2B,SCAnB,IAAMC,EAAN,KAA+B,CAEvC,EAFcC,EAAAD,EAAA,4BAAAA,EACH,WAAa,sCCDvB,IAAAE,EAA+C,SAChDC,EAA6B,SAStB,IAAMC,EAAN,cAAoC,iBAAgB,CAIvD,YAAYC,EAAgB,CAGxB,GAFA,MAAMA,CAAM,EAER,CAACD,EAAsB,KAAO,CAC9BA,EAAsB,KAAO,GAE7B,IAAIE,EAAK,mBAET,gBAAaF,EAAuB,CAChC,kBAAmBE,EACnB,mBAAoBA,EACpB,eAAgBA,EAChB,qBAAsBA,CAC1B,CAAC,CACL,CACJ,CACJ,EApBaC,EAANH,EAAMI,EAAAD,EAAA,yBAAAA,EACF,QAAU,sCCXpB,IAAAE,EAA4B,SAmBtB,IAAeC,EAAf,KAAoC,CAW3C,EAXsBC,EAAAD,EAAA,wBAAAA,EACF,WAAa,KADXA,EAEF,iBAAmB,WAFjBA,EAGF,aAAe,OAHbA,EAIF,gBAAkB,sCAJhBA,EAKF,iBAAmB,IALjBA,EAMF,iBAAmB,IANjBA,EAOF,eAAiB,IAPfA,EAQF,iBAAmB,IARjBA,EAUF,UAAS,eAAkC,EC3B/D,IAAAE,EAA+D,SAE9CC,OACAA,EAAA,QAAU,sCASVA,EAAA,QAAU,CACnB,OAAQ,6CACR,OAAQ,6CACR,OAAQ,6CACR,SAAU,+CACV,KAAM,2CACN,sBAAuB,2DAC3B,EAEA,CACI,SACA,SACA,SACA,WACA,OACA,uBACJ,EAAE,QAAQC,GAAK,CACLD,EAA0BC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CACpD,SAAO,kBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IA9BYJ,MAAA,KJFjB,IAAAK,EAA+B,SKF/B,IAAAC,EAAuD,SAEvD,IAAAC,EAAiC,SACjCC,EAA4B,SAGrB,IAAMC,EAAN,cAA0C,kBAAuC,CAQpF,aAAc,CACV,MAAM,EAJV,KAAO,cAA0B,CAAC,EAClC,KAAO,YAAwB,CAAC,EAI5B,KAAK,KAAO,IAAIC,EAAsB,KAAK,QAAQ,CAEvD,CAXU,YAAa,CAAE,OAAOA,EAAsB,OAAS,CACrD,oBAAqB,CAAE,OAAOC,EAAqB,eAAiB,CAqCpE,mBAAmBC,EACpB,CAEL,GAAI,KAAK,KAAK,gBAAgB,MAAQ,EAAG,IACrC,eAAY,yCAAyC,EACrD,MACJ,CAEA,GAAI,KAAK,KAAK,iBAAiB,MAAQ,EAAG,IACtC,eAAY,0CAA0C,EACtD,MACJ,CAEA,GAAI,KAAK,KAAK,iBAAiB,MAAO,GAAI,IACtC,eAAY,yCAAyC,EACrD,MACJ,CAEA,GAAI,KAAK,KAAK,iBAAiB,MAAQ,KAAK,KAAK,gBAAgB,MAAQ,EAAG,IACxE,eAAY,2DAA2D,EACvE,MACJ,CAIA,MAAM,mBAAmBA,CAAQ,CAKrC,CAOJ,EA5EaC,EAAAJ,EAAA,+BAAAA,EAANK,EAAA,CADN,aAAW,cAAc,2DAA2D,GACxEL,GLDN,IAAMM,EAAN,cAAsC,gBAAqC,CACpE,eAAgB,CAAE,OAAOC,EAAyB,UAAY,CAC9D,eAAgB,CAAE,OAAOC,CAA6B,CACtD,oBAAqB,CAAE,OAAOC,EAAqB,eAAiB,CACpE,qBAAsB,CAC5B,MAAO,KACX,CACA,eAAeC,EAAKC,EAAI,CACpB,MAAO,EACX,CACJ,EAVaC,EAAAN,EAAA,2BAAAA,EAANO,EAAA,CADN,aAAW,eAAe,uDAAuD,GACrEP",
  "names": ["import_corelib", "AnnualLeavePolicyColumns", "__name", "import_corelib", "import_q", "_AnnualLeavePolicyForm", "prefix", "w0", "AnnualLeavePolicyForm", "__name", "import_q", "AnnualLeavePolicyRow", "__name", "import_q", "AnnualLeavePolicyService", "x", "r", "s", "o", "import_extensions", "import_corelib", "import_extensions", "import_q", "AnnualLeavePolicyEditDialog", "AnnualLeavePolicyForm", "AnnualLeavePolicyRow", "response", "__name", "__decorateClass", "AnnualLeavePolicyEditor", "AnnualLeavePolicyColumns", "AnnualLeavePolicyEditDialog", "AnnualLeavePolicyRow", "row", "id", "__name", "__decorateClass"]
}
