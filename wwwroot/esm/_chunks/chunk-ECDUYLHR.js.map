{
  "version": 3,
  "sources": ["../../../Modules/HumanResource/ViewShiftHistory/ViewShiftHistory/ViewShiftHistoryDialog.ts"],
  "sourcesContent": ["import { BaseEditorFiltering, Decorators, EditorUtils, EntityDialog } from '@serenity-is/corelib';\nimport { ListResponse, serviceCall } from '@serenity-is/corelib/q';\nimport { ViewShiftHistoryForm, ViewShiftHistoryRow, ViewShiftHistoryService } from '../../../ServerTypes/ViewShiftHistory';\nimport * as Highcharts from \"highcharts\";\nimport Heatmap from \"highcharts/modules/heatmap\"\nimport { DateEditor, Select2Editor } from \"@serenity-is/corelib\";\nimport { SetEmployeeShiftDialog } from '../../SetEmployeeShift/SetEmployeeShift/SetEmployeeShiftDialog';\nimport { PublicHolidayDialog } from '../../PublicHoliday/PublicHoliday/PublicHolidayDialog';\nimport { getLookup } from '@serenity-is/corelib/q';\nimport { PublicHolidayService } from '../../../ServerTypes/PublicHoliday';\nimport { ShiftService } from '../../../ServerTypes/Shift';\nimport { LeaveApplicationService } from '../../../ServerTypes/LeaveApplication';\nimport { EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { EmployeeGroupService } from '../../../ServerTypes/EmployeeGroup';\nimport { EmployeeGroupDialog } from '../../EmployeeGroup/EmployeeGroup/EmployeeGroupDialog';\nimport { Authorization } from '@serenity-is/corelib/q';\nimport { CompanySettingsService } from '../../../ServerTypes/CompanySettings';\nimport { LeaveApplicationDialog } from '../../LeaveApplication/LeaveApplication/LeaveApplicationDialog';\n\nHeatmap(Highcharts)\n@Decorators.registerClass('HRMSoftware.ViewShiftHistory.ViewShiftHistoryDialog')\n\nexport class ViewShiftHistoryDialog extends EntityDialog<ViewShiftHistoryRow, any> {\n    protected getFormKey() { return ViewShiftHistoryForm.formKey; }\n    protected getRowDefinition() { return ViewShiftHistoryRow; }\n    protected getService() { return ViewShiftHistoryService.baseUrl; }\n\n    protected form = new ViewShiftHistoryForm(this.idPrefix);\n    public EmployeeID: string;\n    public Country: string;\n\n    public list_of_shift_text: string[] = [];\n    public list_of_shift_id: number[] = [];\n    public list_of_color: string[] = [];\n    public list_of_public_holiday_date: string[] = [];\n    public list_of_public_holiday_name: string[] = [];\n    public list_of_public_holiday_id: number[] = [];\n    public FromDayList: number[] = [];\n    public UntilDayList: number[] = [];\n    public EmployeeRowID: number;\n\n\n    constructor(EmployeeID: string, EmployeeRowID: number) {\n\n\n        super();\n        this.EmployeeID = EmployeeID\n        this.EmployeeRowID = EmployeeRowID\n        /*\n        console.log(this.list_of_shift_text)\n        for (var index in this.list_of_shift_text)\n        {\n            this.list_of_shift_text[index] = this.list_of_shift_text[index].replace(/\\s/g, \"\");\n            this.list_of_shift_text[index] = this.list_of_shift_text[index].substring(0,13)\n        }\n        */\n        this.saveAndCloseButton.hide();\n        this.deleteButton.hide();\n        this.localizationButton.hide();\n        this.undeleteButton.hide();\n        this.cloneButton.hide();\n        this.applyChangesButton.hide();\n       \n        EmployeeProfileService.Retrieve({\n            EntityId: EmployeeRowID\n        }, response => {\n            this.form.EmployeeId.value = response.Entity.EmployeeID;\n            this.form.EmployeeName.value = response.Entity.EmployeeName;\n        })\n        EditorUtils.setReadonly(this.form.EmployeeId.element, true);\n        EditorUtils.setReadonly(this.form.EmployeeName.element, true);\n\n        var tabId = $(\".fieldset\").children().attr('id');\n\n        var node3 = document.getElementById(tabId);\n        var divNode = document.createElement('DIV');\n\n        divNode.setAttribute(\"id\", \"time-box\");\n        divNode.setAttribute(\"class\", \"row\");\n        divNode.setAttribute(\"align\", \"right\");\n\n        var rowNode = document.createElement('DIV');\n        var MonthNode = document.createElement(\"INPUT\");\n        MonthNode.setAttribute(\"id\", \"Month\");\n        MonthNode.setAttribute(\"type\", \"text\");\n\n        MonthNode.setAttribute(\"class\", \"monthSelect\");\n        rowNode.appendChild(MonthNode);\n        divNode.appendChild(rowNode);\n        node3.appendChild(divNode);\n\n        var TimetableNode = document.createElement('DIV');\n        TimetableNode.classList.add('category-title');\n        TimetableNode.setAttribute(\"id\", \"Employee-Timetable\");\n        node3.appendChild(TimetableNode);\n    }\n\n\n\n\n\n    public dialogOpen(asPanel?: boolean): void {\n\n        super.dialogOpen(asPanel);\n        function addLeadingZero(num: number): string {\n            return num < 10 ? '0' + num : num.toString();\n        }\n        function generateChartData(data, ListOfShiftData, ListOfPublicHolidayData, TakenLeave) {\n            const firstWeekday = new Date(data[0].date).getDay(),\n\n                monthLength = data.length,\n                emptyTilesFirst = firstWeekday,\n                chartData = [];\n            for (let day = 1; day <= monthLength; day++) {\n                // Get date from the given data array\n                var date = new Date(data[day - 1].date);\n                var dateString = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${(date.getDate()).toString().padStart(2, '0')}`\n                // Offset by thenumber of empty tiles\n                const xCoordinate = (emptyTilesFirst + day - 1) % 7; // 0 is sunday\n                const yCoordinate = Math.floor((firstWeekday + day - 1) / 7);\n                const id = day;\n                var shift = data[day - 1].shift;\n                var Group = data[day - 1].GroupID;\n                var CurrentColorCode = null\n                var ShiftString = null\n                var detail_string = null\n                for (var index in ListOfPublicHolidayData) {\n                    if (ListOfPublicHolidayData[index].PublicHolidayDate.substring(0, 10) == dateString) {\n                        ShiftString = detail_string = ListOfPublicHolidayData[index].PublicHolidayName\n                        CurrentColorCode = '#FF0000'\n                        shift = null\n                        Group = null\n                        break\n                    }\n                }\n                if (shift != null) {\n                    var ShiftID\n                    for (var index in ListOfShiftData) {\n                        if (ListOfShiftData[index].ShiftIdList == shift) {\n                            ShiftID = index\n                            break\n                        }\n                    }\n                    CurrentColorCode = ListOfShiftData[ShiftID].Color\n                    ShiftString = ListOfShiftData[ShiftID].ShiftName\n                    if (ListOfShiftData[ShiftID].WorkingHourUntilList[xCoordinate] === undefined && ListOfShiftData[ShiftID].WorkingHourFromList[xCoordinate] == undefined) {\n                        ShiftString = 'Rest Day'\n                        CurrentColorCode = '#FFFFE0'\n                        detail_string = 'Happy Holidays'\n                    }\n                    else if (ListOfShiftData[ShiftID].WorkingHourFromList[xCoordinate] != null && ListOfShiftData[ShiftID].WorkingHourUntilList[xCoordinate] != null) {\n                        detail_string = ListOfShiftData[ShiftID].WorkingHourFromList[xCoordinate] + '-' + ListOfShiftData[ShiftID].WorkingHourUntilList[xCoordinate]\n                    }\n                }\n                var LeaveReasonTable = getLookup(\"LeaveReason.LeaveReason\")\n                for (var index in TakenLeave) {\n                    var StartingRange = new Date(TakenLeave[index].StartDate)\n                    var EndingRange = new Date(TakenLeave[index].EndDate)\n                    var currentValue = TakenLeave[index].LeaveReason\n                    var key\n                    for (var LookupIndex in LeaveReasonTable.items) {\n                        if (LeaveReasonTable.items[LookupIndex].Id == currentValue) {\n                            key = LeaveReasonTable.items[LookupIndex].LeaveReason.replace(/\\s/g, \"\")\n                            break\n                        }\n                    }\n                    if (date >= StartingRange && date <= EndingRange) {\n                        ShiftString = detail_string = key\n                        CurrentColorCode = '#00FF00'\n                        shift = null\n                    }\n                }\n                chartData.push({\n                    x: xCoordinate,\n                    y: 5 - yCoordinate,\n                    color: CurrentColorCode,\n                    shiftstring: ShiftString,\n                    value: shift,\n                    date: dateString,\n                    custom: {\n                        monthDay: id,\n                        details: detail_string\n                    }\n                });\n            }\n            return chartData;\n        }\n        function GetCurrentMonthHoliday(PublicHolidayData: any[], curr_year: number, curr_month: number): [string[], string[], number[]] {\n            var CurrentMonthPublicHolidayName: string[] = [];\n            var CurrentMonthPublicHolidayDate: string[] = [];\n            var CurrentMonthPublicHolidayID: number[] = [];\n\n            for (var index in PublicHolidayData) {\n                var date = new Date(PublicHolidayData[index].PublicHolidayDate.substring(0, 10));\n                var year = date.getFullYear();\n                var month = date.getMonth() + 1; // Months are 0-based, so add 1\n\n                if (year == curr_year && month == curr_month) {\n                    CurrentMonthPublicHolidayName.push(PublicHolidayData[index].PublicHolidayName);\n                    CurrentMonthPublicHolidayDate.push(PublicHolidayData[index].PublicHolidayDate.substring(0, 10));\n                    CurrentMonthPublicHolidayID.push(PublicHolidayData[index].PublicHolidayId)\n                }\n            }\n\n\n\n            return [CurrentMonthPublicHolidayName, CurrentMonthPublicHolidayDate, CurrentMonthPublicHolidayID];\n        }\n        function generateListOfDate(res, Year, Month) {\n            var numberOfDays = new Date(Year, Month, 0).getDate();\n            const ListOfData: Data[] = [];\n            for (let day = 1; day <= numberOfDays; day++) {\n                var dateString = `${Year}-${addLeadingZero(Month)}-${addLeadingZero(day)}`;\n                var GroupID = null\n                var date = new Date(Year, Month - 1, day)\n                for (var index in res) {\n                    var Start = new Date(res[index].ShiftStartDate)\n                    var End = new Date(res[index].ShiftEndDate)\n                    if (date >= Start && date <= End) {\n                        GroupID = res[index].EmployeeGroupID\n                        break\n                    }\n                }\n                ListOfData.push({\n                    date: dateString,\n                    shift: null,\n                    GroupID: GroupID\n                });\n\n            }\n\n            return ListOfData\n        }\n        function appendShift(ListOfData, entities) {\n            for (var x in entities) {\n                const startDate: Date = new Date(entities[x][\"ShiftStartDate\"].substring(0, 10));\n                const endDate: Date = new Date(entities[x][\"ShiftEndDate\"].substring(0, 10));\n                for (var data of ListOfData) {\n                    var currentDate: Date = new Date(data.date);\n\n                    if (currentDate >= startDate && currentDate <= endDate) {\n                        //if (data.GroupID == null)\n                        data.shift = entities[x][\"ShiftId\"]\n                    }\n                }\n            }\n            return ListOfData\n        }\n        function generateMonthRange(year: number, month: number): string[] {\n            const months: string[] = [];\n            const startDate = new Date(year, month - 1, 1); // Month is zero-based\n            // Generate 6 months backward\n            for (let i = 6; i > 0; i--) {\n                const prevMonth = new Date(startDate);\n                prevMonth.setMonth(prevMonth.getMonth() - i);\n                months.push(`${prevMonth.getFullYear()}-${(prevMonth.getMonth() + 1).toString().padStart(2, '0')}`);\n            }\n            months.push(`${startDate.getFullYear()}-${(startDate.getMonth() + 1).toString().padStart(2, '0')}`);\n            for (let i = 1; i <= 6; i++) {\n                const nextMonth = new Date(startDate);\n                nextMonth.setMonth(nextMonth.getMonth() + i);\n                months.push(`${nextMonth.getFullYear()}-${(nextMonth.getMonth() + 1).toString().padStart(2, '0')}`);\n            }\n            return months;\n        }\n        function sortDatesAscending(dateStrings: string[]): string[] {\n            const dates = dateStrings.map(dateString => new Date(dateString));\n            dates.sort((a, b) => a.getTime() - b.getTime());\n            return dates.map(date => date.toISOString().substring(0, 10));\n        }\n        function findClosestGreaterDate(givenDateStr: string, dateListStr: string[]): string | null {\n            const givenDate = new Date(givenDateStr);\n            const dateList = dateListStr.map(dateStr => new Date(dateStr));\n            let closestDate: Date | null = null;\n            let minDifference = Infinity;\n            for (const date of dateList) {\n                if (date > givenDate) {\n                    const difference = date.getTime() - givenDate.getTime();\n                    if (difference < minDifference) {\n                        minDifference = difference;\n                        closestDate = date;\n                    }\n                }\n            }\n            if (closestDate) {\n                // Subtract one day from the closest date\n                closestDate.setDate(closestDate.getDate() - 1);\n                return closestDate.toISOString().split('T')[0];\n            } else {\n                return null;\n            }\n        }\n        function plot(Data, CurrentMonthPublicHolidayDate, CurrentMonthPublicHolidayID) {\n            const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n            var DateStringList: string[] = [];\n            Highcharts.chart('Employee-Timetable', {\n                chart:\n                {\n                    type: 'heatmap'\n                },\n                title:\n                {\n                    text: '',\n                    align: 'left'\n                },\n                accessibility: {\n                    landmarkVerbosity: 'one'\n                },\n                tooltip: {\n                    enabled: true,\n                    zIndex: Number.MAX_SAFE_INTEGER,\n                    headerFormat: '',\n                    pointFormat: '{point.date:%A, %b %e, %Y} </br>' + '{point.custom.details:%s }',\n                    nullFormat: '{point.date:%A, %b %e, %Y} </br>' + '{point.custom.details:%s }'\n                },\n                xAxis: {\n                    categories: weekdays,\n                    opposite: true,\n                    lineWidth: 26,\n                    offset: 13,\n                    lineColor: 'rgba(27, 26, 37, 0.2)',\n                    labels: {\n                        rotation: 0,\n                        y: 20,\n                        style: {\n                            textTransform: 'uppercase',\n                            fontWeight: 'bold'\n                        }\n                    },\n                    accessibility: {\n                        description: 'weekdays',\n                        rangeDescription: 'X Axis is showing all 7 days of the week, starting with Sunday.'\n                    }\n                },\n                yAxis: {\n                    min: 0,\n                    max: 5,\n                    accessibility: {\n                        description: 'weeks'\n                    },\n                    visible: false\n                },\n                legend: {\n                    enable: false,\n                    layout: 'vertical',\n                    verticalAlign: 'middle'\n                },\n                series: [{\n                    showInLegend: false, // Hide series 1 icon in the legend\n                    keys: ['x', 'y', 'value', 'date', 'color', 'id'],\n                    data: Data,\n                    nullColor: 'rgba(196, 196, 196, 0.2)',\n                    borderWidth: 2,\n                    borderColor: 'rgba(196, 196, 196, 0.2)',\n                    dataLabels: [{\n                        enabled: true,\n                        format: '{#unless point.custom.empty}{point.shiftstring}{/unless}',\n                        style: {\n                            textOutline: 'none',\n                            fontWeight: 'normal',\n                            fontSize: '0.73rem'\n                        },\n                        y: 4\n                    }, {\n                        enabled: true,\n                        align: 'left',\n                        verticalAlign: 'top',\n                        format: '{#unless point.custom.details}{point.custom.details}{/unless}',\n                        backgroundColor: 'whitesmoke',\n                        padding: 2,\n                        style: {\n                            textOutline: 'none',\n                            color: 'rgba(70, 70, 92, 1)',\n                            fontSize: '0.8rem',\n                            fontWeight: 'bold',\n                            opacity: 0.5\n                        },\n                        x: 1,\n                        y: 1\n                    }]\n                }],\n\n                plotOptions: {\n                    series: {\n                        point: {\n                            events: {\n                                click: function () {\n                                    var FormID = -1\n                                    var no_records = false\n                                    var isPublicHoliday = 0\n                                    var isLeave = 0\n\n                                    for (var buffer in Data) {\n                                        if (Data[buffer].x == this.x && Data[buffer].y == this.y) {\n                                            var date = new Date(Data[buffer].date)\n                                            var thisday = date.getDate();\n                                            var thismonth = date.getMonth() + 1; // Month is zero-based\n                                            var thisyear = date.getFullYear();\n                                            var IsGroup = false\n                                            // Format the date as \"YYYY-MM-DD\"\n                                            const formattedDate = `${thisyear}-${thismonth.toString().padStart(2, '0')}-${thisday.toString().padStart(2, '0')}`;\n                                            var DatetimeDate = new Date(date.getFullYear(), date.getMonth(), date.getDate())\n                                            /*\n                                            check leave\n                                            */\n                                            for (var index in ListOfLeaveTakenData) {\n\n                                                var StartDate = new Date(ListOfLeaveTakenData[index].StartDate)\n                                                var EndDate = new Date(ListOfLeaveTakenData[index].EndDate)\n\n                                                if (date >= StartDate && date <= EndDate) {\n                                                    var dlg = new LeaveApplicationDialog();//open the shift \n                                                    dlg.loadByIdAndOpenDialog(ListOfLeaveTakenData[index].ID)\n                                                    dlg.set_readOnly(true)\n                                                    isLeave = 1\n                                                    break\n                                                }\n                                            }\n                                            if (isLeave == 1)\n                                                break\n\n                                            /*\n                                            check public holiday\n                                             */\n                                            for (var i in CurrentMonthPublicHolidayDate) {\n\n                                                if (CurrentMonthPublicHolidayDate[i] == formattedDate) {\n                                                    var HolidayFormID = CurrentMonthPublicHolidayID[i]\n                                                    isPublicHoliday = 1\n                                                    var PublicHolidayDlg = new PublicHolidayDialog();\n                                                    PublicHolidayDlg.loadByIdAndOpenDialog(HolidayFormID)\n                                                    PublicHolidayDlg.set_readOnly(true)\n                                                    break\n                                                }\n                                            }\n                                            if (isPublicHoliday)\n                                                break\n\n\n                                            /*\n                                            check employee shift\n                                            */\n                                            var IsShift = false\n                                            for (var each_res in CopiedResEntity) {\n                                                //if (CopiedResEntity[each_res][\"EmployeeGroupID\"] !== undefined)\n                                                //    continue\n                                                var startDate = new Date(CopiedResEntity[each_res][\"ShiftStartDate\"])\n                                                var endDate = new Date(CopiedResEntity[each_res][\"ShiftEndDate\"])\n\n                                                if (DatetimeDate >= startDate && DatetimeDate <= endDate) {\n                                                    FormID = CopiedResEntity[each_res][\"Id\"]\n                                                    IsShift = true\n\n                                                    var SetEmployeeShiftDlg = new SetEmployeeShiftDialog(EmployeeRowID, CopiedResEntity[each_res][\"ShiftStartDate\"], 1, CopiedResEntity[each_res][\"ShiftEndDate\"]);\n                                                    SetEmployeeShiftDlg.loadByIdAndOpenDialog(FormID);\n                                                    SetEmployeeShiftDlg.element.on(\"dialogclose\", function () {\n                                                        serviceCall<ListResponse<any>>({\n                                                            service: ViewShiftHistoryService.baseUrl + '/RetriveShiftHistory',\n                                                            method: \"GET\",\n                                                            data: {\n                                                                'EmployeeID': EmployeeRowID\n                                                            },\n                                                            async: false,\n                                                            onSuccess: (res) => {\n                                                                CopiedResEntity = res.Entities;\n                                                                for (var x in CopiedResEntity) {\n                                                                    if (parseInt(CopiedResEntity[x][\"Id\"]) == 0) {\n                                                                        no_records = true\n                                                                        break\n                                                                    }\n                                                                }\n                                                                ListOfData = generateListOfDate(CopiedResEntity, thisyear, thismonth);\n\n                                                                if (no_records == false)\n                                                                    ListOfData = appendShift(ListOfData, CopiedResEntity);\n\n                                                                var [CurrentMonthPublicHolidayName, CurrentMonthPublicHolidayDate, CurrentMonthPublicHolidayID] = GetCurrentMonthHoliday(ListOfPublicHolidayData, currentYear, currentMonth)\n                                                                var ListOfCurrentMonthPublicHoliday: PublicHolidayData[] = [];\n                                                                for (var index in CurrentMonthPublicHolidayDate) {\n                                                                    ListOfCurrentMonthPublicHoliday.push({\n                                                                        PublicHolidayDate: CurrentMonthPublicHolidayDate[index],\n                                                                        PublicHolidayId: CurrentMonthPublicHolidayID[index],\n                                                                        PublicHolidayName: CurrentMonthPublicHolidayName[index],\n                                                                    })\n                                                                }\n                                                                var chartData = generateChartData(ListOfData, ListOfShiftData, ListOfCurrentMonthPublicHoliday, ListOfLeaveTakenData);\n                                                                plot(chartData, CurrentMonthPublicHolidayDate, CurrentMonthPublicHolidayID);\n\n                                                            }\n                                                        })\n                                                    })\n                                                    break\n                                                }\n\n\n\n                                                if (no_records == false) {\n                                                    var startDate = new Date(CopiedResEntity[each_res].ShiftStartDate.substring(0, 10));\n                                                    var endDate = new Date(CopiedResEntity[each_res].ShiftEndDate.substring(0, 10));\n                                                    var startDateString = CopiedResEntity[each_res].ShiftStartDate.substring(0, 10)\n                                                    DateStringList.push(startDateString)\n                                                }\n\n\n\n                                            }\n\n                                            if (IsShift == true)\n                                                break\n\n\n\n\n                                            if ((FormID == -1 && isPublicHoliday == 0) || no_records == true)//if no shift on the pressed day and that day is the public holiday\n                                            {\n\n                                                DateStringList = sortDatesAscending(DateStringList);\n                                                var closestDate = findClosestGreaterDate(formattedDate, DateStringList)\n                                                var dlg3 = new SetEmployeeShiftDialog(EmployeeRowID, formattedDate, 0, closestDate);\n                                                dlg3.dialogOpen();\n                                                console.log('hereee')\n                                                dlg3.element.on(\"dialogclose\", function () {\n                                                    serviceCall<ListResponse<any>>({\n                                                        service: ViewShiftHistoryService.baseUrl + '/RetriveShiftHistory',\n                                                        method: \"GET\",\n                                                        data: {\n                                                            'EmployeeID': EmployeeRowID\n                                                        },\n                                                        async: false,\n                                                        onSuccess: (res) => {\n                                                            CopiedResEntity = res.Entities\n                                                            no_records = false\n                                                            for (var x in CopiedResEntity) {\n                                                                if (parseInt(CopiedResEntity[x][\"Id\"]) == 0) {\n                                                                    no_records = true\n                                                                    break\n                                                                }\n                                                            }\n                                                            ListOfData = generateListOfDate(CopiedResEntity, thisyear, thismonth);\n\n                                                            if (no_records == false) {\n                                                                ListOfData = appendShift(ListOfData, CopiedResEntity);\n                                                            }\n\n                                                            var [CurrentMonthPublicHolidayName, CurrentMonthPublicHolidayDate, CurrentMonthPublicHolidayID] = GetCurrentMonthHoliday(ListOfPublicHolidayData, currentYear, currentMonth)\n                                                            var ListOfCurrentMonthPublicHoliday: PublicHolidayData[] = [];\n                                                            for (var index in CurrentMonthPublicHolidayDate) {\n                                                                ListOfCurrentMonthPublicHoliday.push({\n                                                                    PublicHolidayDate: CurrentMonthPublicHolidayDate[index],\n                                                                    PublicHolidayId: CurrentMonthPublicHolidayID[index],\n                                                                    PublicHolidayName: CurrentMonthPublicHolidayName[index],\n                                                                })\n                                                            }\n                                                            var chartData = generateChartData(ListOfData, ListOfShiftData, ListOfCurrentMonthPublicHoliday, ListOfLeaveTakenData);\n                                                            console.log(chartData)\n                                                            plot(chartData, CurrentMonthPublicHolidayDate, CurrentMonthPublicHolidayID);\n                                                        }\n                                                    });\n                                                })\n                                            }\n\n\n                                            break\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            })\n        }\n\n\n        var EmployeeRowID = this.EmployeeRowID\n        //Heatmap(Highcharts)\n\n        var CopiedResEntity;\n\n\n        interface ShiftData {\n            ShiftName: string;\n            WorkingHourFromList: string[];\n            WorkingHourUntilList: string[];\n            WorkingTimeList: string[];\n            Color: string;\n            ShiftIdList: number;\n        }\n\n        var ListOfShiftData: ShiftData[] = [];\n        var done_retrieve_shift = false\n\n        serviceCall<ListResponse<any>>({\n            service: ShiftService.baseUrl + '/ListShift',\n            method: \"GET\",\n            data: {\n            },\n            async: false,\n            onSuccess: (response) => {\n                done_retrieve_shift = true\n                let ListOfDays: string[] = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n                for (var index in response.Entities) {\n\n                    var ListOfWorkingFrom: string[] = []\n                    var ListOfWorkingUntil: string[] = []\n                    var ListOfWorkingTime: string[] = []\n\n                    for (var days in ListOfDays) {\n                        ListOfWorkingFrom.push(response.Entities[index][ListOfDays[days] + 'StartingFrom'])\n                        ListOfWorkingUntil.push(response.Entities[index][ListOfDays[days] + 'EndingAt'])\n                        ListOfWorkingTime.push(response.Entities[index][ListOfDays[days] + 'WorkingTime'])\n                    }\n\n                    ListOfShiftData.push(\n                        {\n                            ShiftName: response.Entities[index].ShiftName,\n                            WorkingHourFromList: ListOfWorkingFrom,\n                            WorkingHourUntilList: ListOfWorkingUntil,\n                            WorkingTimeList: ListOfWorkingTime,\n                            Color: response.Entities[index].ShiftColor,\n                            ShiftIdList: response.Entities[index].Id\n                        }\n                    )\n\n                }\n            },\n            onError: (error) => {\n\n            }\n        });\n\n\n\n        while (done_retrieve_shift == false) {\n        };\n\n\n\n\n\n        interface PublicHolidayData {\n            PublicHolidayDate: string;\n            PublicHolidayName: string;\n            PublicHolidayId: number;\n        }\n\n        var ListOfPublicHolidayData: PublicHolidayData[] = [];\n\n\n\n        var done_retrieve_public_holiday = false\n        serviceCall<ListResponse<any>>({\n            service: PublicHolidayService.baseUrl + '/ListPublicHoliday',\n            method: \"GET\",\n            data: {\n            },\n            async: false,\n            onSuccess: (response) => {\n                done_retrieve_public_holiday = true\n                for (var index in response.Entities) {\n                    ListOfPublicHolidayData.push({\n                        PublicHolidayDate: response.Entities[index].Date,\n                        PublicHolidayName: response.Entities[index].Name,\n                        PublicHolidayId: response.Entities[index].Id\n                    })\n                }\n                console.log(ListOfPublicHolidayData)\n            },\n            onError: (error) => {\n            }\n        });\n        while (done_retrieve_public_holiday == false) { };\n\n\n\n        /*\n        interface GroupData {\n            GroupName: string;\n            GroupColor: string;\n            GroupID: number;\n        }\n        var ListOfGroupData: GroupData[] = [];\n        var done_retrieve_group_data = false\n        serviceCall<ListResponse<any>>({\n            service: EmployeeGroupService.baseUrl + '/ListGroup',\n            method: \"GET\",\n            data: {\n            },\n            async: false,\n            onSuccess: (response) => {\n                done_retrieve_group_data = true\n                for (var index in response.Entities) {\n                    \n                        ListOfGroupData.push({\n                            GroupName: response.Entities[index].Name,\n                            GroupColor: response.Entities[index].ShiftColor,\n                            GroupID: response.Entities[index].Id\n                        })\n\n                    \n                }\n            },\n            onError: (error) => {\n            }\n        });\n\n\n        while (done_retrieve_group_data == false) {\n\n        };\n        */\n\n        interface LeaveTakenData {\n            ID: number;\n            StartDate: string;\n            EndDate: string;\n            HalfDate: number;\n            LeaveReason: number;\n        }\n        var ListOfLeaveTakenData: LeaveTakenData[] = [];\n        var done_retrieve_holiday = false\n\n        serviceCall<ListResponse<any>>({\n            service: LeaveApplicationService.baseUrl + '/ListTakenLeave',\n            method: \"GET\",\n            data: {\n                'EmployeeRowID': EmployeeRowID\n            },\n            async: false,\n            onSuccess: (response) => {\n                done_retrieve_holiday = true\n                for (var index in response.Entities) {\n                    var half = 0\n                    if (response.Entities[index].LeaveReasonId == 4 && response.Entities[index].HalfDay == 1)// if is annual leave and taken only half day\n                        half = 1\n                    ListOfLeaveTakenData.push({\n                        ID: response.Entities[index].Id,\n                        StartDate: response.Entities[index].StartDate.substring(0, 10),\n                        EndDate: response.Entities[index].EndDate.substring(0, 10),\n                        HalfDate: half,\n                        LeaveReason: response.Entities[index].LeaveReasonId,\n                    })\n                }\n            },\n            onError: (error) => {\n            }\n        });\n\n\n        while (done_retrieve_holiday == false) {\n\n        };\n        var ListOfData: Data[];\n        var year;\n        var month;\n        interface Data {\n            date: string;\n            shift: number;\n            GroupID: number;\n        }\n        var currentDate = new Date();\n        var currentMonth = currentDate.getMonth() + 1; // January is 0, so we add 1 to get the correct month\n        var currentYear = currentDate.getFullYear();\n        var dateString = `${currentDate.getFullYear()}-${(currentDate.getMonth() + 1).toString().padStart(2, '0')}`\n        // Helper function to add leading zeros\n        var done = false\n        var no_records = false\n        serviceCall<ListResponse<any>>({\n            service: ViewShiftHistoryService.baseUrl + '/RetriveShiftHistory',\n            method: \"GET\",\n            data: {\n                'EmployeeID': EmployeeRowID\n            },\n            async: false,\n            onSuccess: (res) => {\n\n                CopiedResEntity = res.Entities\n                ListOfData = generateListOfDate(CopiedResEntity, currentYear, currentMonth);\n                for (var x in res.Entities) {\n                    if (parseInt(res.Entities[x][\"Id\"]) == 0) {\n                        no_records = true\n                        break\n                    }\n                }\n                done = true\n            },\n            onError: (error) => {\n            }\n        });\n\n        while (done == false) {\n        }//wait until the stored procedure extracted all dataas\n\n        var SetOfMonthYear = generateMonthRange(currentYear, currentMonth);\n        let MonthEditor = new Select2Editor($(\"#Month\"))\n\n        for (var i = 0; i < SetOfMonthYear.length; i++) {\n            MonthEditor.addItem({ id: (i).toString(), text: (SetOfMonthYear[i]).toString(), });\n            if (SetOfMonthYear[i].toString() == dateString)\n                MonthEditor.set_value((i).toString())\n        }\n        $(\"#Month\").on('change', async function () {\n            var index = $(this).val()\n            var wanted = SetOfMonthYear[index]\n            year = parseInt(wanted.split('-')[0]);\n            month = parseInt(wanted.split('-')[1]);\n            currentMonth = month\n            currentYear = year\n\n            var ListOfData: Data[] = generateListOfDate(CopiedResEntity, year, month);\n\n            if (no_records == false)\n                ListOfData = appendShift(ListOfData, CopiedResEntity);\n\n            var [CurrentMonthPublicHolidayName, CurrentMonthPublicHolidayDate, CurrentMonthPublicHolidayID] = GetCurrentMonthHoliday(ListOfPublicHolidayData, currentYear, currentMonth)\n            var ListOfCurrentMonthPublicHoliday: PublicHolidayData[] = [];\n\n            for (var buffer in CurrentMonthPublicHolidayDate) {\n                ListOfCurrentMonthPublicHoliday.push({\n                    PublicHolidayDate: CurrentMonthPublicHolidayDate[buffer],\n                    PublicHolidayId: CurrentMonthPublicHolidayID[buffer],\n                    PublicHolidayName: CurrentMonthPublicHolidayName[buffer],\n                })\n            }\n\n            var chartData = generateChartData(ListOfData, ListOfShiftData, ListOfCurrentMonthPublicHoliday, ListOfLeaveTakenData);\n            plot(chartData, CurrentMonthPublicHolidayDate, CurrentMonthPublicHolidayID)\n\n\n        });\n        if (no_records == false)\n            ListOfData = appendShift(ListOfData, CopiedResEntity)\n\n        var [CurrentMonthPublicHolidayName, CurrentMonthPublicHolidayDate, CurrentMonthPublicHolidayID] = GetCurrentMonthHoliday(ListOfPublicHolidayData, currentYear, currentMonth)\n        var ListOfCurrentMonthPublicHoliday: PublicHolidayData[] = [];\n        for (var index in CurrentMonthPublicHolidayDate) {\n            ListOfCurrentMonthPublicHoliday.push({\n                PublicHolidayDate: CurrentMonthPublicHolidayDate[index],\n                PublicHolidayId: CurrentMonthPublicHolidayID[index],\n                PublicHolidayName: CurrentMonthPublicHolidayName[index],\n            })\n        }\n        var chartData = generateChartData(ListOfData, ListOfShiftData, ListOfCurrentMonthPublicHoliday, ListOfLeaveTakenData);\n\n        plot(chartData, CurrentMonthPublicHolidayDate, CurrentMonthPublicHolidayID)\n\n\n\n\n\n\n    }\n\n\n\n\n\n    protected getDialogOptions() {\n        let opt = super.getDialogOptions()\n        opt.height = 800\n        opt.width = 1200\n        return opt\n    }\n\n\n\n\n\n\n}"],
  "mappings": "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",
  "names": ["import_corelib", "import_q", "Highcharts", "import_heatmap", "import_corelib", "import_q", "Heatmap", "Highcharts", "ViewShiftHistoryDialog", "EmployeeID", "EmployeeRowID", "ViewShiftHistoryForm", "EmployeeProfileService", "response", "tabId", "node3", "divNode", "rowNode", "MonthNode", "TimetableNode", "ViewShiftHistoryRow", "ViewShiftHistoryService", "asPanel", "addLeadingZero", "num", "__name", "generateChartData", "data", "ListOfShiftData", "ListOfPublicHolidayData", "TakenLeave", "firstWeekday", "monthLength", "emptyTilesFirst", "chartData", "day", "date", "dateString", "xCoordinate", "yCoordinate", "id", "shift", "Group", "CurrentColorCode", "ShiftString", "detail_string", "index", "ShiftID", "LeaveReasonTable", "StartingRange", "EndingRange", "currentValue", "key", "LookupIndex", "GetCurrentMonthHoliday", "PublicHolidayData", "curr_year", "curr_month", "CurrentMonthPublicHolidayName", "CurrentMonthPublicHolidayDate", "CurrentMonthPublicHolidayID", "year", "month", "generateListOfDate", "res", "Year", "Month", "numberOfDays", "ListOfData", "GroupID", "Start", "End", "appendShift", "entities", "x", "startDate", "endDate", "currentDate", "generateMonthRange", "months", "i", "prevMonth", "nextMonth", "sortDatesAscending", "dateStrings", "dates", "a", "b", "findClosestGreaterDate", "givenDateStr", "dateListStr", "givenDate", "dateList", "dateStr", "closestDate", "minDifference", "difference", "plot", "Data", "weekdays", "DateStringList", "FormID", "no_records", "isPublicHoliday", "isLeave", "buffer", "thisday", "thismonth", "thisyear", "IsGroup", "formattedDate", "DatetimeDate", "ListOfLeaveTakenData", "StartDate", "EndDate", "dlg", "LeaveApplicationDialog", "HolidayFormID", "PublicHolidayDlg", "PublicHolidayDialog", "IsShift", "each_res", "CopiedResEntity", "SetEmployeeShiftDlg", "SetEmployeeShiftDialog", "currentYear", "currentMonth", "ListOfCurrentMonthPublicHoliday", "startDateString", "dlg3", "done_retrieve_shift", "ShiftService", "ListOfDays", "ListOfWorkingFrom", "ListOfWorkingUntil", "ListOfWorkingTime", "days", "error", "done_retrieve_public_holiday", "PublicHolidayService", "done_retrieve_holiday", "LeaveApplicationService", "half", "done", "SetOfMonthYear", "MonthEditor", "__async", "wanted", "opt", "__decorateClass"]
}
