{
  "version": 3,
  "sources": ["../../../Modules/HumanResource/EmployeeGroup/EmployeeGroup/EmployeeGroupDialog.ts"],
  "sourcesContent": ["import { Decorators, EntityDialog, Select2Editor, EditorUtils } from '@serenity-is/corelib';\nimport { disableSelection } from '@serenity-is/sleekgrid';\nimport { EmployeeGroupForm, EmployeeGroupingsRow, EmployeeGroupingsService, EmployeeGroupRow, EmployeeGroupService, EmployeeGroupShiftPatternRow, EmployeeGroupShiftPatternService, EmployeeGroupShiftRow, EmployeeGroupShiftService } from '../../../ServerTypes/EmployeeGroup';\nimport { EmployeeProfileRow, EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { getLookup, getLookupAsync } from '@serenity-is/corelib/q';\nimport 'toolcool-color-picker';\nimport { serviceCall, RetrieveResponse, alertDialog } from '@serenity-is/corelib/q';\nimport ColorPicker from '@thednp/color-picker';\nimport { ViewShiftHistoryService } from '../../../ServerTypes/ViewShiftHistory';\nimport { ShiftService } from '../../../ServerTypes/Shift';\nimport { SetEmployeeShiftService } from '../../../ServerTypes/SetEmployeeShift';\nimport { isEmptyOrNull } from '@serenity-is/corelib/q';\nimport { ShiftHistoryRow, ShiftHistoryService } from '../../../ServerTypes/ShiftHistory';\r\nimport { Criteria, ToolButton } from '@serenity-is/corelib';\n\n@Decorators.registerClass('HRMSoftware.EmployeeGroup.EmployeeGroupDialog')\nexport class EmployeeGroupDialog extends EntityDialog<EmployeeGroupRow, any> {\n    protected getFormKey() { return EmployeeGroupForm.formKey; }\n    protected getRowDefinition() { return EmployeeGroupRow; }\n    protected getService() { return EmployeeGroupService.baseUrl; }\n    public ColorCode: string;\n    protected form = new EmployeeGroupForm(this.idPrefix);\n    public EmployeeProfileTable: any;\n    public EmployeeData: EmployeeProfileRow[];\n    public GroupingData: EmployeeGroupingsRow[];\n\n    constructor() {\n        super();\n         this.EmployeeProfileTable = getLookup(\"EmployeeProfile.EmployeeProfile\")\n        var criteria: any;\n\n        EmployeeProfileService.List({\n            Criteria: Criteria.and(criteria, [[EmployeeProfileRow.Fields.Retired], '=', '0'],\n                [[EmployeeProfileRow.Fields.Terminated], '=', '0'],\n                [[EmployeeProfileRow.Fields.Resigned], '=', '0']\n            )\n        }, response => {\n            console.log(response.Entities)\n            this.EmployeeData = response.Entities\n        })\n        EmployeeGroupingsService.List({\n        }, response => {\n            console.log(response.Entities)\n            this.GroupingData = response.Entities\n        })\n\n\n    }\n\n\n\n    protected getDialogOptions() {\n        let opt = super.getDialogOptions()\n        opt.height = 800\n        opt.width = 1000\n        return opt\n    }\n    public SearchCallback(): void {\n        var self = this\n        var OccupationListElement = document.getElementById(this.idPrefix + 'OccupationList');\n        var DepartmentListElement = document.getElementById(this.idPrefix + 'DepartmentList');\n        var DivisionListElement = document.getElementById(this.idPrefix + 'DivisionList');\n        var JobGradeListElement = document.getElementById(this.idPrefix + 'JobGradeList');\n        var SectionListElement = document.getElementById(this.idPrefix + 'SectionList');\n       \n        function parseListFromElement(element) {\n            const valueStr = $(element).val();\n            return valueStr.length\n                ? valueStr.split(',').map(number => parseInt(number, 10))\n                : [];\n        }\n        // Use the utility function for each list\n        const JobGradeList = parseListFromElement(JobGradeListElement);\n        const DivisionList = parseListFromElement(DivisionListElement);\n        const DepartmentList = parseListFromElement(DepartmentListElement);\n        const OccupationList = parseListFromElement(OccupationListElement);\n        const SectionList = parseListFromElement(SectionListElement);\n        // Convert the lists to Sets for faster lookup\n        const jobGradeSet = new Set(JobGradeList);\n        const divisionSet = new Set(DivisionList);\n        const departmentSet = new Set(DepartmentList);\n        const occupationSet = new Set(OccupationList);\n        const sectionSet = new Set(SectionList);\n        var employeeRowList = self.form.EmployeeList.value ? self.form.EmployeeList.value.split(',').map(Number) : [];\n        for (let employee of self.EmployeeData) {\n            const { JobGradeID, DivisionID, DepartmentID, OccupationID, SectionID, Id } = employee;\n            const found =\n                jobGradeSet.has(JobGradeID) ||\n                divisionSet.has(DivisionID) ||\n                departmentSet.has(DepartmentID) ||\n                occupationSet.has(OccupationID) ||\n                sectionSet.has(SectionID);\n\n            console.log(employeeRowList)\n            if (!found) \n                employeeRowList = employeeRowList.filter(num => num !== Id);\n             else {\n                if (!employeeRowList.includes(Id)) \n                    employeeRowList.push(Id);\n            }\n            // Update the buffer value\n        }\n        let finalOutput: number[] = [];\n        for (let i = 0; i < employeeRowList.length; i++) {\n            var employeeGroup = self.GroupingData.find(item => item.EmployeeRowId === employeeRowList[i]);\n        \n            if (isEmptyOrNull(employeeGroup))\n                finalOutput.push(employeeRowList[i])\n            // employeeRowList = employeeRowList.filter(num => num !== Id);\n        }\n\n        self.form.EmployeeList.value = finalOutput.join(',');\n\n\n        //const result = data.find(item => item.Id === 12);\n\n    }\n\n  \n    protected save_submitHandler(response): void\n    {\n        var originalRes = response\n        var self = this\n        function parseDate(dateStr: string): Date {\n            return new Date(dateStr);\n        }\n        function areShiftsOverlapping(\n            start1: Date, end1: Date,\n            start2: Date, end2: Date\n        ): boolean {\n            // Check if one shift starts before the other shift ends and ends after the other shift starts\n            return start1 < end2 && end1 >= start2;\n        }\n        function areAnyShiftsOverlapping(shifts): boolean {\n            var result = false\n            for (let i = 0; i < shifts.length; i++) {\n\n                var start1 = parseDate(shifts[i].ShiftStartDate);\n                var end1 = parseDate(shifts[i].ShiftEndDate);\n                for (let j = 0; j < shifts.length; j++) {\n                    if (i == j)\n                        continue\n                    var start2 = parseDate(shifts[j].ShiftStartDate);\n                    var end2 = parseDate(shifts[j].ShiftEndDate);\n                    if (areShiftsOverlapping(start1, end1, start2, end2)) {\n                        var concatenatedString = 'There is a clash between '\n                            + shifts[i].Shift + ' and ' + shifts[j].Shift;\n                        alertDialog(concatenatedString)\n                        result = true\n                        break;\n                    }\n                }\n                if (result == true)\n                    break\n            }\n            return result; // No overlaps\n        }\n\n        for (let i = 0; i < self.form.Shifts.value.length; i++) {\n            for (let j = 0; j < self.form.Shifts.value.length; j++) {\n                if (self.form.Shifts.value[i] != self.form.Shifts.value[j]) {\n                    if (areShiftsOverlapping(parseDate(self.form.Shifts.value[i].ShiftStartDate), parseDate(self.form.Shifts.value[i].ShiftEndDate),\n                        parseDate(self.form.Shifts.value[j].ShiftStartDate), parseDate(self.form.Shifts.value[j].ShiftEndDate))) {\n                        var concatenatedString = `There is a clash of date at ${self.form.Shifts.value[i].ShiftStartDate}-${self.form.Shifts.value[i].ShiftEndDate} and ${self.form.Shifts.value[j].ShiftStartDate}-${self.form.Shifts.value[j].ShiftEndDate} `\n                        alertDialog(concatenatedString)\n                    }\n\n                }\n                            }\n        }\n        var Results: any[] = []\n        var IdToBypass: number[] = []\n\n        if (areAnyShiftsOverlapping(this.form.Shifts.value))//check for overlapping shift dates\n            return\n        for (let i = 0; i < this.form.ActualShifts.value.length; i++)\n            IdToBypass.push(this.form.ActualShifts.value[i].Id)\n\n        for (let i = 0; i < this.form.EmployeeList.values.length; i++) {\n            for (let j = 0; j < this.form.Shifts.value.length; j++) {\n                var Obj = new ConcreteEmployeeShiftPatternRow()\n                Obj.EmployeeRowId = parseInt(this.form.EmployeeList.values[i])\n                Obj.ShiftStartDate = this.form.Shifts.value[j].ShiftStartDate\n                Obj.ShiftEndDate = this.form.Shifts.value[j].ShiftEndDate\n                Obj.ShiftId = this.form.Shifts.value[j].ShiftId\n                Results.push(Obj)\n            }\n        }\n        this.form.ActualShifts.value = Results\n        this.form.ActualShifts.refresh()\n\n        //super.save_submitHandler(response)\n\n        ViewShiftHistoryService.List({\n            Criteria: Criteria(EmployeeGroupShiftRow.Fields.EmployeeRowId).in(this.form.EmployeeList.values),\n        }, response => {\n            console.log(response.Entities)\n            for (var res in response.Entities) {\n                if (IdToBypass.indexOf(response.Entities[res].Id) != -1)\n                    continue\n                var Start1 = parseDate(response.Entities[res].ShiftStartDate)\n                var End1 = parseDate(response.Entities[res].ShiftEndDate)\n                for (let i = 0; i < self.form.Shifts.value.length; i++) {\n                    var Start2 = parseDate(self.form.Shifts.value[i].ShiftStartDate)\n                    var End2 = parseDate(self.form.Shifts.value[i].ShiftEndDate)\n                    if (areShiftsOverlapping(Start1, End1, Start2, End2) == true) {\n                        var EmployeeID\n                        for (var index in self.EmployeeProfileTable.items) {\n                            if (self.EmployeeProfileTable.items[index].Id == response.Entities[res].EmployeeRowID) {\n                                EmployeeID = self.EmployeeProfileTable.items[index].EmployeeID\n                                break\n                            }\n                        }\n\n\n                        var concatenatedString = 'Employee ' + EmployeeID + ' Already has a Shift from ' + response.Entities[res].ShiftStartDate.substring(0,10) +\n                            ' until ' + response.Entities[res].ShiftEndDate.substring(0, 10)\n\n                        alertDialog(concatenatedString)\n                        return\n\n                    }\n                }\n\n            }\n            super.save_submitHandler(originalRes)\n\n        })\n        /*\n        if (this.isNew()) {\n            EmployeeGroupShiftPatternService.List({\n                Criteria: Criteria(EmployeeGroupShiftRow.Fields.EmployeeRowId).in(this.form.EmployeeList.values),\n            }, response => {\n                var save = true\n                console.log(response)\n                for (res in response.Entities) {\n                    if (!isEmptyOrNull(response.Entities[res].EmployeeRowId)) {\n                        if (this.form.EmployeeList.values.includes(response.Entities[res].EmployeeRowId.toString())) {\n                            var Start1 = parseDate(response.Entities[res].ShiftStartDate)\n                            var End1 = parseDate(response.Entities[res].ShiftEndDate)\n                            for (let i = 0; i < self.form.Shifts.value.length; i++) {\n                                var Start2 = parseDate(self.form.Shifts.value[i].ShiftStartDate)\n                                var End2 = parseDate(self.form.Shifts.value[i].ShiftEndDate)\n                                if (areShiftsOverlapping(Start1, End1, Start2, End2) == true) {\n                                    var EmployeeID\n                                    for (var index in self.EmployeeProfileTable.items) {\n                                        if (self.EmployeeProfileTable.items[index].Id == response.Entities[res].EmployeeRowId) {\n                                            EmployeeID = self.EmployeeProfileTable.items[index].EmployeeID\n                                            break\n                                        }\n                                    }\n\n\n                                        var concatenatedString = 'Employee ' + EmployeeID + ' Already has a Shift from ' + response.Entities[res].ShiftStartDate +\n                                            ' until ' + response.Entities[res].ShiftEndDate\n                                        save = false\n                                        alertDialog(concatenatedString)\n\n                                    if (save = false)\n                                        return\n\n                                }\n                            }\n\n                        }\n\n                    }\n\n                }\n                if (save == true)\n                    super.save_submitHandler(res)\n            })\n\n        }\n        else {\n            EmployeeGroupShiftPatternService.List({\n                Criteria: Criteria(EmployeeGroupShiftRow.Fields.EmployeeRowId).in(this.form.EmployeeList.values),\n            }, response => {\n                var save = true\n                for (res in response.Entities) {\n                    if (response.Entities[res].EmployeeGroupId = self.entityId) \n                        continue\n                    else if (!isEmptyOrNull(response.Entities[res].EmployeeRowId)) {\n                        if (this.form.EmployeeList.values.indexOf(response.Entities[res].EmployeeRowId.toString()) != -1) {\n                            var Start1 = parseDate(response.Entities[res].ShiftStartDate)\n                            var End1 = parseDate(response.Entities[res].ShiftEndDate)\n                            for (let i = 0; i < self.form.Shifts.value.length; i++) {\n                                var Start2 = parseDate(self.form.Shifts.value[i].ShiftStartDate)\n                                var End2 = parseDate(self.form.Shifts.value[i].ShiftEndDate)\n                           \n                                if (areShiftsOverlapping(Start1, End1, Start2, End2)) {\n                                    var EmployeeID\n                                    for (var index in self.EmployeeProfileTable.items) {\n                                        if (self.EmployeeProfileTable.items[index].Id == response.Entities[res].EmployeeRowId) {\n                                            EmployeeID = self.EmployeeProfileTable.items[index].EmployeeID\n                                            break\n                                        }\n                                    }\n                                        var concatenatedString = 'Employee ' + EmployeeID + ' Already has a Shift from ' + response.Entities[res].ShiftStartDate +\n                                            ' until ' + response.Entities[res].ShiftEndDate\n                                        save = false\n                                        alertDialog(concatenatedString)\n                                    if (save = false)\n                                        return\n                                }\n                            }\n                        }\n                    }\n                }\n                if (save == true) {\n                    for (res in response.Entities) {\n                        if (response.Entities[res].EmployeeGroupId == self.entityId) {\n                            EmployeeGroupService.Delete({\n                                EntityId: response.Entities[res].Id\n                            });\n                        }\n                    }\n                    EmployeeGroupShiftService.List({\n                        Criteria: [[EmployeeGroupShiftRow.Fields.EmployeeGroupID], '=', self.entityId]\n                    }, response => {\n                        for (var res in response.Entities) {\n                            if (response.Entities[res].EmployeeGroupId == self.entityId) {\n                                EmployeeGroupShiftService.Delete({\n                                    EntityId: response.Entities[res].Id\n                                });\n                            }\n                        }\n\n                        for (let i = 0; i < self.form.Shifts.value.length; i++) {\n                            EmployeeGroupShiftService.Create({\n                                Entity:\n                                {\n                                    \"EmployeeGroupId\": self.entityId,\n                                    \"ShiftStartDate\": self.form.Shifts.value[i].ShiftStartDate,\n                                    \"ShiftEndDate\": self.form.Shifts.value[i].ShiftEndDate,\n                                    \"ShiftId\": self.form.Shifts.value[i].ShiftId,\n                                },\n                            });\n                            for (let j = 0; j < self.form.EmployeeList.values.length; j++) {\n                                EmployeeGroupShiftPatternService.Create({\n                                    Entity:\n                                    {\n                                        \"EmployeeRowId\": parseInt(self.form.EmployeeList.values[j]),\n                                        \"EmployeeGroupId\": self.entityId,\n                                        \"ShiftStartDate\": self.form.Shifts.value[i].ShiftStartDate,\n                                        \"ShiftEndDate\": self.form.Shifts.value[i].ShiftEndDate,\n                                        \"ShiftId\": self.form.Shifts.value[i].ShiftId,\n                                    },\n                                });\n\n                            }\n\n                        }\n\n\n                        self.dialogClose()\n\n                    })\n                    \n\n                }\n            })\n\n\n\n\n\n        }\n        */\n        \n        \n    }\n\n\n    protected onDialogOpen()\n    {\n        super.onDialogOpen()\n        var self = this\n        if (!this.isNew()) {\n            this.form.Shifts.value = this.form.Shifts.value.sort((a, b) => new Date(a.ShiftStartDate).getTime() - new Date(b.ShiftStartDate).getTime());\n            this.form.Shifts.refresh()\r\n        }\n\n        $(this.form.Shifts.value).on(\"change\", function () {\n            console.log('haha')\n        })\n\n        EditorUtils.setReadonly(this.form.ShiftColor.element, true);\n        $('.ActualShifts').hide()\n\n        var ColorChoser = document.createElement('toolcool-color-picker');\n        // Set the id attribute\n        ColorChoser.setAttribute('id', 'color-picker-1');\n        // Set the color attribute\n        ColorChoser.setAttribute('color', '#e76ff1');\n\n        this.form.ShiftColor.element.after(ColorChoser)\n\n        \n        ColorChoser.addEventListener('change', (evt: Event) => {\n            const customEvent = evt as CustomEvent;\n            this.ColorCode = customEvent.detail.hex\n            this.form.ShiftColor.value = this.ColorCode\n\n        });\n\n\n        this.form.ShiftColor.element.click(function () {\n\n            ColorChoser.opened = true \n\n        }\n        )\n\n\n        var SectionListElement = document.getElementById(this.idPrefix + 'SectionList');\n        var OccupationListElement = document.getElementById(this.idPrefix + 'OccupationList');\n        var DepartmentListElement = document.getElementById(this.idPrefix + 'DepartmentList');\n        var DivisionListElement = document.getElementById(this.idPrefix + 'DivisionList');\n        var JobGradeListElement = document.getElementById(this.idPrefix + 'JobGradeList');\n\n        console.log(this.idPrefix)\n        $(`#s2id_${this.idPrefix}EmployeeList`).on('click', async function (e) {\n            $(`.select2-drop`).hide()\n            return\n\n        })\n\n\n        $(OccupationListElement).on('change', async function () {\n            self.SearchCallback()\n            //  self.SearchEmployeeCallback();\n\n        })\n        $(DivisionListElement).on('change', async function () {\n            self.SearchCallback();\n            // self.SearchEmployeeCallback();\n\n        })\n        $(JobGradeListElement).on('change', async function () {\n            self.SearchCallback();\n            //self.SearchEmployeeCallback();\n        })\n        $(DepartmentListElement).on('change', async function () {\n            self.SearchCallback();\n            //self.SearchEmployeeCallback();\n        })\n        $(SectionListElement).on('change', async function () {\n            self.SearchCallback();\n            //self.SearchEmployeeCallback();\n\n        })\n\n\n\n    }\n}\n\nclass ConcreteEmployeeShiftPatternRow extends EmployeeGroupShiftPatternRow {\n    constructor() {\n        super();\n    }\n}"],
  "mappings": "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",
  "names": ["import_corelib", "import_q", "import_q", "import_q", "import_corelib", "EmployeeGroupDialog", "EmployeeGroupForm", "criteria", "EmployeeProfileService", "EmployeeProfileRow", "response", "EmployeeGroupingsService", "EmployeeGroupRow", "EmployeeGroupService", "opt", "self", "OccupationListElement", "DepartmentListElement", "DivisionListElement", "JobGradeListElement", "SectionListElement", "parseListFromElement", "element", "valueStr", "number", "__name", "JobGradeList", "DivisionList", "DepartmentList", "OccupationList", "SectionList", "jobGradeSet", "divisionSet", "departmentSet", "occupationSet", "sectionSet", "employeeRowList", "employee", "JobGradeID", "DivisionID", "DepartmentID", "OccupationID", "SectionID", "Id", "found", "num", "finalOutput", "i", "employeeGroup", "item", "originalRes", "parseDate", "dateStr", "areShiftsOverlapping", "start1", "end1", "start2", "end2", "areAnyShiftsOverlapping", "shifts", "result", "j", "concatenatedString", "Results", "IdToBypass", "Obj", "ConcreteEmployeeShiftPatternRow", "ViewShiftHistoryService", "EmployeeGroupShiftRow", "res", "Start1", "End1", "Start2", "End2", "EmployeeID", "index", "a", "b", "ColorChoser", "evt", "customEvent", "e", "__async", "__decorateClass", "EmployeeGroupShiftPatternRow"]
}
