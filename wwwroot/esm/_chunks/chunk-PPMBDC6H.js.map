{
  "version": 3,
  "sources": ["../../../Modules/HumanResource/SickLeavePolicy/SickLeavePolicy/SickLeavePolicyEditor.ts", "../../../Modules/ServerTypes/SickLeavePolicy/SickLeavePolicyColumns.ts", "../../../Modules/ServerTypes/SickLeavePolicy/SickLeavePolicyForm.ts", "../../../Modules/ServerTypes/SickLeavePolicy/SickLeavePolicyRow.ts", "../../../Modules/ServerTypes/SickLeavePolicy/SickLeavePolicyService.ts", "../../../Modules/HumanResource/SickLeavePolicy/SickLeavePolicy/SickLeavePolicyEditDialog.ts"],
  "sourcesContent": ["import { Decorators } from '@serenity-is/corelib';\nimport { SickLeavePolicyColumns, SickLeavePolicyRow } from '../../../ServerTypes/SickLeavePolicy';\nimport { GridEditorBase } from \"@serenity-is/extensions\";\nimport { SickLeavePolicyEditDialog } from './SickLeavePolicyEditDialog';\n\n@Decorators.registerEditor('HRMSoftware.SickLeavePolicy.SickLeavePolicyEditor')\nexport class SickLeavePolicyEditor extends GridEditorBase<SickLeavePolicyRow> {\n    protected getColumnsKey() { return SickLeavePolicyColumns.columnsKey; }\n    protected getDialogType() { return SickLeavePolicyEditDialog; }\n    protected getLocalTextPrefix() { return SickLeavePolicyRow.localTextPrefix; }\n\n    protected getAddButtonCaption()\n    {\n        return \"Add\";\n    }\n\n    validateEntity(row, id) {\n\n\n\n\n        return true;\n    }\n\n}", "\uFEFFexport class SickLeavePolicyColumns {\n    static columnsKey = 'SickLeavePolicy.SickLeavePolicy';\n}", "\uFEFFimport { IntegerEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface SickLeavePolicyForm {\n    ServiceFromYear: IntegerEditor;\n    ServiceUntilYear: IntegerEditor;\n    EligibleDays: IntegerEditor;\n}\n\nexport class SickLeavePolicyForm extends PrefixedContext {\n    static formKey = 'SickLeavePolicy.SickLeavePolicy';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!SickLeavePolicyForm.init)  {\n            SickLeavePolicyForm.init = true;\n\n            var w0 = IntegerEditor;\n\n            initFormType(SickLeavePolicyForm, [\n                'ServiceFromYear', w0,\n                'ServiceUntilYear', w0,\n                'EligibleDays', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface SickLeavePolicyRow {\n    Id?: number;\n    Year?: number;\n    ServiceFromYear?: number;\n    ServiceUntilYear?: number;\n    EligibleDays?: number;\n    PolicyRow?: number;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class SickLeavePolicyRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly localTextPrefix = 'SickLeavePolicy.SickLeavePolicy';\n    static readonly deletePermission = '*';\n    static readonly insertPermission = '*';\n    static readonly readPermission = '*';\n    static readonly updatePermission = '*';\n\n    static readonly Fields = fieldsProxy<SickLeavePolicyRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { SickLeavePolicyRow } from \"./SickLeavePolicyRow\";\nimport { ServiceOptions, ServiceRequest, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace SickLeavePolicyService {\n    export const baseUrl = 'SickLeavePolicy/SickLeavePolicy';\n\n    export declare function Create(request: SaveRequest<SickLeavePolicyRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<SickLeavePolicyRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<SickLeavePolicyRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<SickLeavePolicyRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function ListSickLeavePolicy(request: ServiceRequest, onSuccess?: (response: ListResponse<SickLeavePolicyRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"SickLeavePolicy/SickLeavePolicy/Create\",\n        Update: \"SickLeavePolicy/SickLeavePolicy/Update\",\n        Delete: \"SickLeavePolicy/SickLeavePolicy/Delete\",\n        Retrieve: \"SickLeavePolicy/SickLeavePolicy/Retrieve\",\n        List: \"SickLeavePolicy/SickLeavePolicy/List\",\n        ListSickLeavePolicy: \"SickLeavePolicy/SickLeavePolicy/ListSickLeavePolicy\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List', \n        'ListSickLeavePolicy'\n    ].forEach(x => {\n        (<any>SickLeavePolicyService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "import { Decorators, EntityDialog } from '@serenity-is/corelib';\nimport { SickLeavePolicyForm, SickLeavePolicyRow, SickLeavePolicyService } from '../../../ServerTypes/SickLeavePolicy';\nimport { GridEditorDialog } from \"@serenity-is/extensions\";\nimport { alertDialog } from '@serenity-is/corelib/q';\n\n@Decorators.registerClass('HRMSoftware.SickLeavePolicy.SickLeavePolicyEditDialog')\nexport class SickLeavePolicyEditDialog extends GridEditorDialog<SickLeavePolicyRow> {\n    protected getFormKey() { return SickLeavePolicyForm.formKey; }\n    protected getLocalTextPrefix() { return SickLeavePolicyRow.localTextPrefix; }\n \n    protected form: SickLeavePolicyForm;\n    public StartingRange: number[] = [];\n    public EndingRange: number[] = [];\n\n    constructor() {\n        super();\n        this.form = new SickLeavePolicyForm(this.idPrefix);\n\n    }\n\n\n    protected initDialog(dialog: SickLeavePolicyEditDialog) {\n        super.initDialog(dialog);\n\n       \n        // EditorUtils.setReadonly(this.form.Year.element, true);\n    }\n\n    protected save_submitHandler(response: SaveResponse): void {\n\n        if (this.form.ServiceFromYear.value < 0) {\n            alertDialog('Service From Year Cannot be less than 0')\n            return\n        }\n\n        if (this.form.ServiceUntilYear.value < 0) {\n            alertDialog('Service Until Year Cannot be less than 0')\n            return\n        }\n\n        if (this.form.ServiceUntilYear.value > 99) {\n            alertDialog('Service Until Year must be less than 99')\n            return\n        }\n\n        if (this.form.ServiceUntilYear.value - this.form.ServiceFromYear.value < 0) {\n            alertDialog('Service Until Year must be greater than Service From Year')\n            return\n        }\n\n        /*\n        function generateRange(start: number, end: number): number[] {\n            const range: number[] = [];\n            for (let i = start; i <= end; i++) {\n                range.push(i);\n            }\n            return range;\n        }\n\n        function checkOverlap(list1: number[], list2: number[]): boolean {\n            return list1.some(num => list2.includes(num));\n        }\n        var FromYear = this.form.ServiceFromYear.value\n        var Until = this.form.ServiceUntilYear.value\n        var interval1: number[] = generateRange(FromYear, Until);\n\n        for (var index in this.StartingRange)\n        {\n            var StartingNumber = this.StartingRange[index]\n            var EndingNumber = this.EndingRange[index]\n            var interval2: number[] = generateRange(StartingNumber, EndingNumber);\n\n            if (checkOverlap(interval1, interval2))\n            {\n                alertDialog('interval overlapping')\n                return\n            }\n\n        }\n        */\n        super.save_submitHandler(response)\n\n\n\n        // super.save_submitHandler(response)\n\n\n    }\n\n}"],
  "mappings": "6IAAA,IAAAA,EAA2B,SCAnB,IAAMC,EAAN,KAA6B,CAErC,EAFcC,EAAAD,EAAA,0BAAAA,EACH,WAAa,kCCDvB,IAAAE,EAA+C,SAChDC,EAA6B,SAQtB,IAAMC,EAAN,cAAkC,iBAAgB,CAIrD,YAAYC,EAAgB,CAGxB,GAFA,MAAMA,CAAM,EAER,CAACD,EAAoB,KAAO,CAC5BA,EAAoB,KAAO,GAE3B,IAAIE,EAAK,mBAET,gBAAaF,EAAqB,CAC9B,kBAAmBE,EACnB,mBAAoBA,EACpB,eAAgBA,CACpB,CAAC,CACL,CACJ,CACJ,EAnBaC,EAANH,EAAMI,EAAAD,EAAA,uBAAAA,EACF,QAAU,kCCVpB,IAAAE,EAA4B,SAkBtB,IAAeC,EAAf,KAAkC,CAUzC,EAVsBC,EAAAD,EAAA,sBAAAA,EACF,WAAa,KADXA,EAEF,iBAAmB,WAFjBA,EAGF,gBAAkB,kCAHhBA,EAIF,iBAAmB,IAJjBA,EAKF,iBAAmB,IALjBA,EAMF,eAAiB,IANfA,EAOF,iBAAmB,IAPjBA,EASF,UAAS,eAAgC,ECzB7D,IAAAE,EAA+D,SAE9CC,OACAA,EAAA,QAAU,kCASVA,EAAA,QAAU,CACnB,OAAQ,yCACR,OAAQ,yCACR,OAAQ,yCACR,SAAU,2CACV,KAAM,uCACN,oBAAqB,qDACzB,EAEA,CACI,SACA,SACA,SACA,WACA,OACA,qBACJ,EAAE,QAAQC,GAAK,CACLD,EAAwBC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CAClD,SAAO,kBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IA9BYJ,MAAA,KJFjB,IAAAK,EAA+B,SKF/B,IAAAC,EAAyC,SAEzC,IAAAC,EAAiC,SACjCC,EAA4B,SAGrB,IAAMC,EAAN,cAAwC,kBAAqC,CAQhF,aAAc,CACV,MAAM,EAJV,KAAO,cAA0B,CAAC,EAClC,KAAO,YAAwB,CAAC,EAI5B,KAAK,KAAO,IAAIC,EAAoB,KAAK,QAAQ,CAErD,CAXU,YAAa,CAAE,OAAOA,EAAoB,OAAS,CACnD,oBAAqB,CAAE,OAAOC,EAAmB,eAAiB,CAalE,WAAWC,EAAmC,CACpD,MAAM,WAAWA,CAAM,CAI3B,CAEU,mBAAmBC,EAA8B,CAEvD,GAAI,KAAK,KAAK,gBAAgB,MAAQ,EAAG,IACrC,eAAY,yCAAyC,EACrD,MACJ,CAEA,GAAI,KAAK,KAAK,iBAAiB,MAAQ,EAAG,IACtC,eAAY,0CAA0C,EACtD,MACJ,CAEA,GAAI,KAAK,KAAK,iBAAiB,MAAQ,GAAI,IACvC,eAAY,yCAAyC,EACrD,MACJ,CAEA,GAAI,KAAK,KAAK,iBAAiB,MAAQ,KAAK,KAAK,gBAAgB,MAAQ,EAAG,IACxE,eAAY,2DAA2D,EACvE,MACJ,CAgCA,MAAM,mBAAmBA,CAAQ,CAOrC,CAEJ,EAnFaC,EAAAL,EAAA,6BAAAA,EAANM,EAAA,CADN,aAAW,cAAc,uDAAuD,GACpEN,GLAN,IAAMO,EAAN,cAAoC,gBAAmC,CAChE,eAAgB,CAAE,OAAOC,EAAuB,UAAY,CAC5D,eAAgB,CAAE,OAAOC,CAA2B,CACpD,oBAAqB,CAAE,OAAOC,EAAmB,eAAiB,CAElE,qBACV,CACI,MAAO,KACX,CAEA,eAAeC,EAAKC,EAAI,CAKpB,MAAO,EACX,CAEJ,EAlBaC,EAAAN,EAAA,yBAAAA,EAANO,EAAA,CADN,aAAW,eAAe,mDAAmD,GACjEP",
  "names": ["import_corelib", "SickLeavePolicyColumns", "__name", "import_corelib", "import_q", "_SickLeavePolicyForm", "prefix", "w0", "SickLeavePolicyForm", "__name", "import_q", "SickLeavePolicyRow", "__name", "import_q", "SickLeavePolicyService", "x", "r", "s", "o", "import_extensions", "import_corelib", "import_extensions", "import_q", "SickLeavePolicyEditDialog", "SickLeavePolicyForm", "SickLeavePolicyRow", "dialog", "response", "__name", "__decorateClass", "SickLeavePolicyEditor", "SickLeavePolicyColumns", "SickLeavePolicyEditDialog", "SickLeavePolicyRow", "row", "id", "__name", "__decorateClass"]
}
