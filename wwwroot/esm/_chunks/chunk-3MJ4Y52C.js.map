{
  "version": 3,
  "sources": ["../../../Modules/HumanResource/SetEmployeeShift/SetEmployeeShift/SetEmployeeShiftDialog.ts", "../../../Modules/ServerTypes/SetEmployeeShift/SetEmployeeShiftColumns.ts", "../../../Modules/ServerTypes/SetEmployeeShift/SetEmployeeShiftForm.ts", "../../../Modules/ServerTypes/SetEmployeeShift/SetEmployeeShiftRow.ts", "../../../Modules/ServerTypes/SetEmployeeShift/SetEmployeeShiftService.ts"],
  "sourcesContent": ["import { Decorators, EditorUtils, EntityDialog,Criteria } from '@serenity-is/corelib';\nimport { Authorization, isEmptyOrNull, alertDialog } from '@serenity-is/corelib/q';\nimport { EmployeeCp38Row, EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { SetEmployeeShiftForm, SetEmployeeShiftRow, SetEmployeeShiftService } from '../../../ServerTypes/SetEmployeeShift';\nimport { ShiftRow, ShiftService } from '../../../ServerTypes/Shift';\r\nimport { ViewShiftHistoryRow, ViewShiftHistoryService } from '../../../ServerTypes/ViewShiftHistory';\r\nimport { ShiftDialog } from '../../Shift/Shift/ShiftDialog';\n\n@Decorators.registerClass('HRMSoftware.SetEmployeeShift.SetEmployeeShiftDialog')\nexport class SetEmployeeShiftDialog extends EntityDialog<SetEmployeeShiftRow, any> {\n    protected getFormKey() { return SetEmployeeShiftForm.formKey; }\n    protected getRowDefinition() { return SetEmployeeShiftRow; }\n    protected getService() { return SetEmployeeShiftService.baseUrl; }\n\n    protected form = new SetEmployeeShiftForm(this.idPrefix);\n    public EmployeeRowID: number;\n    public ShiftRowObject: ShiftRow[];\n\n    constructor(EmployeeRowID: number, StartDate: string, Edit: number, MaximumDate: string)\n    {\n        super();\n        this.EmployeeRowID = EmployeeRowID\n        var StartingDate = new Date(StartDate)\n        this.form.ShiftStartDate.set_value(StartDate)\n        this.form.ShiftEndDate.set_minDate(StartingDate)\n        EditorUtils.setReadonly(this.form.ShiftStartDate.element, true);\n        this.cloneButton.remove()\n        if (Edit == 1)\n            this.saveAndCloseButton.remove();\n        else\n        {\n            this.localizationButton.remove();\n            this.applyChangesButton.remove();\n            this.undeleteButton.remove();\n        }\n    }\n\n\n\n    public dialogOpen(asPanel?: boolean): void\n    {\n        function getClashingShifts(startDate: string, endDate: string, shifts: SetEmployeeShiftRow[]): { ShiftStartDate: string, ShiftEndDate: string, ShiftId: number }[] {\n            let start = new Date(startDate);\n            let end = new Date(endDate);\n\n            return shifts.filter(shift => {\n                let shiftStart = new Date(shift.ShiftStartDate);\n                let shiftEnd = new Date(shift.ShiftEndDate);\n\n                return (\n                    (start >= shiftStart && start <= shiftEnd) ||  // Case 1: startDate within shift\n                    (end >= shiftStart && end <= shiftEnd) ||      // Case 2: endDate within shift\n                    (shiftStart >= start && shiftStart <= end) ||  // Case 3: shift starts within range\n                    (shiftEnd >= start && shiftEnd <= end)         // Case 4: shift ends within range\n                );\n            }).map(shift => ({\n                ShiftStartDate: shift.ShiftStartDate,\n                ShiftEndDate: shift.ShiftEndDate,\n                ShiftId: shift.ShiftId\n            }));\n        }\n\n        if (this.isNew()) {\n            this.deleteButton.remove()\n            $('.EmployeeGroupId').hide()\n        }\n        else {\n            if (isEmptyOrNull(this.form.EmployeeGroupId.value))\n                $('.EmployeeGroupId').hide()\n            else \n                this.readOnly = true\n            \n        }\n        super.dialogOpen(asPanel);\n        console.log('haha')\n        var self = this\n        var criteria: any;\n\n        ViewShiftHistoryService.List({\n            Criteria: Criteria.and(criteria,\n                [[ViewShiftHistoryRow.Fields.EmployeeRowID], '=', self.EmployeeRowID]\n            )\n        }, response => {\n            console.log(response.Entities)\n            self.ShiftRowObject = response.Entities\n        })\n        EmployeeProfileService.List({\n        }, response => {\n            for (var index in response.Entities) {\n                if (response.Entities[index].Id == this.EmployeeRowID)\n                {\n\n                    this.form.EmployeeRowId.value = response.Entities[index].Id.toString()\n                    EditorUtils.setReadonly(this.form.EmployeeRowId.element, true);\n\n                    this.form.EmployeeName.value = response.Entities[index].EmployeeName.toString()\n                    EditorUtils.setReadonly(this.form.EmployeeName.element, true);\n\n                    break\n                }\n            }\n        });\n\n        var TabId = $(\".fieldset\").children().uniqueId()\n        var tab = ''\n        var CurrentDialogId = this.idPrefix + 'PropertyGrid'\n        for (var index in TabId)\n        {\n            if (CurrentDialogId == TabId[index].id )\n                tab = TabId[index].id.toString()\n        }\n        var ShiftIdElement = \"#\" + tab.replace('PropertyGrid', 'ShiftId');\n        $(ShiftIdElement).on('change', function (e)\n        {    \n            var dlg = new ShiftDialog()          \n            dlg.loadByIdAndOpenDialog($(ShiftIdElement).val())\n            dlg.readOnly = true\n        });\n        var ShiftEndDateElement = \"#\" + tab.replace('PropertyGrid', 'ShiftEndDate');\n        $(ShiftEndDateElement).on('change', function (e) { \n            console.log('haha')\n            console.log(self.form.ShiftEndDate.value)\n            if (self.form.ShiftStartDate.valueAsDate > self.form.ShiftEndDate.valueAsDate) {\n                alertDialog('Shift End Date cannot be earlier than shift end date')\n                $(ShiftEndDateElement).val(null)\n                return\n            }\n            console.log(self.ShiftRowObject)\n            console.log(self.form.ShiftStartDate.value)\n            console.log(self.form.ShiftEndDate.value)\n            var ClashObject = getClashingShifts(self.form.ShiftStartDate.value, self.form.ShiftEndDate.value, self.ShiftRowObject)\n            console.log(ClashObject)\n            if (ClashObject.length > 0) {\n                alertDialog(`There is already a shift from ${ClashObject.map(s => `${s.ShiftStartDate.substring(0, 10)} to ${s.ShiftEndDate.substring(0, 10)}`).join(\"\\n\")}`);\n                $(ShiftEndDateElement).val(null)\n            }\n        });\n\n\n\n        var ShiftStartDateElement = \"#\" + tab.replace('PropertyGrid', 'ShiftStartDate');\n        $(ShiftStartDateElement).on('change', function (e) {\n            console.log('haha')\n            console.log(self.form.ShiftEndDate.value)\n            if (self.form.ShiftStartDate.valueAsDate > self.form.ShiftEndDate.valueAsDate) {\n                alertDialog('Shift End Date cannot be earlier than shift end date')\n                $(ShiftEndDateElement).val(null)\n                return\n            }\n            var ClashObject = getClashingShifts(self.form.ShiftStartDate.value, self.form.ShiftEndDate.value, self.ShiftRowObject)\n            console.log(ClashObject)\n            if (ClashObject.length > 0) {\n                alertDialog(`There is already a shift from ${ClashObject.map(s => `${s.ShiftStartDate.substring(0, 10)} to ${s.ShiftEndDate.substring(0, 10)}`).join(\"\\n\")}`);\n                $(ShiftEndDateElement).val(null)\n            }\n        });\n    }\n\n\n    protected save_submitHandler(response): void {\n        var criteria: any;\n        var self = this\n        var res = response\n        console.log('haha')\n\n        super.save_submitHandler(response);\n    }\n\n}", "\uFEFFexport class SetEmployeeShiftColumns {\n    static columnsKey = 'SetEmployeeShift.SetEmployeeShift';\n}", "\uFEFFimport { LookupEditor, StringEditor, DateEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { ShiftDialog } from \"@/HumanResource/Shift/Shift/ShiftDialog\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface SetEmployeeShiftForm {\n    EmployeeRowId: LookupEditor;\n    EmployeeName: StringEditor;\n    ShiftStartDate: DateEditor;\n    ShiftEndDate: DateEditor;\n    ShiftId: LookupEditor;\n    EmployeeGroupId: LookupEditor;\n}\n\nexport class SetEmployeeShiftForm extends PrefixedContext {\n    static formKey = 'SetEmployeeShift.SetEmployeeShift';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!SetEmployeeShiftForm.init)  {\n            SetEmployeeShiftForm.init = true;\n\n            var w0 = LookupEditor;\n            var w1 = StringEditor;\n            var w2 = DateEditor;\n\n            initFormType(SetEmployeeShiftForm, [\n                'EmployeeRowId', w0,\n                'EmployeeName', w1,\n                'ShiftStartDate', w2,\n                'ShiftEndDate', w2,\n                'ShiftId', w0,\n                'EmployeeGroupId', w0\n            ]);\n        }\n    }\n}\n\n[ShiftDialog]; // referenced types", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface SetEmployeeShiftRow {\n    Id?: number;\n    ShiftStartDate?: string;\n    ShiftEndDate?: string;\n    ShiftId?: number;\n    EmployeeRowId?: number;\n    EmployeeName?: string;\n    ShiftName?: string;\n    EmployeeGroupId?: number;\n    EmployeeGroupName?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class SetEmployeeShiftRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'EmployeeName';\n    static readonly localTextPrefix = 'SetEmployeeShift.SetEmployeeShift';\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = '*';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<SetEmployeeShiftRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { SetEmployeeShiftRow } from \"./SetEmployeeShiftRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace SetEmployeeShiftService {\n    export const baseUrl = 'SetEmployeeShift/SetEmployeeShift';\n\n    export declare function Create(request: SaveRequest<SetEmployeeShiftRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<SetEmployeeShiftRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<SetEmployeeShiftRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<SetEmployeeShiftRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"SetEmployeeShift/SetEmployeeShift/Create\",\n        Update: \"SetEmployeeShift/SetEmployeeShift/Update\",\n        Delete: \"SetEmployeeShift/SetEmployeeShift/Delete\",\n        Retrieve: \"SetEmployeeShift/SetEmployeeShift/Retrieve\",\n        List: \"SetEmployeeShift/SetEmployeeShift/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>SetEmployeeShiftService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}"],
  "mappings": "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",
  "names": ["import_corelib", "import_q", "SetEmployeeShiftColumns", "__name", "import_corelib", "import_q", "_SetEmployeeShiftForm", "prefix", "w0", "w1", "w2", "SetEmployeeShiftForm", "__name", "import_q", "SetEmployeeShiftRow", "__name", "import_q", "SetEmployeeShiftService", "x", "r", "s", "o", "SetEmployeeShiftDialog", "EmployeeRowID", "StartDate", "Edit", "MaximumDate", "SetEmployeeShiftForm", "StartingDate", "SetEmployeeShiftRow", "SetEmployeeShiftService", "asPanel", "getClashingShifts", "startDate", "endDate", "shifts", "start", "end", "shift", "shiftStart", "shiftEnd", "__name", "self", "criteria", "ViewShiftHistoryService", "ViewShiftHistoryRow", "response", "EmployeeProfileService", "index", "TabId", "tab", "CurrentDialogId", "ShiftIdElement", "e", "dlg", "ShiftDialog", "ShiftEndDateElement", "ClashObject", "s", "ShiftStartDateElement", "res", "__decorateClass"]
}
