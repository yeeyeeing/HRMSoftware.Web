{
  "version": 3,
  "sources": ["../../../Modules/ServerTypes/EmployeeGroup/EmployeeGroupService.ts", "../../../Modules/ServerTypes/EmployeeGroup/EmployeeGroupColumns.ts", "../../../Modules/ServerTypes/EmployeeGroup/EmployeeGroupForm.ts", "../../../Modules/HumanResource/EmployeeGroup/EmployeeGroupShift/EmployeeGroupShiftEditor.ts", "../../../Modules/HumanResource/EmployeeGroup/EmployeeGroupShift/EmployeeGroupShiftEditDialog.ts", "../../../Modules/ServerTypes/EmployeeGroup/EmployeeGroupingsColumns.ts", "../../../Modules/ServerTypes/EmployeeGroup/EmployeeGroupingsForm.ts", "../../../Modules/ServerTypes/EmployeeGroup/EmployeeGroupingsRow.ts", "../../../Modules/ServerTypes/EmployeeGroup/EmployeeGroupingsService.ts", "../../../Modules/ServerTypes/EmployeeGroup/EmployeeGroupRow.ts", "../../../Modules/ServerTypes/EmployeeGroup/EmployeeGroupShiftColumns.ts", "../../../Modules/ServerTypes/EmployeeGroup/EmployeeGroupShiftForm.ts", "../../../Modules/ServerTypes/EmployeeGroup/EmployeeGroupShiftPatternColumns.ts", "../../../Modules/ServerTypes/EmployeeGroup/EmployeeGroupShiftPatternForm.ts", "../../../Modules/ServerTypes/EmployeeGroup/EmployeeGroupShiftPatternRow.ts", "../../../Modules/ServerTypes/EmployeeGroup/EmployeeGroupShiftPatternService.ts", "../../../Modules/ServerTypes/EmployeeGroup/EmployeeGroupShiftRow.ts", "../../../Modules/ServerTypes/EmployeeGroup/EmployeeGroupShiftService.ts"],
  "sourcesContent": ["\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { EmployeeGroupRow } from \"./EmployeeGroupRow\";\nimport { ServiceOptions, ServiceRequest, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace EmployeeGroupService {\n    export const baseUrl = 'EmployeeGroup/EmployeeGroup';\n\n    export declare function Create(request: SaveRequest<EmployeeGroupRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<EmployeeGroupRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<EmployeeGroupRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<EmployeeGroupRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function ListGroup(request: ServiceRequest, onSuccess?: (response: ListResponse<EmployeeGroupRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"EmployeeGroup/EmployeeGroup/Create\",\n        Update: \"EmployeeGroup/EmployeeGroup/Update\",\n        Delete: \"EmployeeGroup/EmployeeGroup/Delete\",\n        Retrieve: \"EmployeeGroup/EmployeeGroup/Retrieve\",\n        List: \"EmployeeGroup/EmployeeGroup/List\",\n        ListGroup: \"EmployeeGroup/EmployeeGroup/ListGroup\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List', \n        'ListGroup'\n    ].forEach(x => {\n        (<any>EmployeeGroupService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFexport class EmployeeGroupColumns {\n    static columnsKey = 'EmployeeGroup.EmployeeGroup';\n}", "\uFEFFimport { StringEditor, TextAreaEditor, LookupEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { EmployeeGroupShiftEditor } from \"@/HumanResource/EmployeeGroup/EmployeeGroupShift/EmployeeGroupShiftEditor\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface EmployeeGroupForm {\n    Name: StringEditor;\n    Description: TextAreaEditor;\n    ShiftColor: StringEditor;\n    EmployeeList: LookupEditor;\n    Shifts: EmployeeGroupShiftEditor;\n    ActualShifts: EmployeeGroupShiftEditor;\n}\n\nexport class EmployeeGroupForm extends PrefixedContext {\n    static formKey = 'EmployeeGroup.EmployeeGroup';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!EmployeeGroupForm.init)  {\n            EmployeeGroupForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = TextAreaEditor;\n            var w2 = LookupEditor;\n            var w3 = EmployeeGroupShiftEditor;\n\n            initFormType(EmployeeGroupForm, [\n                'Name', w0,\n                'Description', w1,\n                'ShiftColor', w0,\n                'EmployeeList', w2,\n                'Shifts', w3,\n                'ActualShifts', w3\n            ]);\n        }\n    }\n}", "import { Decorators } from '@serenity-is/corelib';\nimport { GridEditorBase } from \"@serenity-is/extensions\";\nimport { EmployeeGroupShiftEditDialog } from './EmployeeGroupShiftEditDialog';\nimport { EmployeeGroupShiftColumns,EmployeeGroupShiftRow } from '../../../ServerTypes/EmployeeGroup';\nimport { getLookupAsync } from '@serenity-is/corelib/q';\nimport {  alertDialog } from '@serenity-is/corelib/q';\n\n@Decorators.registerEditor('HRMSoftware.EmployeeGroup.EmployeeGroupShiftEditor')\nexport class EmployeeGroupShiftEditor extends GridEditorBase<EmployeeGroupShiftRow> {\n    protected getColumnsKey() { return EmployeeGroupShiftColumns.columnsKey; }\n    protected getDialogType() { return EmployeeGroupShiftEditDialog; }\n    protected getLocalTextPrefix() { return EmployeeGroupShiftRow.localTextPrefix; }\n\n\n\n    protected getAddButtonCaption() {\n        return \"Add Shift\";\n    }\n\n\n\n    validateEntity(row, id) {\n        function parseDate(dateStr: string): Date {\n            return new Date(dateStr);\n        }\n        function areShiftsOverlapping(\n            start1: Date, end1: Date,\n            start2: Date, end2: Date\n        ): boolean {\n            // Check if one shift starts before the other shift ends and ends after the other shift starts\n            return start1 < end2 && end1 >= start2;\n        }\n        function areAnyShiftsOverlapping(shifts): boolean {\n            var result = false\n            for (let i = 0; i < shifts.length; i++) {\n\n                var start1 = parseDate(shifts[i].ShiftStartDate);\n                var end1 = parseDate(shifts[i].ShiftEndDate);\n                for (let j = 0; j < shifts.length; j++) {\n                    if (i == j)\n                        continue\n                    var start2 = parseDate(shifts[j].ShiftStartDate);\n                    var end2 = parseDate(shifts[j].ShiftEndDate);\n                    if (areShiftsOverlapping(start1, end1, start2, end2)) {\n                        var concatenatedString = 'There is a clash between '\n                            + shifts[i].Shift + ' and ' + shifts[j].Shift;\n                        alertDialog(concatenatedString)\n                        result = true\n                        break;\n                    }\n                }\n                if (result == true)\n                    break\n            }\n            return result; // No overlaps\n        }\n      \n       if (!super.validateEntity(row, id))\n           return false;\n\n\n        var itemId = id ?? row[this.getIdProperty()];\n        console.log(this.value)\n          getLookupAsync(\"ShiftRow.ShiftRow\").then(x => {\n              var item = this.view?.getItemById(itemId);\n\n              let str = row.ShiftId.toString()\n              let intVal = parseInt(str)\n              row.ShiftId = intVal\n              console.log(row)\n              console.log(item)\n              console.log(itemId)\n              if (item) {\n                  item.Shift = x.itemById[row.ShiftId].ShiftName;\n\n                  if (areAnyShiftsOverlapping(this.value) == true) {\n                      this.value= this.value.slice(0, -1);\n                      console.log(this.value)\n                      this.view.refresh()\n\n                  }\n\n\n                this.value = this.value.sort((a, b) => new Date(a.ShiftStartDate).getTime() - new Date(b.ShiftStartDate).getTime());\n                \n                //this.view.updateItem(itemId, item);\n            }\n        });\n\n        return true;\n    }\n}", "import { Decorators, EditorUtils, EntityDialog, Select2Editor } from '@serenity-is/corelib';\nimport { GridEditorDialog } from \"@serenity-is/extensions\";\nimport { alertDialog } from '@serenity-is/corelib/q';\nimport { EmployeeGroupShiftForm, EmployeeGroupShiftPatternForm, EmployeeGroupShiftPatternRow, EmployeeGroupShiftRow, EmployeeShiftPatternRow } from '../../../ServerTypes/EmployeeGroup';\nimport { ShiftService } from '../../../ServerTypes/Shift';\nimport { ShiftDialog } from '../../Shift/Shift/ShiftDialog';\nimport { isEmptyOrNull } from '@serenity-is/corelib/q';\n\n@Decorators.registerClass('HRMSoftware.EmployeeGroup.EmployeeGroupShiftEditDialog')\nexport class EmployeeGroupShiftEditDialog extends GridEditorDialog<EmployeeGroupShiftPatternRow> {\n    protected getFormKey() { return EmployeeGroupShiftForm.formKey; }\n    protected getLocalTextPrefix() { return EmployeeGroupShiftRow.localTextPrefix; }\n\n    protected form: EmployeeGroupShiftPatternForm;\n\n    constructor()\n    {\n        super();\n        this.form = new EmployeeGroupShiftForm(this.idPrefix);\n    }\n\n    public dialogOpen(asPanel?: boolean): void\n    {\n        super.dialogOpen(asPanel);\n        var self = this\n        if (this.isNew() == false)\n        {\n            ShiftService.List({\n            }, response => {\n\n                for (var index in response.Entities) {\n                    if (response.Entities[index].Id == parseInt(this.form.ShiftId.value)) {\n\n                        var dlg = new ShiftDialog();\n                        dlg.loadByIdAndOpenDialog(this.form.ShiftId.value);\n                        dlg.set_readOnly(true);\n\n                    }\n                }\n\n            });\n\n\n        }\n        $(this.form.ShiftStartDate.element).on('change', function (e) {\n            if (isEmptyOrNull(self.form.ShiftEndDate.value) || isEmptyOrNull(self.form.ShiftStartDate.value))\n                return\n            if (self.form.ShiftStartDate.valueAsDate >= self.form.ShiftEndDate.valueAsDate) {\n                alertDialog(\"Shift Start Date cannot be later than Shift End Date\")\n                self.form.ShiftStartDate.value = ''\n            }\n        })\n\n        $(this.form.ShiftEndDate.element).on('change', function (e) {\n            if (isEmptyOrNull(self.form.ShiftEndDate.value) || isEmptyOrNull(self.form.ShiftStartDate.value))\n                return\n\n            if (self.form.ShiftStartDate.valueAsDate >= self.form.ShiftEndDate.valueAsDate) {\n                alertDialog(\"Shift Start Date cannot be later than Shift End Date\")\n                self.form.ShiftEndDate.value = ''\n               \n            }\n\n        })\n\n        $(this.form.ShiftId.element).on('change', function (e)\n        {\n            ShiftService.List({\n            }, response => {\n\n                for (var index in response.Entities) {\n                    if (response.Entities[index].Id == this.form.ShiftId.value)\n                    {\n\n                        var dlg = new ShiftDialog();\n                        dlg.loadByIdAndOpenDialog(this.form.ShiftId.value);\n                        dlg.set_readOnly(true);\n\n                    }\n                }\n\n            });\n           \n        });\n\n    }\n\n    protected save_submitHandler(response): void\n    {       \n        super.save_submitHandler(response)\n\n    }\n\n}", "\uFEFFexport class EmployeeGroupingsColumns {\n    static columnsKey = 'EmployeeGroup.EmployeeGroupings';\n}", "\uFEFFimport { IntegerEditor, DateEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface EmployeeGroupingsForm {\n    IsActive: IntegerEditor;\n    InsertUserId: IntegerEditor;\n    UpdateUserId: IntegerEditor;\n    DeleteUserId: IntegerEditor;\n    InsertDate: DateEditor;\n    UpdateDate: DateEditor;\n    DeleteDate: DateEditor;\n    EmployeeRowId: IntegerEditor;\n    EmployeeGroupId: IntegerEditor;\n}\n\nexport class EmployeeGroupingsForm extends PrefixedContext {\n    static formKey = 'EmployeeGroup.EmployeeGroupings';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!EmployeeGroupingsForm.init)  {\n            EmployeeGroupingsForm.init = true;\n\n            var w0 = IntegerEditor;\n            var w1 = DateEditor;\n\n            initFormType(EmployeeGroupingsForm, [\n                'IsActive', w0,\n                'InsertUserId', w0,\n                'UpdateUserId', w0,\n                'DeleteUserId', w0,\n                'InsertDate', w1,\n                'UpdateDate', w1,\n                'DeleteDate', w1,\n                'EmployeeRowId', w0,\n                'EmployeeGroupId', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface EmployeeGroupingsRow {\n    Id?: number;\n    EmployeeRowId?: number;\n    EmployeeGroupId?: number;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class EmployeeGroupingsRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly localTextPrefix = 'EmployeeGroup.EmployeeGroupings';\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = '*';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<EmployeeGroupingsRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { EmployeeGroupingsRow } from \"./EmployeeGroupingsRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace EmployeeGroupingsService {\n    export const baseUrl = 'EmployeeGroup/EmployeeGroupings';\n\n    export declare function Create(request: SaveRequest<EmployeeGroupingsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<EmployeeGroupingsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<EmployeeGroupingsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<EmployeeGroupingsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"EmployeeGroup/EmployeeGroupings/Create\",\n        Update: \"EmployeeGroup/EmployeeGroupings/Update\",\n        Delete: \"EmployeeGroup/EmployeeGroupings/Delete\",\n        Retrieve: \"EmployeeGroup/EmployeeGroupings/Retrieve\",\n        List: \"EmployeeGroup/EmployeeGroupings/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>EmployeeGroupingsService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { EmployeeGroupShiftRow } from \"./EmployeeGroupShiftRow\";\nimport { EmployeeGroupShiftPatternRow } from \"./EmployeeGroupShiftPatternRow\";\nimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface EmployeeGroupRow {\n    ShiftColor?: string;\n    Id?: number;\n    EmployeeList?: number[];\n    Shifts?: EmployeeGroupShiftRow[];\n    ActualShifts?: EmployeeGroupShiftPatternRow[];\n    Name?: string;\n    Description?: string;\n    StartDate?: string;\n    EndDate?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class EmployeeGroupRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'Name';\n    static readonly localTextPrefix = 'EmployeeGroup.EmployeeGroup';\n    static readonly lookupKey = 'EmployeeGroup.EmployeeGroup';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<EmployeeGroupRow>('EmployeeGroup.EmployeeGroup') }\n    static async getLookupAsync() { return getLookupAsync<EmployeeGroupRow>('EmployeeGroup.EmployeeGroup') }\n\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = '*';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<EmployeeGroupRow>();\n}", "\uFEFFexport class EmployeeGroupShiftColumns {\n    static columnsKey = 'EmployeeGroup.EmployeeGroupShift';\n}", "\uFEFFimport { LookupEditor, DateEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface EmployeeGroupShiftForm {\n    ShiftId: LookupEditor;\n    ShiftStartDate: DateEditor;\n    ShiftEndDate: DateEditor;\n}\n\nexport class EmployeeGroupShiftForm extends PrefixedContext {\n    static formKey = 'EmployeeGroup.EmployeeGroupShift';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!EmployeeGroupShiftForm.init)  {\n            EmployeeGroupShiftForm.init = true;\n\n            var w0 = LookupEditor;\n            var w1 = DateEditor;\n\n            initFormType(EmployeeGroupShiftForm, [\n                'ShiftId', w0,\n                'ShiftStartDate', w1,\n                'ShiftEndDate', w1\n            ]);\n        }\n    }\n}", "\uFEFFexport class EmployeeGroupShiftPatternColumns {\n    static columnsKey = 'EmployeeGroup.EmployeeGroupShiftPattern';\n}", "\uFEFFimport { IntegerEditor, DateEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface EmployeeGroupShiftPatternForm {\n    EmployeeRowId: IntegerEditor;\n    InsertDate: DateEditor;\n    ShiftStartDate: DateEditor;\n    ShiftEndDate: DateEditor;\n    ShiftId: IntegerEditor;\n    UpdateDate: DateEditor;\n    DeleteDate: DateEditor;\n    IsActive: IntegerEditor;\n    InsertUserId: IntegerEditor;\n    DeleteUserId: IntegerEditor;\n    UpdateUserId: IntegerEditor;\n    EmployeeGroupId: IntegerEditor;\n}\n\nexport class EmployeeGroupShiftPatternForm extends PrefixedContext {\n    static formKey = 'EmployeeGroup.EmployeeGroupShiftPattern';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!EmployeeGroupShiftPatternForm.init)  {\n            EmployeeGroupShiftPatternForm.init = true;\n\n            var w0 = IntegerEditor;\n            var w1 = DateEditor;\n\n            initFormType(EmployeeGroupShiftPatternForm, [\n                'EmployeeRowId', w0,\n                'InsertDate', w1,\n                'ShiftStartDate', w1,\n                'ShiftEndDate', w1,\n                'ShiftId', w0,\n                'UpdateDate', w1,\n                'DeleteDate', w1,\n                'IsActive', w0,\n                'InsertUserId', w0,\n                'DeleteUserId', w0,\n                'UpdateUserId', w0,\n                'EmployeeGroupId', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface EmployeeGroupShiftPatternRow {\n    Id?: number;\n    EmployeeRowId?: number;\n    ShiftStartDate?: string;\n    ShiftEndDate?: string;\n    ShiftId?: number;\n    EmployeeGroupId?: number;\n    ShiftName?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class EmployeeGroupShiftPatternRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly localTextPrefix = 'EmployeeGroup.EmployeeGroupShiftPattern';\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = 'Administration:HumanResources';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<EmployeeGroupShiftPatternRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { EmployeeGroupShiftPatternRow } from \"./EmployeeGroupShiftPatternRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace EmployeeGroupShiftPatternService {\n    export const baseUrl = 'EmployeeGroup/EmployeeGroupShiftPattern';\n\n    export declare function Create(request: SaveRequest<EmployeeGroupShiftPatternRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<EmployeeGroupShiftPatternRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<EmployeeGroupShiftPatternRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<EmployeeGroupShiftPatternRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"EmployeeGroup/EmployeeGroupShiftPattern/Create\",\n        Update: \"EmployeeGroup/EmployeeGroupShiftPattern/Update\",\n        Delete: \"EmployeeGroup/EmployeeGroupShiftPattern/Delete\",\n        Retrieve: \"EmployeeGroup/EmployeeGroupShiftPattern/Retrieve\",\n        List: \"EmployeeGroup/EmployeeGroupShiftPattern/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>EmployeeGroupShiftPatternService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface EmployeeGroupShiftRow {\n    Id?: number;\n    EmployeeGroupId?: number;\n    ShiftStartDate?: string;\n    ShiftEndDate?: string;\n    ShiftId?: number;\n    Shift?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class EmployeeGroupShiftRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly localTextPrefix = 'EmployeeGroup.EmployeeGroupShift';\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = 'Administration:HumanResources';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<EmployeeGroupShiftRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { EmployeeGroupShiftRow } from \"./EmployeeGroupShiftRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace EmployeeGroupShiftService {\n    export const baseUrl = 'EmployeeGroup/EmployeeGroupShift';\n\n    export declare function Create(request: SaveRequest<EmployeeGroupShiftRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<EmployeeGroupShiftRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<EmployeeGroupShiftRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<EmployeeGroupShiftRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"EmployeeGroup/EmployeeGroupShift/Create\",\n        Update: \"EmployeeGroup/EmployeeGroupShift/Update\",\n        Delete: \"EmployeeGroup/EmployeeGroupShift/Delete\",\n        Retrieve: \"EmployeeGroup/EmployeeGroupShift/Retrieve\",\n        List: \"EmployeeGroup/EmployeeGroupShift/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>EmployeeGroupShiftService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}"],
  "mappings": "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",
  "names": ["import_q", "EmployeeGroupService", "x", "r", "s", "o", "EmployeeGroupColumns", "__name", "import_corelib", "import_corelib", "import_extensions", "import_corelib", "import_extensions", "import_q", "import_q", "EmployeeGroupShiftEditDialog", "EmployeeGroupShiftForm", "EmployeeGroupShiftRow", "asPanel", "self", "ShiftService", "response", "index", "dlg", "ShiftDialog", "e", "__name", "__decorateClass", "import_q", "EmployeeGroupShiftEditor", "EmployeeGroupShiftColumns", "EmployeeGroupShiftEditDialog", "EmployeeGroupShiftRow", "row", "id", "parseDate", "dateStr", "__name", "areShiftsOverlapping", "start1", "end1", "start2", "end2", "areAnyShiftsOverlapping", "shifts", "result", "i", "j", "concatenatedString", "itemId", "x", "_a", "item", "str", "intVal", "a", "b", "__decorateClass", "import_q", "_EmployeeGroupForm", "prefix", "w0", "w1", "w2", "w3", "EmployeeGroupShiftEditor", "EmployeeGroupForm", "__name", "EmployeeGroupingsColumns", "__name", "import_corelib", "import_q", "_EmployeeGroupingsForm", "prefix", "w0", "w1", "EmployeeGroupingsForm", "__name", "import_q", "EmployeeGroupingsRow", "__name", "import_q", "EmployeeGroupingsService", "x", "r", "s", "o", "import_q", "EmployeeGroupRow", "__async", "__name", "EmployeeGroupShiftColumns", "__name", "import_corelib", "import_q", "_EmployeeGroupShiftForm", "prefix", "w0", "w1", "EmployeeGroupShiftForm", "__name", "EmployeeGroupShiftPatternColumns", "__name", "import_corelib", "import_q", "_EmployeeGroupShiftPatternForm", "prefix", "w0", "w1", "EmployeeGroupShiftPatternForm", "__name", "import_q", "EmployeeGroupShiftPatternRow", "__name", "import_q", "EmployeeGroupShiftPatternService", "x", "r", "s", "o", "import_q", "EmployeeGroupShiftRow", "__name", "import_q", "EmployeeGroupShiftService", "x", "r", "s", "o"]
}
