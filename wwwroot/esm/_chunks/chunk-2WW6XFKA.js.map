{
  "version": 3,
  "sources": ["../../../Modules/HumanResource/PayrollSettings/PayrollEarnings/PayrollEarningsEditor.ts", "../../../Modules/ServerTypes/PayrollSettings/EisSubjectionColumns.ts", "../../../Modules/ServerTypes/PayrollSettings/EisSubjectionForm.ts", "../../../Modules/ServerTypes/PayrollSettings/EisSubjectionRow.ts", "../../../Modules/ServerTypes/PayrollSettings/EisSubjectionService.ts", "../../../Modules/ServerTypes/PayrollSettings/EmployerContributionsColumns.ts", "../../../Modules/ServerTypes/PayrollSettings/EmployerContributionsForm.ts", "../../../Modules/ServerTypes/PayrollSettings/EmployerContributionsRow.ts", "../../../Modules/ServerTypes/PayrollSettings/EmployerContributionsService.ts", "../../../Modules/ServerTypes/PayrollSettings/EpfSubjectionColumns.ts", "../../../Modules/ServerTypes/PayrollSettings/EpfSubjectionForm.ts", "../../../Modules/ServerTypes/PayrollSettings/EpfSubjectionRow.ts", "../../../Modules/ServerTypes/PayrollSettings/EpfSubjectionService.ts", "../../../Modules/ServerTypes/PayrollSettings/HrdfSubjectionColumns.ts", "../../../Modules/ServerTypes/PayrollSettings/HrdfSubjectionForm.ts", "../../../Modules/ServerTypes/PayrollSettings/HrdfSubjectionRow.ts", "../../../Modules/ServerTypes/PayrollSettings/HrdfSubjectionService.ts", "../../../Modules/ServerTypes/PayrollSettings/NoPaidLeaveColumns.ts", "../../../Modules/ServerTypes/PayrollSettings/NoPaidLeaveForm.ts", "../../../Modules/ServerTypes/PayrollSettings/NoPaidLeaveRow.ts", "../../../Modules/ServerTypes/PayrollSettings/NoPaidLeaveService.ts", "../../../Modules/ServerTypes/PayrollSettings/PayrollColumns.ts", "../../../Modules/ServerTypes/PayrollSettings/PayrollDeductionsColumns.ts", "../../../Modules/ServerTypes/PayrollSettings/PayrollDeductionsForm.ts", "../../../Modules/ServerTypes/PayrollSettings/PayrollDeductionsRow.ts", "../../../Modules/ServerTypes/PayrollSettings/PayrollDeductionsService.ts", "../../../Modules/ServerTypes/PayrollSettings/PayrollEarningsColumns.ts", "../../../Modules/ServerTypes/PayrollSettings/PayrollEarningsForm.ts", "../../../Modules/ServerTypes/PayrollSettings/PayrollEarningsRow.ts", "../../../Modules/ServerTypes/PayrollSettings/PayrollEarningsService.ts", "../../../Modules/ServerTypes/PayrollSettings/PayrollForm.ts", "../../../Modules/HumanResource/MoneyClaimApplication/MoneyClaimApplication/MoneyClaimApplicationEditor.ts", "../../../Modules/HumanResource/MoneyClaimApplication/MoneyClaimApplication/MoneyClaimApplicationDialog.ts", "../../../Modules/HumanResource/PayrollSettings/PayslipPaidOneTimeAllowance/PayslipPaidOneTimeAllowanceEditor.ts", "../../../Modules/HumanResource/PayrollSettings/PayslipDeductedOneTimeDeductions/PayslipDeductedOneTimeDeductionsEditor.ts", "../../../Modules/HumanResource/PayrollSettings/PayrollDeductions/PayrollDeductionsEditor.ts", "../../../Modules/HumanResource/PayrollSettings/PayrollDeductions/PayrollDeductionsEditDialog.ts", "../../../Modules/ServerTypes/PayrollSettings/PayrollGeneratingWizardColumns.ts", "../../../Modules/ServerTypes/PayrollSettings/PayrollGeneratingWizardForm.ts", "../../../Modules/ServerTypes/PayrollSettings/PayrollGeneratingWizardRow.ts", "../../../Modules/ServerTypes/PayrollSettings/PayrollGeneratingWizardService.ts", "../../../Modules/ServerTypes/PayrollSettings/PayrollRow.ts", "../../../Modules/ServerTypes/PayrollSettings/PayrollService.ts", "../../../Modules/ServerTypes/PayrollSettings/PayrollSettingsColumns.ts", "../../../Modules/ServerTypes/PayrollSettings/PayrollSettingsForm.ts", "../../../Modules/ServerTypes/PayrollSettings/PayrollSettingsRow.ts", "../../../Modules/ServerTypes/PayrollSettings/PayrollSettingsService.ts", "../../../Modules/ServerTypes/PayrollSettings/PayrollWizardColumns.ts", "../../../Modules/ServerTypes/PayrollSettings/PayrollWizardForm.ts", "../../../Modules/ServerTypes/PayrollSettings/PayrollWizardRow.ts", "../../../Modules/ServerTypes/PayrollSettings/PayrollWizardService.ts", "../../../Modules/ServerTypes/PayrollSettings/PayslipDeductedOneTimeDeductionsColumns.ts", "../../../Modules/ServerTypes/PayrollSettings/PayslipDeductedOneTimeDeductionsForm.ts", "../../../Modules/ServerTypes/PayrollSettings/PayslipDeductedOneTimeDeductionsRow.ts", "../../../Modules/ServerTypes/PayrollSettings/PayslipDeductedOneTimeDeductionsService.ts", "../../../Modules/ServerTypes/PayrollSettings/PayslipPaidMoneyClaimingColumns.ts", "../../../Modules/ServerTypes/PayrollSettings/PayslipPaidMoneyClaimingForm.ts", "../../../Modules/ServerTypes/PayrollSettings/PayslipPaidMoneyClaimingRow.ts", "../../../Modules/ServerTypes/PayrollSettings/PayslipPaidMoneyClaimingService.ts", "../../../Modules/ServerTypes/PayrollSettings/PayslipPaidOneTimeAllowanceColumns.ts", "../../../Modules/ServerTypes/PayrollSettings/PayslipPaidOneTimeAllowanceForm.ts", "../../../Modules/ServerTypes/PayrollSettings/PayslipPaidOneTimeAllowanceRow.ts", "../../../Modules/ServerTypes/PayrollSettings/PayslipPaidOneTimeAllowanceService.ts", "../../../Modules/ServerTypes/PayrollSettings/PcbSubjectionColumns.ts", "../../../Modules/ServerTypes/PayrollSettings/PcbSubjectionForm.ts", "../../../Modules/ServerTypes/PayrollSettings/PcbSubjectionRow.ts", "../../../Modules/ServerTypes/PayrollSettings/PcbSubjectionService.ts", "../../../Modules/ServerTypes/PayrollSettings/SocsoSubjectionColumns.ts", "../../../Modules/ServerTypes/PayrollSettings/SocsoSubjectionForm.ts", "../../../Modules/ServerTypes/PayrollSettings/SocsoSubjectionRow.ts", "../../../Modules/ServerTypes/PayrollSettings/SocsoSubjectionService.ts", "../../../Modules/ServerTypes/PayrollSettings/TextClass.ts", "../../../Modules/ServerTypes/PayrollSettings/TextDownloadingWizardForm.ts", "../../../Modules/ServerTypes/PayrollSettings/TextFormatEisSocso.ts", "../../../Modules/ServerTypes/PayrollSettings/TextFormatEpf.ts", "../../../Modules/ServerTypes/PayrollSettings/TextFormatAutopay.ts", "../../../Modules/ServerTypes/PayrollSettings/TextFormatLHDN.ts", "../../../Modules/HumanResource/PayrollSettings/PayrollEarnings/PayrollEarningsEditDialog.ts"],
  "sourcesContent": ["import { Decorators } from '@serenity-is/corelib';\nimport { GridEditorBase } from \"@serenity-is/extensions\";\nimport { PayrollEarningsColumns, PayrollEarningsRow } from '../../../ServerTypes/PayrollSettings';\nimport { PayrollEarningsEditDialog } from './PayrollEarningsEditDialog';\n@Decorators.registerEditor('HRMSoftware.PayrollSettings.PayrollEarningsEditor')\nexport class PayrollEarningsEditor extends GridEditorBase<PayrollEarningsRow> {\n    protected getColumnsKey() { return PayrollEarningsColumns.columnsKey; }\n    protected getDialogType() { return PayrollEarningsEditDialog; }\n    protected getLocalTextPrefix() { return PayrollEarningsRow.localTextPrefix; }\n    protected getAddButtonCaption() {\n        \n        return \"Add\";\n    }\n    validateEntity(row, id) {\n        return true;\n    }\n}", "\uFEFFexport class EisSubjectionColumns {\n    static columnsKey = 'PayrollSettings.EisSubjection';\n}", "\uFEFFimport { BooleanEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface EisSubjectionForm {\n    BasicSalary: BooleanEditor;\n    PaymentsForUnutilisedAnnualOrMedicalLeaves: BooleanEditor;\n    Bonuses: BooleanEditor;\n    Allowances: BooleanEditor;\n    Commisions: BooleanEditor;\n    Incentives: BooleanEditor;\n    ArrearsOfWages: BooleanEditor;\n    WagesForMaternityLeave: BooleanEditor;\n    WagesForPaternityLeave: BooleanEditor;\n    WagesForStudyLeave: BooleanEditor;\n    ServiceCharges: BooleanEditor;\n    OvertimePayments: BooleanEditor;\n    Gratuity: BooleanEditor;\n    RetirementBenefits: BooleanEditor;\n    TerminationBenefits: BooleanEditor;\n    TravelAllowances: BooleanEditor;\n    PaymentInLieuOfNoticeOfTerminationOfService: BooleanEditor;\n    DirectorFee: BooleanEditor;\n    Gifts: BooleanEditor;\n}\n\nexport class EisSubjectionForm extends PrefixedContext {\n    static formKey = 'PayrollSettings.EisSubjection';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!EisSubjectionForm.init)  {\n            EisSubjectionForm.init = true;\n\n            var w0 = BooleanEditor;\n\n            initFormType(EisSubjectionForm, [\n                'BasicSalary', w0,\n                'PaymentsForUnutilisedAnnualOrMedicalLeaves', w0,\n                'Bonuses', w0,\n                'Allowances', w0,\n                'Commisions', w0,\n                'Incentives', w0,\n                'ArrearsOfWages', w0,\n                'WagesForMaternityLeave', w0,\n                'WagesForPaternityLeave', w0,\n                'WagesForStudyLeave', w0,\n                'ServiceCharges', w0,\n                'OvertimePayments', w0,\n                'Gratuity', w0,\n                'RetirementBenefits', w0,\n                'TerminationBenefits', w0,\n                'TravelAllowances', w0,\n                'PaymentInLieuOfNoticeOfTerminationOfService', w0,\n                'DirectorFee', w0,\n                'Gifts', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface EisSubjectionRow {\n    Id?: number;\n    BasicSalary?: boolean;\n    PaymentsForUnutilisedAnnualOrMedicalLeaves?: boolean;\n    Bonuses?: boolean;\n    Allowances?: boolean;\n    Commisions?: boolean;\n    Incentives?: boolean;\n    ArrearsOfWages?: boolean;\n    WagesForMaternityLeave?: boolean;\n    WagesForPaternityLeave?: boolean;\n    WagesForStudyLeave?: boolean;\n    ServiceCharges?: boolean;\n    OvertimePayments?: boolean;\n    Gratuity?: boolean;\n    RetirementBenefits?: boolean;\n    TerminationBenefits?: boolean;\n    TravelAllowances?: boolean;\n    PaymentInLieuOfNoticeOfTerminationOfService?: boolean;\n    DirectorFee?: boolean;\n    Gifts?: boolean;\n    EffectiveSince?: string;\n    EffectiveUntil?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class EisSubjectionRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly localTextPrefix = 'PayrollSettings.EisSubjection';\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = '*';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<EisSubjectionRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { EisSubjectionRow } from \"./EisSubjectionRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace EisSubjectionService {\n    export const baseUrl = 'PayrollSettings/EisSubjection';\n\n    export declare function Create(request: SaveRequest<EisSubjectionRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<EisSubjectionRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<EisSubjectionRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<EisSubjectionRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PayrollSettings/EisSubjection/Create\",\n        Update: \"PayrollSettings/EisSubjection/Update\",\n        Delete: \"PayrollSettings/EisSubjection/Delete\",\n        Retrieve: \"PayrollSettings/EisSubjection/Retrieve\",\n        List: \"PayrollSettings/EisSubjection/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>EisSubjectionService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFexport class EmployerContributionsColumns {\n    static columnsKey = 'PayrollSettings.EmployerContributions';\n}", "\uFEFFimport { StringEditor, DecimalEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface EmployerContributionsForm {\n    Description: StringEditor;\n    Amount: DecimalEditor;\n}\n\nexport class EmployerContributionsForm extends PrefixedContext {\n    static formKey = 'PayrollSettings.EmployerContributions';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!EmployerContributionsForm.init)  {\n            EmployerContributionsForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = DecimalEditor;\n\n            initFormType(EmployerContributionsForm, [\n                'Description', w0,\n                'Amount', w1\n            ]);\n        }\n    }\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface EmployerContributionsRow {\n    Id?: number;\n    PayslipId?: number;\n    Amount?: number;\n    Description?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class EmployerContributionsRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'Description';\n    static readonly localTextPrefix = 'PayrollSettings.EmployerContributions';\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = 'Administration:HumanResources';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<EmployerContributionsRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { EmployerContributionsRow } from \"./EmployerContributionsRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace EmployerContributionsService {\n    export const baseUrl = 'PayrollSettings/EmployerContributions';\n\n    export declare function Create(request: SaveRequest<EmployerContributionsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<EmployerContributionsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<EmployerContributionsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<EmployerContributionsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PayrollSettings/EmployerContributions/Create\",\n        Update: \"PayrollSettings/EmployerContributions/Update\",\n        Delete: \"PayrollSettings/EmployerContributions/Delete\",\n        Retrieve: \"PayrollSettings/EmployerContributions/Retrieve\",\n        List: \"PayrollSettings/EmployerContributions/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>EmployerContributionsService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFexport class EpfSubjectionColumns {\n    static columnsKey = 'PayrollSettings.EpfSubjection';\n}", "\uFEFFimport { BooleanEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface EpfSubjectionForm {\n    BasicSalary: BooleanEditor;\n    PaymentsForUnutilisedAnnualOrMedicalLeaves: BooleanEditor;\n    Bonuses: BooleanEditor;\n    Allowances: BooleanEditor;\n    Commisions: BooleanEditor;\n    Incentives: BooleanEditor;\n    ArrearsOfWages: BooleanEditor;\n    WagesForMaternityLeave: BooleanEditor;\n    WagesForPaternityLeave: BooleanEditor;\n    WagesForStudyLeave: BooleanEditor;\n    ServiceCharges: BooleanEditor;\n    OvertimePayments: BooleanEditor;\n    Gratuity: BooleanEditor;\n    RetirementBenefits: BooleanEditor;\n    TerminationBenefits: BooleanEditor;\n    TravelAllowances: BooleanEditor;\n    PaymentInLieuOfNoticeOfTerminationOfService: BooleanEditor;\n    DirectorFee: BooleanEditor;\n    Gifts: BooleanEditor;\n}\n\nexport class EpfSubjectionForm extends PrefixedContext {\n    static formKey = 'PayrollSettings.EpfSubjection';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!EpfSubjectionForm.init)  {\n            EpfSubjectionForm.init = true;\n\n            var w0 = BooleanEditor;\n\n            initFormType(EpfSubjectionForm, [\n                'BasicSalary', w0,\n                'PaymentsForUnutilisedAnnualOrMedicalLeaves', w0,\n                'Bonuses', w0,\n                'Allowances', w0,\n                'Commisions', w0,\n                'Incentives', w0,\n                'ArrearsOfWages', w0,\n                'WagesForMaternityLeave', w0,\n                'WagesForPaternityLeave', w0,\n                'WagesForStudyLeave', w0,\n                'ServiceCharges', w0,\n                'OvertimePayments', w0,\n                'Gratuity', w0,\n                'RetirementBenefits', w0,\n                'TerminationBenefits', w0,\n                'TravelAllowances', w0,\n                'PaymentInLieuOfNoticeOfTerminationOfService', w0,\n                'DirectorFee', w0,\n                'Gifts', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface EpfSubjectionRow {\n    Id?: number;\n    BasicSalary?: boolean;\n    PaymentsForUnutilisedAnnualOrMedicalLeaves?: boolean;\n    Bonuses?: boolean;\n    Allowances?: boolean;\n    Commisions?: boolean;\n    Incentives?: boolean;\n    ArrearsOfWages?: boolean;\n    WagesForMaternityLeave?: boolean;\n    WagesForPaternityLeave?: boolean;\n    WagesForStudyLeave?: boolean;\n    ServiceCharges?: boolean;\n    OvertimePayments?: boolean;\n    Gratuity?: boolean;\n    RetirementBenefits?: boolean;\n    TerminationBenefits?: boolean;\n    TravelAllowances?: boolean;\n    PaymentInLieuOfNoticeOfTerminationOfService?: boolean;\n    DirectorFee?: boolean;\n    Gifts?: boolean;\n    EffectiveSince?: string;\n    EffectiveUntil?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class EpfSubjectionRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly localTextPrefix = 'PayrollSettings.EpfSubjection';\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = '*';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<EpfSubjectionRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { EpfSubjectionRow } from \"./EpfSubjectionRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace EpfSubjectionService {\n    export const baseUrl = 'PayrollSettings/EpfSubjection';\n\n    export declare function Create(request: SaveRequest<EpfSubjectionRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<EpfSubjectionRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<EpfSubjectionRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<EpfSubjectionRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PayrollSettings/EpfSubjection/Create\",\n        Update: \"PayrollSettings/EpfSubjection/Update\",\n        Delete: \"PayrollSettings/EpfSubjection/Delete\",\n        Retrieve: \"PayrollSettings/EpfSubjection/Retrieve\",\n        List: \"PayrollSettings/EpfSubjection/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>EpfSubjectionService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFexport class HrdfSubjectionColumns {\n    static columnsKey = 'PayrollSettings.HrdfSubjection';\n}", "\uFEFFimport { BooleanEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface HrdfSubjectionForm {\n    BasicSalary: BooleanEditor;\n    PaymentsForUnutilisedAnnualOrMedicalLeaves: BooleanEditor;\n    Bonuses: BooleanEditor;\n    Allowances: BooleanEditor;\n    Commisions: BooleanEditor;\n    Incentives: BooleanEditor;\n    ArrearsOfWages: BooleanEditor;\n    WagesForMaternityLeave: BooleanEditor;\n    WagesForPaternityLeave: BooleanEditor;\n    WagesForStudyLeave: BooleanEditor;\n    ServiceCharges: BooleanEditor;\n    OvertimePayments: BooleanEditor;\n    Gratuity: BooleanEditor;\n    RetirementBenefits: BooleanEditor;\n    TerminationBenefits: BooleanEditor;\n    TravelAllowances: BooleanEditor;\n    PaymentInLieuOfNoticeOfTerminationOfService: BooleanEditor;\n    DirectorFee: BooleanEditor;\n    Gifts: BooleanEditor;\n}\n\nexport class HrdfSubjectionForm extends PrefixedContext {\n    static formKey = 'PayrollSettings.HrdfSubjection';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!HrdfSubjectionForm.init)  {\n            HrdfSubjectionForm.init = true;\n\n            var w0 = BooleanEditor;\n\n            initFormType(HrdfSubjectionForm, [\n                'BasicSalary', w0,\n                'PaymentsForUnutilisedAnnualOrMedicalLeaves', w0,\n                'Bonuses', w0,\n                'Allowances', w0,\n                'Commisions', w0,\n                'Incentives', w0,\n                'ArrearsOfWages', w0,\n                'WagesForMaternityLeave', w0,\n                'WagesForPaternityLeave', w0,\n                'WagesForStudyLeave', w0,\n                'ServiceCharges', w0,\n                'OvertimePayments', w0,\n                'Gratuity', w0,\n                'RetirementBenefits', w0,\n                'TerminationBenefits', w0,\n                'TravelAllowances', w0,\n                'PaymentInLieuOfNoticeOfTerminationOfService', w0,\n                'DirectorFee', w0,\n                'Gifts', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface HrdfSubjectionRow {\n    Id?: number;\n    BasicSalary?: boolean;\n    PaymentsForUnutilisedAnnualOrMedicalLeaves?: boolean;\n    Bonuses?: boolean;\n    Allowances?: boolean;\n    Commisions?: boolean;\n    Incentives?: boolean;\n    ArrearsOfWages?: boolean;\n    WagesForMaternityLeave?: boolean;\n    WagesForPaternityLeave?: boolean;\n    WagesForStudyLeave?: boolean;\n    ServiceCharges?: boolean;\n    OvertimePayments?: boolean;\n    Gratuity?: boolean;\n    RetirementBenefits?: boolean;\n    TerminationBenefits?: boolean;\n    TravelAllowances?: boolean;\n    PaymentInLieuOfNoticeOfTerminationOfService?: boolean;\n    DirectorFee?: boolean;\n    Gifts?: boolean;\n    EffectiveSince?: string;\n    EffectiveUntil?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class HrdfSubjectionRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly localTextPrefix = 'PayrollSettings.HrdfSubjection';\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = '*';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<HrdfSubjectionRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { HrdfSubjectionRow } from \"./HrdfSubjectionRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace HrdfSubjectionService {\n    export const baseUrl = 'PayrollSettings/HrdfSubjection';\n\n    export declare function Create(request: SaveRequest<HrdfSubjectionRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<HrdfSubjectionRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<HrdfSubjectionRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<HrdfSubjectionRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PayrollSettings/HrdfSubjection/Create\",\n        Update: \"PayrollSettings/HrdfSubjection/Update\",\n        Delete: \"PayrollSettings/HrdfSubjection/Delete\",\n        Retrieve: \"PayrollSettings/HrdfSubjection/Retrieve\",\n        List: \"PayrollSettings/HrdfSubjection/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>HrdfSubjectionService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { StatusFormatter } from \"@/HumanResource/PayrollSettings/NoPaidLeave/StatusFormatter\";\n\nexport class NoPaidLeaveColumns {\n    static columnsKey = 'PayrollSettings.NoPaidLeave';\n}\n\n[StatusFormatter]; // referenced types", "\uFEFFimport { LookupEditor, StringEditor, DateEditor, BooleanEditor, DecimalEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface NoPaidLeaveForm {\n    EmployeeRowId: LookupEditor;\n    EmployeeName: StringEditor;\n    LeaveDate: DateEditor;\n    HalfDay: BooleanEditor;\n    Deductions: DecimalEditor;\n}\n\nexport class NoPaidLeaveForm extends PrefixedContext {\n    static formKey = 'PayrollSettings.NoPaidLeave';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!NoPaidLeaveForm.init)  {\n            NoPaidLeaveForm.init = true;\n\n            var w0 = LookupEditor;\n            var w1 = StringEditor;\n            var w2 = DateEditor;\n            var w3 = BooleanEditor;\n            var w4 = DecimalEditor;\n\n            initFormType(NoPaidLeaveForm, [\n                'EmployeeRowId', w0,\n                'EmployeeName', w1,\n                'LeaveDate', w2,\n                'HalfDay', w3,\n                'Deductions', w4\n            ]);\n        }\n    }\n}", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface NoPaidLeaveRow {\n    DepartmentID?: number;\n    DepartmentName?: string;\n    DivisionID?: number;\n    DivisionName?: string;\n    OccupationID?: number;\n    OccupationName?: string;\n    JobGradeID?: number;\n    JobGradeName?: string;\n    MorningSession?: boolean;\n    AfternoonSession?: boolean;\n    Id?: number;\n    Deducted?: number;\n    LeaveDate?: string;\n    HalfDay?: boolean;\n    Deductions?: number;\n    EmployeeId?: string;\n    EmployeeRowId?: number;\n    EmployeeName?: string;\n}\n\nexport abstract class NoPaidLeaveRow {\n    static readonly idProperty = 'Id';\n    static readonly nameProperty = 'EmployeeName';\n    static readonly localTextPrefix = 'PayrollSettings.NoPaidLeave';\n    static readonly lookupKey = 'NoPaidLeave.NoPaidLeave';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<NoPaidLeaveRow>('NoPaidLeave.NoPaidLeave') }\n    static async getLookupAsync() { return getLookupAsync<NoPaidLeaveRow>('NoPaidLeave.NoPaidLeave') }\n\n    static readonly deletePermission = '*';\n    static readonly insertPermission = '*';\n    static readonly readPermission = '*';\n    static readonly updatePermission = '*';\n\n    static readonly Fields = fieldsProxy<NoPaidLeaveRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { NoPaidLeaveRow } from \"./NoPaidLeaveRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace NoPaidLeaveService {\n    export const baseUrl = 'PayrollSettings/NoPaidLeave';\n\n    export declare function Create(request: SaveRequest<NoPaidLeaveRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<NoPaidLeaveRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<NoPaidLeaveRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<NoPaidLeaveRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function CalculateNoPaidLeaveRate(request: number, onSuccess?: (response: number) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PayrollSettings/NoPaidLeave/Create\",\n        Update: \"PayrollSettings/NoPaidLeave/Update\",\n        Delete: \"PayrollSettings/NoPaidLeave/Delete\",\n        Retrieve: \"PayrollSettings/NoPaidLeave/Retrieve\",\n        List: \"PayrollSettings/NoPaidLeave/List\",\n        CalculateNoPaidLeaveRate: \"PayrollSettings/NoPaidLeave/CalculateNoPaidLeaveRate\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List', \n        'CalculateNoPaidLeaveRate'\n    ].forEach(x => {\n        (<any>NoPaidLeaveService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { MonthFormatter } from \"@/HumanResource/PayrollSettings/Payroll/MonthFormatter\";\n\nexport class PayrollColumns {\n    static columnsKey = 'PayrollSettings.Payroll';\n}\n\n[MonthFormatter]; // referenced types", "\uFEFFexport class PayrollDeductionsColumns {\n    static columnsKey = 'PayrollSettings.PayrollDeductions';\n}", "\uFEFFimport { DecimalEditor, StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface PayrollDeductionsForm {\n    Amount: DecimalEditor;\n    DeductionCode: StringEditor;\n    Description: StringEditor;\n}\n\nexport class PayrollDeductionsForm extends PrefixedContext {\n    static formKey = 'PayrollSettings.PayrollDeductions';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!PayrollDeductionsForm.init)  {\n            PayrollDeductionsForm.init = true;\n\n            var w0 = DecimalEditor;\n            var w1 = StringEditor;\n\n            initFormType(PayrollDeductionsForm, [\n                'Amount', w0,\n                'DeductionCode', w1,\n                'Description', w1\n            ]);\n        }\n    }\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface PayrollDeductionsRow {\n    External?: boolean;\n    GovernmentPayments?: number;\n    Id?: number;\n    PayslipId?: number;\n    Amount?: number;\n    Description?: string;\n    DeductionCode?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class PayrollDeductionsRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'Description';\n    static readonly localTextPrefix = 'PayrollSettings.PayrollDeductions';\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = 'Administration:HumanResources';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<PayrollDeductionsRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { PayrollDeductionsRow } from \"./PayrollDeductionsRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace PayrollDeductionsService {\n    export const baseUrl = 'PayrollSettings/PayrollDeductions';\n\n    export declare function Create(request: SaveRequest<PayrollDeductionsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<PayrollDeductionsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<PayrollDeductionsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<PayrollDeductionsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PayrollSettings/PayrollDeductions/Create\",\n        Update: \"PayrollSettings/PayrollDeductions/Update\",\n        Delete: \"PayrollSettings/PayrollDeductions/Delete\",\n        Retrieve: \"PayrollSettings/PayrollDeductions/Retrieve\",\n        List: \"PayrollSettings/PayrollDeductions/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>PayrollDeductionsService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { StatusFormatter } from \"@/HumanResource/PayrollSettings/NoPaidLeave/StatusFormatter\";\n\nexport class PayrollEarningsColumns {\n    static columnsKey = 'PayrollSettings.PayrollEarnings';\n}\n\n[StatusFormatter]; // referenced types", "\uFEFFimport { DecimalEditor, StringEditor, BooleanEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface PayrollEarningsForm {\n    Amount: DecimalEditor;\n    EarningCode: StringEditor;\n    Description: StringEditor;\n    SubjectionToEis: BooleanEditor;\n    SubjectionToEpf: BooleanEditor;\n    SubjectionToHrdf: BooleanEditor;\n    SubjectionToPcb: BooleanEditor;\n    SubjectionToSocso: BooleanEditor;\n}\n\nexport class PayrollEarningsForm extends PrefixedContext {\n    static formKey = 'PayrollSettings.PayrollEarnings';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!PayrollEarningsForm.init)  {\n            PayrollEarningsForm.init = true;\n\n            var w0 = DecimalEditor;\n            var w1 = StringEditor;\n            var w2 = BooleanEditor;\n\n            initFormType(PayrollEarningsForm, [\n                'Amount', w0,\n                'EarningCode', w1,\n                'Description', w1,\n                'SubjectionToEis', w2,\n                'SubjectionToEpf', w2,\n                'SubjectionToHrdf', w2,\n                'SubjectionToPcb', w2,\n                'SubjectionToSocso', w2\n            ]);\n        }\n    }\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface PayrollEarningsRow {\n    Id?: number;\n    PayslipId?: number;\n    SubjectionToEis?: boolean;\n    SubjectionToEpf?: boolean;\n    SubjectionToHrdf?: boolean;\n    SubjectionToPcb?: boolean;\n    SubjectionToSocso?: boolean;\n    External?: boolean;\n    Amount?: number;\n    Description?: string;\n    EarningCode?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class PayrollEarningsRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'Description';\n    static readonly localTextPrefix = 'PayrollSettings.PayrollEarnings';\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = 'Administration:HumanResources';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<PayrollEarningsRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { PayrollEarningsRow } from \"./PayrollEarningsRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace PayrollEarningsService {\n    export const baseUrl = 'PayrollSettings/PayrollEarnings';\n\n    export declare function Create(request: SaveRequest<PayrollEarningsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<PayrollEarningsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<PayrollEarningsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<PayrollEarningsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PayrollSettings/PayrollEarnings/Create\",\n        Update: \"PayrollSettings/PayrollEarnings/Update\",\n        Delete: \"PayrollSettings/PayrollEarnings/Delete\",\n        Retrieve: \"PayrollSettings/PayrollEarnings/Retrieve\",\n        List: \"PayrollSettings/PayrollEarnings/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>PayrollEarningsService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { BooleanEditor, DecimalEditor, LookupEditor, StringEditor, IntegerEditor, DateEditor, TextAreaEditor, EnumEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { EISClass } from \"../EmployeeProfile/EISClass\";\nimport { SOCSOClass } from \"../EmployeeProfile/SOCSOClass\";\nimport { EPFClass } from \"../EmployeeProfile/EPFClass\";\nimport { HRDFClass } from \"../EmployeeProfile/HRDFClass\";\nimport { MaritalStatus } from \"../EmployeeProfile/MaritalStatus\";\nimport { MoneyClaimApplicationEditor } from \"@/HumanResource/MoneyClaimApplication/MoneyClaimApplication/MoneyClaimApplicationEditor\";\nimport { PayslipPaidOneTimeAllowance } from \"@/HumanResource/PayrollSettings/PayslipPaidOneTimeAllowance/PayslipPaidOneTimeAllowanceEditor\";\nimport { PayslipDeductedOneTimeDeductions } from \"@/HumanResource/PayrollSettings/PayslipDeductedOneTimeDeductions/PayslipDeductedOneTimeDeductionsEditor\";\nimport { PayrollEarningsEditor } from \"@/HumanResource/PayrollSettings/PayrollEarnings/PayrollEarningsEditor\";\nimport { PayrollDeductionsEditor } from \"@/HumanResource/PayrollSettings/PayrollDeductions/PayrollDeductionsEditor\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface PayrollForm {\n    IncentiveSubjectEpf: BooleanEditor;\n    IncentiveSubjectEis: BooleanEditor;\n    IncentiveSubjectPcb: BooleanEditor;\n    IncentiveSubjectSocso: BooleanEditor;\n    IncentiveSubjectHrdf: BooleanEditor;\n    BonusSubjectEpf: BooleanEditor;\n    BonusSubjectEis: BooleanEditor;\n    BonusSubjectPcb: BooleanEditor;\n    BonusSubjectSocso: BooleanEditor;\n    BonusSubjectHrdf: BooleanEditor;\n    AnnualizedIncentive: BooleanEditor;\n    SeperateIncentive: BooleanEditor;\n    AnnualizedBonus: BooleanEditor;\n    SeperateBonus: BooleanEditor;\n    EmployeeCp38: DecimalEditor;\n    EmployeeRowId: LookupEditor;\n    EmployeeName: StringEditor;\n    PayMonth: IntegerEditor;\n    PayYear: IntegerEditor;\n    PayDate: DateEditor;\n    PayPeriodStart: DateEditor;\n    PayPeriodEnd: DateEditor;\n    Remarks: TextAreaEditor;\n    HrdfWages: DecimalEditor;\n    PcbWages: DecimalEditor;\n    EisWages: DecimalEditor;\n    SocsoWages: DecimalEditor;\n    EpfWages: DecimalEditor;\n    DaysWorked: DecimalEditor;\n    BasicPay: DecimalEditor;\n    DailyRate: DecimalEditor;\n    HourlyRate: DecimalEditor;\n    Age: DecimalEditor;\n    BirthDay: DateEditor;\n    EisClass: EnumEditor;\n    SocsoClass: EnumEditor;\n    EpfClass: EnumEditor;\n    HrdfClass: EnumEditor;\n    TaxClass: IntegerEditor;\n    MaritalStatus: EnumEditor;\n    WorkingSpouse: BooleanEditor;\n    ChildrenUnderEighteen: DecimalEditor;\n    ChildrenInUniversity: DecimalEditor;\n    DisabledChild: DecimalEditor;\n    DisabledChildInUniversity: DecimalEditor;\n    Bonus: DecimalEditor;\n    Incentive: DecimalEditor;\n    EarlyLeavingRate: DecimalEditor;\n    LateArrivalRate: DecimalEditor;\n    EarlyLeaving: DecimalEditor;\n    LateArrival: DecimalEditor;\n    FlatOt: DecimalEditor;\n    OtOnePointFiveRate: DecimalEditor;\n    OtTwoRate: DecimalEditor;\n    OtOne: DecimalEditor;\n    OtOnePointFive: DecimalEditor;\n    OtTwo: DecimalEditor;\n    NPLHourlyRate: DecimalEditor;\n    NPLDailyRate: DecimalEditor;\n    NPLHourly: DecimalEditor;\n    NPLDaily: DecimalEditor;\n    AbsentDailyRate: DecimalEditor;\n    AbsentDaily: DecimalEditor;\n    OtSubjectEpf: BooleanEditor;\n    OtSubjectEis: BooleanEditor;\n    OtSubjectPcb: BooleanEditor;\n    OtSubjectSocso: BooleanEditor;\n    OtSubjectHrdf: BooleanEditor;\n    PaidMoneyClaimingList: MoneyClaimApplicationEditor;\n    AllowanceList: PayslipPaidOneTimeAllowance;\n    DeductionList: PayslipDeductedOneTimeDeductions;\n    PayrollEarnings: PayrollEarningsEditor;\n    PayrollDeductions: PayrollDeductionsEditor;\n    Deduction: DecimalEditor;\n    Earnings: DecimalEditor;\n    Nett: DecimalEditor;\n    EmployeeEIS: DecimalEditor;\n    EmployeePCB: DecimalEditor;\n    EmployeeSOCSO: DecimalEditor;\n    EmployeeEPF: DecimalEditor;\n    EmployerHRDF: DecimalEditor;\n    EmployerEPF: DecimalEditor;\n    EmployerEIS: DecimalEditor;\n    EmployerSOCSO: DecimalEditor;\n}\n\nexport class PayrollForm extends PrefixedContext {\n    static formKey = 'PayrollSettings.Payroll';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!PayrollForm.init)  {\n            PayrollForm.init = true;\n\n            var w0 = BooleanEditor;\n            var w1 = DecimalEditor;\n            var w2 = LookupEditor;\n            var w3 = StringEditor;\n            var w4 = IntegerEditor;\n            var w5 = DateEditor;\n            var w6 = TextAreaEditor;\n            var w7 = EnumEditor;\n            var w8 = MoneyClaimApplicationEditor;\n            var w9 = PayslipPaidOneTimeAllowance;\n            var w10 = PayslipDeductedOneTimeDeductions;\n            var w11 = PayrollEarningsEditor;\n            var w12 = PayrollDeductionsEditor;\n\n            initFormType(PayrollForm, [\n                'IncentiveSubjectEpf', w0,\n                'IncentiveSubjectEis', w0,\n                'IncentiveSubjectPcb', w0,\n                'IncentiveSubjectSocso', w0,\n                'IncentiveSubjectHrdf', w0,\n                'BonusSubjectEpf', w0,\n                'BonusSubjectEis', w0,\n                'BonusSubjectPcb', w0,\n                'BonusSubjectSocso', w0,\n                'BonusSubjectHrdf', w0,\n                'AnnualizedIncentive', w0,\n                'SeperateIncentive', w0,\n                'AnnualizedBonus', w0,\n                'SeperateBonus', w0,\n                'EmployeeCp38', w1,\n                'EmployeeRowId', w2,\n                'EmployeeName', w3,\n                'PayMonth', w4,\n                'PayYear', w4,\n                'PayDate', w5,\n                'PayPeriodStart', w5,\n                'PayPeriodEnd', w5,\n                'Remarks', w6,\n                'HrdfWages', w1,\n                'PcbWages', w1,\n                'EisWages', w1,\n                'SocsoWages', w1,\n                'EpfWages', w1,\n                'DaysWorked', w1,\n                'BasicPay', w1,\n                'DailyRate', w1,\n                'HourlyRate', w1,\n                'Age', w1,\n                'BirthDay', w5,\n                'EisClass', w7,\n                'SocsoClass', w7,\n                'EpfClass', w7,\n                'HrdfClass', w7,\n                'TaxClass', w4,\n                'MaritalStatus', w7,\n                'WorkingSpouse', w0,\n                'ChildrenUnderEighteen', w1,\n                'ChildrenInUniversity', w1,\n                'DisabledChild', w1,\n                'DisabledChildInUniversity', w1,\n                'Bonus', w1,\n                'Incentive', w1,\n                'EarlyLeavingRate', w1,\n                'LateArrivalRate', w1,\n                'EarlyLeaving', w1,\n                'LateArrival', w1,\n                'FlatOt', w1,\n                'OtOnePointFiveRate', w1,\n                'OtTwoRate', w1,\n                'OtOne', w1,\n                'OtOnePointFive', w1,\n                'OtTwo', w1,\n                'NPLHourlyRate', w1,\n                'NPLDailyRate', w1,\n                'NPLHourly', w1,\n                'NPLDaily', w1,\n                'AbsentDailyRate', w1,\n                'AbsentDaily', w1,\n                'OtSubjectEpf', w0,\n                'OtSubjectEis', w0,\n                'OtSubjectPcb', w0,\n                'OtSubjectSocso', w0,\n                'OtSubjectHrdf', w0,\n                'PaidMoneyClaimingList', w8,\n                'AllowanceList', w9,\n                'DeductionList', w10,\n                'PayrollEarnings', w11,\n                'PayrollDeductions', w12,\n                'Deduction', w1,\n                'Earnings', w1,\n                'Nett', w1,\n                'EmployeeEIS', w1,\n                'EmployeePCB', w1,\n                'EmployeeSOCSO', w1,\n                'EmployeeEPF', w1,\n                'EmployerHRDF', w1,\n                'EmployerEPF', w1,\n                'EmployerEIS', w1,\n                'EmployerSOCSO', w1\n            ]);\n        }\n    }\n}\n\n[EISClass, SOCSOClass, EPFClass, HRDFClass, MaritalStatus]; // referenced types", "import { Decorators } from '@serenity-is/corelib';\nimport { EmployeeAllowanceColumns, EmployeeAllowanceRow } from '../../../ServerTypes/EmployeeProfile';\nimport { GridEditorBase } from \"@serenity-is/extensions\";\nimport { MoneyClaimApplicationColumns, MoneyClaimApplicationRow } from '../../../ServerTypes/MoneyClaimApplication';\nimport { MoneyClaimApplicationDialog } from './MoneyClaimApplicationDialog';\n@Decorators.registerEditor('HRMSoftware.MoneyClaimApplication.MoneyClaimApplicationEditor')\nexport class MoneyClaimApplicationEditor extends GridEditorBase<MoneyClaimApplicationRow> {\n    protected getColumnsKey() { return MoneyClaimApplicationColumns.columnsKey; }\n    protected getDialogType() { return MoneyClaimApplicationDialog; }\n    protected getLocalTextPrefix() { return MoneyClaimApplicationRow.localTextPrefix; }\n    protected getAddButtonCaption() {\n        return \"Add\";\n    }\n\n    \n}", "import { Decorators, EditorUtils, EntityDialog, RetrieveResponse, Select2Editor } from '@serenity-is/corelib';\nimport { MoneyClaimApplicationForm, MoneyClaimApplicationRow, MoneyClaimApplicationService, MoneyClaimingStatus } from '../../../ServerTypes/MoneyClaimApplication';\nimport { Authorization, isEmptyOrNull, getLookup, confirm } from '@serenity-is/corelib/q';\nimport { EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { EpfSubjectionService } from '../../../ServerTypes/PayrollSettings';\nimport { PermissionKeys } from '../../../ServerTypes/Administration';\nimport { serviceCall, ListResponse } from '@serenity-is/corelib/q';\nimport { EisSubjectionService, EmployerContributionsRow, EpfSubjectionService, HrdfSubjectionService, NoPaidLeaveRow, NoPaidLeaveService, PayrollDeductionsRow, PayrollEarningsRow, PayrollForm, PayrollRow, PayrollService, PcbSubjectionService, SocsoSubjectionService } from '../../../ServerTypes/PayrollSettings';\n\nimport { EmployeeBasicDataDialog } from '../../EmployeeBasicData/EmployeeBasicData/EmployeeBasicDataDialog';\nimport { OrganisationChartService } from '../../../ServerTypes/OrganisationChart';\nexport interface Subjection {\n    id: number;\n    name: string;\n    subjection: number;\n}\n@Decorators.registerClass('HRMSoftware.MoneyClaimApplication.MoneyClaimApplicationDialog')\nexport class MoneyClaimApplicationDialog extends EntityDialog<MoneyClaimApplicationRow, any> {\n    protected getFormKey() { return MoneyClaimApplicationForm.formKey; }\n    protected getRowDefinition() { return MoneyClaimApplicationRow; }\n    protected getService() { return MoneyClaimApplicationService.baseUrl; }\n    public ListOfEpfSubjection: Subjection[] = [];\n    public ListOfCriteria: string[] = [];          \n    public EmployeeApproval: number;\n    public HrApproval: number;\n\n    public SuperiorPermission: boolean;\n\n    public ListOfEisSubjection: Subjection[] = [];\n    public ListOfHrdfSubjection: Subjection[] = [];\n    public ListOfSocsoSubjection: Subjection[] = [];\n    public ListOfPcbSubjection: Subjection[] = [];\n    protected form = new MoneyClaimApplicationForm(this.idPrefix);\n    constructor() {\n        super();\n        var self = this;\n        PcbSubjectionService.List({\n        }, response => {\n            for (var index in response.Entities) {\n                if (response.Entities[index].IsActive == 1) {\n                    var dict = response.Entities[index]\n                    var keys = Object.keys(dict);\n                    for (var j = 0; j < keys.length; j++) {\n                        var key = keys[j];\n                        if (key.toLowerCase() == 'id' || key.toLowerCase() == 'isactive')\n                            continue\n                        if (dict[key] != true && dict[key] != false && dict[key] !== undefined)\n                            continue\n                        var NewKey = key.replace(/([A-Z])/g, ' $1').trim();\n                        // Access each key here\n                        this.ListOfPcbSubjection.push({\n                            id: j,\n                            name: NewKey,\n                            subjection: dict[key],\n                        })\n                    }\n                    break\n                }\n            }\n            EpfSubjectionService.List({\n            }, response => {\n                for (var index in response.Entities) {\n                    if (response.Entities[index].IsActive == 1) {\n                        var dict = response.Entities[index]\n                        var keys = Object.keys(dict);\n                        for (var j = 0; j < keys.length; j++) {\n                            var key = keys[j];\n                            if (key.toLowerCase() == 'id' || key.toLowerCase() == 'isactive')\n                                continue\n                            if (dict[key] != true && dict[key] != false && dict[key] !== undefined)\n                                continue\n                            var NewKey = key.replace(/([A-Z])/g, ' $1').trim();\n\n                            // Access each key here\n                            this.ListOfEpfSubjection.push({\n                                id: j,\n                                name: NewKey,\n                                subjection: dict[key],\n                            })\n                        }\n                        break\n                    }\n                }\n                var BufferDict = this.ListOfEpfSubjection\n                var keys = Object.keys(BufferDict);\n                for (var j = 0; j < keys.length; j++) {\n                    var key = keys[j];\n                    this.ListOfCriteria.push(BufferDict[key].name)\n                }\n                EisSubjectionService.List({\n                }, response => {\n                    for (var index in response.Entities) {\n                        if (response.Entities[index].IsActive == 1) {\n                            var dict = response.Entities[index]\n                            var keys = Object.keys(dict);\n\n                            for (var j = 0; j < keys.length; j++) {\n                                var key = keys[j];\n                                if (key.toLowerCase() == 'id' || key.toLowerCase() == 'isactive')\n                                    continue\n                                if (dict[key] != true && dict[key] != false && dict[key] !== undefined)\n                                    continue\n                                // Access each key here\n                                var NewKey = key.replace(/([A-Z])/g, ' $1').trim();\n\n                                this.ListOfEisSubjection.push({\n                                    id: j,\n                                    name: NewKey,\n                                    subjection: dict[key],\n                                })\n                            }\n                            break\n                        }\n                    }\n                    HrdfSubjectionService.List({\n                    }, response => {\n                        for (var index in response.Entities) {\n                            if (response.Entities[index].IsActive == 1) {\n                                var dict = response.Entities[index]\n                                var keys = Object.keys(dict);\n                                for (var j = 0; j < keys.length; j++) {\n                                    var key = keys[j];\n                                    if (key.toLowerCase() == 'id' || key.toLowerCase() == 'isactive')\n                                        continue\n                                    if (dict[key] != true && dict[key] != false && dict[key] !== undefined)\n                                        continue\n                                    // Access each key here\n                                    var NewKey = key.replace(/([A-Z])/g, ' $1').trim();\n\n                                    this.ListOfHrdfSubjection.push({\n                                        id: j,\n                                        name: NewKey,\n                                        subjection: dict[key],\n                                    })\n                                }\n                                break\n                            }\n                        }\n                        SocsoSubjectionService.List({\n                        }, response => {\n                            for (var index in response.Entities) {\n                                if (response.Entities[index].IsActive == 1) {\n                                    var dict = response.Entities[index]\n                                    var keys = Object.keys(dict);\n                                    for (var j = 0; j < keys.length; j++) {\n                                        var key = keys[j];\n                                        if (key.toLowerCase() == 'id' || key.toLowerCase() == 'isactive')\n                                            continue\n\n                                        if (dict[key] != true && dict[key] != false && dict[key] !== undefined)\n                                            continue\n\n                                        // Access each key here\n                                        var NewKey = key.replace(/([A-Z])/g, ' $1').trim();\n\n                                        this.ListOfSocsoSubjection.push({\n                                            id: j,\n                                            name: NewKey,\n                                            subjection: dict[key],\n                                        })\n                                    }\n                                    break\n                                }\n                            }\n\n                        });\n                        var ClaimCategory = self.form.ClaimingCategory.value\n                        var BufferDict = this.ListOfEpfSubjection\n                        var keys = Object.keys(BufferDict);\n                        var ClaimingCategoryElement = document.getElementById(this.idPrefix + 'ClaimingCategory')\n                        var ClaimingCategoryEditor = new Select2Editor($(ClaimingCategoryElement))\n                        for (var j = 0; j < keys.length; j++) {\n                            var key = keys[j];\n                            var selection = BufferDict[key].name.replace(/([a-z])([A-Z])/g, '$1 $2');\n                            ClaimingCategoryEditor.addItem({ id: BufferDict[key].name, text: selection }); // 8am - 6pm , will consider lates\n                        }\n                        ClaimingCategoryEditor.addItem({ id: 'Others', text: 'Others' }); // 8am - 6pm , will consider lates\n                        $(ClaimingCategoryElement).on('change', async function (e) {\n                            console.log('haha')\n                            console.log(self.form.ClaimingCategory.value)\n                            self.form.SubjectionEis.value = self.CheckSubjection(self.ListOfEisSubjection, self.form.ClaimingCategory.value);\n                            self.form.SubjectionEpf.value = self.CheckSubjection(self.ListOfEpfSubjection, self.form.ClaimingCategory.value);\n                            self.form.SubjectionPcb.value = self.CheckSubjection(self.ListOfPcbSubjection, self.form.ClaimingCategory.value);\n                            self.form.SubjectionHrdf.value = self.CheckSubjection(self.ListOfHrdfSubjection, self.form.ClaimingCategory.value);\n                            self.form.SubjectionSocso.value = self.CheckSubjection(self.ListOfSocsoSubjection, self.form.ClaimingCategory.value);\n                        })\n                        if (ClaimCategory != '')\n                            $(ClaimingCategoryElement).val(ClaimCategory).trigger('change'); // Deselect any current selection\n                        $('.field.SubjectionEis, .field.SubjectionEpf, .field.SubjectionHrdf, .field.SubjectionPcb, .field.SubjectionSocso').addClass('col-md-2');\n\n                    });\n\n                });\n\n            });\n\n        });\n\n        this.cloneButton.remove()\n    }\n    protected getDialogOptions() {\n        let opt = super.getDialogOptions()\n        opt.width = opt.width + 100\n        return opt\n    }\n    protected onDialogOpen() {\n        super.onDialogOpen()\n        this.getToolbarButtons()\n        var self = this\n        $(\".EmployeeUpdated\").hide()\n        $(\".HrUpdated\").hide()\n\n        if (isEmptyOrNull(this.form.EmployeeUpdatedName.value))\n            $(\".EmployeeUpdatedName\").hide()\n        else {\n            var EmployeeUpdatedNameElement = document.getElementById(this.idPrefix + 'EmployeeUpdatedName')\n            $(EmployeeUpdatedNameElement).on('click', async function () {\n                console.log(self.form.EmployeeUpdatedName.value)\n                console.log(self.form.EmployeeUpdated.value)\n                var dlg = new EmployeeBasicDataDialog(parseInt(self.form.EmployeeUpdated.value))\n                dlg.loadByIdAndOpenDialog(parseInt(self.form.EmployeeUpdated.value))\n            })\n        }\n        if (isEmptyOrNull(this.form.HrUpdatedName.value))\n            $(\".HrUpdatedName\").hide()\n        else {\n            var HrUpdatedNameNameElement = document.getElementById(this.idPrefix + 'HrUpdatedName')\n            $(HrUpdatedNameNameElement).on('click', async function () {\n                var dlg = new EmployeeBasicDataDialog(parseInt(self.form.HrUpdated.value))\n                dlg.loadByIdAndOpenDialog(parseInt(self.form.HrUpdated.value))\n            })\n        }\n        if (this.isNew()) {\n            var ApproveButtons = document.querySelectorAll('.text-bg-success')\n            ApproveButtons.forEach(function (element) {\n                $(element).hide()\n            });\n            var RejectButtons = document.querySelectorAll('.text-bg-danger')\n            RejectButtons.forEach(function (element) {\n                $(element).hide()\n            });\n            if (!Authorization.userDefinition.Permissions[PermissionKeys.HumanResources]) {\n                this.form.EmployeeRowId.value = Authorization.userDefinition.EmployeeRowID\n                this.form.EmployeeName.value = Authorization.userDefinition.DisplayName\n                EditorUtils.setReadonly(this.form.EmployeeRowId.element, true);\n                EditorUtils.setReadonly(this.form.EmployeeName.element, true);\n            }\n            else if (Authorization.userDefinition.Permissions[PermissionKeys.HumanResources]) //HR guy\n            {\n                var EmployeeRowIdElement = document.getElementById(this.idPrefix + 'EmployeeRowId')\n                $(EmployeeRowIdElement).on('change', async function () {\n                    self.form.EmployeeName.value = ''\n                    if (isEmptyOrNull($(this).val()))\n                        return;\n                    EmployeeProfileService.Retrieve({\n                        EntityId: $(EmployeeRowIdElement).val()\n                    }, response => {\n                        self.form.EmployeeName.value = response.Entity.EmployeeName\n                    });\n                });\n            }\n        }\n        else if (!this.isNew()) {\n            if (!Authorization.userDefinition.Permissions[PermissionKeys.HumanResources]\n                && self.form.EmployeeRowId.value != Authorization.userDefinition.EmployeeRowID)//if no hr privilege\n                this.readOnly = true\n            console.log(self.form.EmployeeRowId.value == Authorization.userDefinition.EmployeeRowID)\n            if (self.form.EmployeeRowId.value == Authorization.userDefinition.EmployeeRowID) {\n                EditorUtils.setReadonly(this.form.EmployeeRowId.element, true);\n                EditorUtils.setReadonly(this.form.EmployeeName.element, true);\n                return\n            }\n            console.log('haha')\n            MoneyClaimApplicationService.Retrieve({\n                EntityId: this.entityId\n            }, response => {\n                var applicant = response.Entity.EmployeeRowId\n                var HrStatus = response.Entity.HrStatus\n                var EmployeeStatus = response.Entity.EmployeeStatus\n                self.EmployeeApproval = response.Entity.EmployeeStatus\n                self.HrApproval = response.Entity.HrStatus\n                var applicationStatus = response.Entity.Status\n                if (applicationStatus == MoneyClaimingStatus.Pending) {\n                    serviceCall<RetrieveResponse<any>>({\n                        service: OrganisationChartService.baseUrl + '/PermissionToAcknowledge',\n                        data: {\n                            'UserEmployeeRowID': Authorization.userDefinition.EmployeeRowID,\n                            'ApplicantEmployeeRowID': applicant\n                        },\n                        method: \"GET\",\n                        async: false,\n                        onSuccess: (response) => {\n                            var PermissionToAck = response\n                            self.SuperiorPermission = response\n                            if (self.form.EmployeeRowId.value != Authorization.userDefinition.EmployeeRowID)\n                                this.set_readOnly(true)\n                            $('.delete-button').removeClass('disabled');\n                            console.log(response)\n                            if (HrStatus == 0 || EmployeeStatus == 0)//if one of the condition still pending\n                            {\n                                console.log(EmployeeStatus)\n                                console.log(HrStatus)\n\n                                if (PermissionToAck == true && !EmployeeStatus )\n                                    $('.tool-button').removeClass('hidden');\n\n                                if (Authorization.userDefinition.Permissions[PermissionKeys.HumanResources] && !HrStatus )\n                                    $('.tool-button').removeClass('hidden');\n\n                            }\n                            else if ((HrStatus == MoneyClaimingStatus.Rejected || EmployeeStatus == MoneyClaimingStatus.Rejected)\n                                || (HrStatus == MoneyClaimingStatus.Approved && EmployeeStatus == MoneyClaimingStatus.Approved)) {\n                                if (self.form.EmployeeRowId.value == Authorization.userDefinition.EmployeeRowID) {\n                                    var ApproveButtons = document.querySelectorAll('.text-bg-success')\n                                    ApproveButtons.forEach(function (element) {\n                                        $(element).hide()\n                                    });\n                                    var RejectButtons = document.querySelectorAll('.text-bg-danger')\n                                    RejectButtons.forEach(function (element) {\n                                        $(element).hide()\n                                    });\n                                }\n                            }\n\n\n                        },\n                        onError: (error) => {\n                            console.log(error.Error);\n                        }\n                    });\n\n                }\n                else {\n                    this.set_readOnly(true)\n                    $('.delete-button').removeClass('disabled');\n                }\n            });\n        }\n        var ClaimCategory = this.form.ClaimingCategory.value\n        EditorUtils.setReadonly(this.form.EmployeeName.element, true);\n  \n\n\n        /*\n        EpfSubjectionService.List({\n        }, response => {\n            for (var index in response.Entities) {\n                if (response.Entities[index].IsActive == 1) {\n                    var dict = response.Entities[index]\n                    var keys = Object.keys(dict);\n                    for (var j = 0; j < keys.length; j++) {\n                        var key = keys[j];\n                        if (key.toLowerCase() == 'id' || key.toLowerCase() == 'isactive')\n                            continue\n                        if (dict[key] != true && dict[key] != false && dict[key] !== undefined)\n                            continue\n                        var NewKey = key.replace(/([A-Z])/g, ' $1').trim();\n                        // Access each key here\n                        this.ListOfEpfSubjection.push({\n                            id: j,\n                            name: NewKey,\n                            subjection: dict[key],\n                        })\n                    }\n                    var BufferDict = this.ListOfEpfSubjection\n                    var keys = Object.keys(BufferDict);\n                    var ClaimingCategoryElement = document.getElementById(this.idPrefix + 'ClaimingCategory')\n                    var ClaimingCategoryEditor = new Select2Editor($(ClaimingCategoryElement))\n                    for (var j = 0; j < keys.length; j++) {\n                        var key = keys[j];\n                        var selection = BufferDict[key].name.replace(/([a-z])([A-Z])/g, '$1 $2');\n                        ClaimingCategoryEditor.addItem({ id: BufferDict[key].name, text: selection }); // 8am - 6pm , will consider lates\n                    }\n                    ClaimingCategoryEditor.addItem({ id: 'Others', text: 'Others' }); // 8am - 6pm , will consider lates\n                    break\n                }\n            }\n            $(ClaimingCategoryElement).on('change', async function (e) {\n                console.log('haha')\n            })\n            if (ClaimCategory != '') \n                $(ClaimingCategoryElement).val(ClaimCategory).trigger('change'); // Deselect any current selection\n            \n\n        });\n        */\n    }\n    public CheckSubjection(arrayOfDict, input): boolean {\n        var extractedText = input.match(/\\((.*?)\\)/);\n        var trimmedString;\n        // Check if text inside parentheses is found\n        if (extractedText && extractedText.length > 1)\n            trimmedString = extractedText[1]; // Extracted text is at index 1\n        else\n            trimmedString = input; // If no parentheses found, set trimmed string to original string\n\n        if (trimmedString == 'Others')\n            return false\n        for (var i = 0; i < arrayOfDict.length; i++) {\n            var dict = arrayOfDict[i];\n            for (var key in dict) {\n                if (dict[key] == trimmedString)\n                    return dict['subjection']\n            }\n        }\n\n        return false\n    }\n\n    protected getToolbarButtons() {\n        var self = this\n        var buttons = super.getToolbarButtons();\n        var Linkx = document.createElement('style')\n        Linkx.textContent =\n            `\n            .hidden {\n            display: none;\n            }\n            `\n        document.head.appendChild(Linkx)\n        buttons.push(\n            {\n                title: \"Approve Application\",\t// *** Get button text from translation\n                cssClass: 'text-bg-success p-2 hidden',\n                icon: 'fa-check text-green',\n                onClick: () => {\n                    confirm(\"Do you want to approve this leave application?\", () => {\n                        if (Authorization.userDefinition.Permissions[PermissionKeys.HumanResources])//is HR\n                        {\n                            if (self.SuperiorPermission == true) {\n                                if (self.EmployeeApproval == MoneyClaimingStatus.NotNeeded || self.HrApproval == MoneyClaimingStatus.NotNeeded) {\n                                    if (self.EmployeeApproval == MoneyClaimingStatus.NotNeeded) {\n                                        MoneyClaimApplicationService.Update({\n                                            EntityId: this.entityId,\n                                            Entity:\n                                            {\n                                                HrStatus: MoneyClaimingStatus.Approved,\n                                                HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                            }\n                                        });\n                                    }\n                                    else if (self.HrApproval == MoneyClaimingStatus.NotNeeded) {\n                                        MoneyClaimApplicationService.Update({\n                                            EntityId: this.entityId,\n                                            Entity:\n                                            {\n                                                EmployeeStatus: MoneyClaimingStatus.Approved,\n                                                EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                            }\n                                        });\n                                    }\n                                }\n                                else {\n                                    if (self.HrApproval == MoneyClaimingStatus.Approved) {\n                                        MoneyClaimApplicationService.Update({\n                                            EntityId: this.entityId,\n                                            Entity:\n                                            {\n                                                EmployeeStatus: MoneyClaimingStatus.Approved,\n                                                EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                            }\n                                        });\n                                    }\n                                    else if (self.EmployeeApproval == MoneyClaimingStatus.Approved) {\n                                        MoneyClaimApplicationService.Update({\n                                            EntityId: this.entityId,\n                                            Entity:\n                                            {\n                                                HrStatus: MoneyClaimingStatus.Approved,\n                                                HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                            }\n                                        });\n                                    }\n                                    else {\n                                        MoneyClaimApplicationService.Update({\n                                            EntityId: this.entityId,\n                                            Entity:\n                                            {\n                                                EmployeeStatus: MoneyClaimingStatus.Approved,\n                                                HrStatus: MoneyClaimingStatus.Approved,\n                                                EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                HrUpdated: Authorization.userDefinition.EmployeeRowID\n                                            }\n                                        });\n                                    }\n                                }\n                            }\n                            else {\n                                MoneyClaimApplicationService.Update({\n                                    EntityId: this.entityId,\n                                    Entity:\n                                    {\n                                        HrStatus: MoneyClaimingStatus.Approved,\n                                        HrUpdated: Authorization.userDefinition.EmployeeRowID\n                                    }\n                                });\n                            }\n                        }\n                        else {\n                            MoneyClaimApplicationService.Update({\n                                EntityId: this.entityId,\n                                Entity:\n                                {\n                                    EmployeeStatus: MoneyClaimingStatus.Approved,\n                                    EmployeeUpdated: Authorization.userDefinition.EmployeeRowID\n                                }\n                            });\n                        }\n                        location.reload()\n                    });\n                },\n            }\n        );\n        buttons.push(\n            {\n                title: \"Rejected Application\",\t// *** Get button text from translation\n                cssClass: 'text-bg-danger p-2 hidden',\n                icon: 'fa-times text-red',\n                onClick: () => {\n                    confirm(\"Do you want to reject this Money Claiming application?\", () => {\n                        if (Authorization.userDefinition.Permissions[PermissionKeys.HumanResources])//is HR\n                        {\n                            if (self.SuperiorPermission == true) {\n                                if (self.EmployeeApproval == MoneyClaimingStatus.NotNeeded || self.HrApproval == MoneyClaimingStatus.NotNeeded) {\n                                    if (self.EmployeeApproval == MoneyClaimingStatus.NotNeeded) {\n                                        MoneyClaimApplicationService.Update({\n                                            EntityId: this.entityId,\n                                            Entity:\n                                            {\n                                                HrStatus: MoneyClaimingStatus.Rejected,\n                                                HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                            }\n                                        });\n                                    }\n                                    else if (self.HrApproval == MoneyClaimingStatus.NotNeeded) {\n                                        MoneyClaimApplicationService.Update({\n                                            EntityId: this.entityId,\n                                            Entity:\n                                            {\n                                                EmployeeStatus: MoneyClaimingStatus.Rejected,\n                                                EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                            }\n                                        });\n                                    }\n                                }\n                                else {\n                                    if (self.HrApproval == MoneyClaimingStatus.Pending ) {\n                                        MoneyClaimApplicationService.Update({\n                                            EntityId: this.entityId,\n                                            Entity:\n                                            {\n                                                HrStatus: MoneyClaimingStatus.Rejected,\n                                                HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                            }\n                                        });\n                                    }\n                                    else if (self.EmployeeApproval == MoneyClaimingStatus.Pending) {\n                                        MoneyClaimApplicationService.Update({\n                                            EntityId: this.entityId,\n                                            Entity:\n                                            {\n                                                EmployeeStatus: MoneyClaimingStatus.Rejected,\n                                                EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                            }\n                                        });\n                                    }\n                                    else  {\n                                        MoneyClaimApplicationService.Update({\n                                            EntityId: this.entityId,\n                                            Entity:\n                                            {\n                                                EmployeeStatus: MoneyClaimingStatus.Rejected,\n                                                EmployeeUpdated: Authorization.userDefinition.EmployeeRowID,\n                                                HrStatus: MoneyClaimingStatus.Rejected,\n                                                HrUpdated: Authorization.userDefinition.EmployeeRowID,\n                                            }\n                                        });\n                                    }\n                                }\n                            }\n                            else {\n                                MoneyClaimApplicationService.Update({\n                                    EntityId: this.entityId,\n                                    Entity:\n                                    {\n                                        HrStatus: MoneyClaimingStatus.Rejected,\n                                        HrUpdated: Authorization.userDefinition.EmployeeRowID\n                                    }\n                                });\n                            }\n                        }\n                        else {\n                            MoneyClaimApplicationService.Update({\n                                EntityId: this.entityId,\n                                Entity:\n                                {\n                                    EmployeeStatus: MoneyClaimingStatus.Rejected,\n                                    EmployeeUpdated: Authorization.userDefinition.EmployeeRowID\n                                }\n                            });\n                        }\n                        location.reload()\n                    });\n                },\n            }\n        );\n        return buttons;\n    }\n}", "import { Decorators } from '@serenity-is/corelib';\nimport { GridEditorBase } from \"@serenity-is/extensions\";\nimport { PayslipPaidOneTimeAllowanceColumns, PayslipPaidOneTimeAllowanceRow, PayslipPaidOneTimeAllowanceService } from '../../../ServerTypes/PayrollSettings';\n\n@Decorators.registerEditor('HRMSoftware.PayrollSettings.PayslipPaidOneTimeAllowance')\nexport class PayslipPaidOneTimeAllowance extends GridEditorBase<PayslipPaidOneTimeAllowanceRow, any> {\n    protected getColumnsKey() { return PayslipPaidOneTimeAllowanceColumns.columnsKey; }\n    protected getRowDefinition() { return PayslipPaidOneTimeAllowanceRow; }\n    protected getService() { return PayslipPaidOneTimeAllowanceService.baseUrl; }\n\n }", "import { Decorators } from '@serenity-is/corelib';\nimport { GridEditorBase } from \"@serenity-is/extensions\";\nimport { PayslipDeductedOneTimeDeductionsColumns, PayslipDeductedOneTimeDeductionsRow, PayslipDeductedOneTimeDeductionsService } from '../../../ServerTypes/PayrollSettings';\n\n@Decorators.registerEditor('HRMSoftware.PayrollSettings.PayslipDeductedOneTimeDeductions')\nexport class PayslipDeductedOneTimeDeductions extends GridEditorBase<PayslipDeductedOneTimeDeductionsRow, any> {\n    protected getColumnsKey() { return PayslipDeductedOneTimeDeductionsColumns.columnsKey; }\n    protected getRowDefinition() { return PayslipDeductedOneTimeDeductionsRow; }\n    protected getService() { return PayslipDeductedOneTimeDeductionsService.baseUrl; }\n\n }", "import { Decorators } from '@serenity-is/corelib';\nimport { GridEditorBase } from \"@serenity-is/extensions\";\nimport { PayrollDeductionsColumns, PayrollDeductionsRow } from '../../../ServerTypes/PayrollSettings';\nimport { PayrollDeductionsEditDialog } from './PayrollDeductionsEditDialog';\n@Decorators.registerEditor('HRMSoftware.PayrollSettings.PayrollDeductionsEditor')\nexport class PayrollDeductionsEditor extends GridEditorBase<PayrollDeductionsRow> {\n    protected getColumnsKey() { return PayrollDeductionsColumns.columnsKey; }\n    protected getDialogType() { return PayrollDeductionsEditDialog; }\n    protected getLocalTextPrefix() { return PayrollDeductionsRow.localTextPrefix; }\n    protected getAddButtonCaption() {\n        \n        return \"Add\";\n    }\n    validateEntity(row, id) {\n        return true;\n    }\n}", "import { Decorators, EntityDialog } from '@serenity-is/corelib';\nimport { GridEditorDialog } from \"@serenity-is/extensions\";\nimport { PayrollDeductionsForm, PayrollDeductionsRow, PayrollDeductionsService } from '../../../ServerTypes/PayrollSettings';\n@Decorators.registerClass('HRMSoftware.PayrollSettings.PayrollDeductionsEditDialog')\nexport class PayrollDeductionsEditDialog extends GridEditorDialog<PayrollDeductionsRow> {\n    protected getFormKey() { return PayrollDeductionsForm.formKey; }\n    protected getRowDefinition() { return PayrollDeductionsRow; }\n    protected getService() { return PayrollDeductionsService.baseUrl; }\n    protected getLocalTextPrefix() { return PayrollDeductionsRow.localTextPrefix; }\n    protected getNameProperty() { return PayrollDeductionsRow.nameProperty; }\n    protected form: PayrollDeductionsForm = new PayrollDeductionsForm(this.idPrefix);\n    constructor() {\n        super();\n        this.form = new PayrollDeductionsForm(this.idPrefix);\n\n    }\n}", "\uFEFFexport class PayrollGeneratingWizardColumns {\n    static columnsKey = 'PayrollSettings.PayrollGeneratingWizard';\n}", "\uFEFFimport { IntegerEditor, DateEditor, LookupEditor, BooleanEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface PayrollGeneratingWizardForm {\n    PayMonth: IntegerEditor;\n    PayYear: IntegerEditor;\n    PayDate: DateEditor;\n    PayPeriodStart: DateEditor;\n    PayPeriodEnd: DateEditor;\n    OccupationList: LookupEditor;\n    DepartmentList: LookupEditor;\n    DivisionList: LookupEditor;\n    JobGradeList: LookupEditor;\n    SectionList: LookupEditor;\n    EmployeeRowListBuffer: LookupEditor;\n    EmployeeRowList: LookupEditor;\n    Download: BooleanEditor;\n}\n\nexport class PayrollGeneratingWizardForm extends PrefixedContext {\n    static formKey = 'PayrollSettings.PayrollGeneratingWizard';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!PayrollGeneratingWizardForm.init)  {\n            PayrollGeneratingWizardForm.init = true;\n\n            var w0 = IntegerEditor;\n            var w1 = DateEditor;\n            var w2 = LookupEditor;\n            var w3 = BooleanEditor;\n\n            initFormType(PayrollGeneratingWizardForm, [\n                'PayMonth', w0,\n                'PayYear', w0,\n                'PayDate', w1,\n                'PayPeriodStart', w1,\n                'PayPeriodEnd', w1,\n                'OccupationList', w2,\n                'DepartmentList', w2,\n                'DivisionList', w2,\n                'JobGradeList', w2,\n                'SectionList', w2,\n                'EmployeeRowListBuffer', w2,\n                'EmployeeRowList', w2,\n                'Download', w3\n            ]);\n        }\n    }\n}", "\uFEFFimport { TextClass } from \"./TextClass\";\nimport { TextFormatEisSocso } from \"./TextFormatEisSocso\";\nimport { TextFormatEpf } from \"./TextFormatEpf\";\nimport { TextFormatAutopay } from \"./TextFormatAutopay\";\nimport { TextFormatLHDN } from \"./TextFormatLHDN\";\nimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface PayrollGeneratingWizardRow {\n    StateCodeId?: number;\n    Email?: string;\n    PhoneNumber?: string;\n    ContactPerson?: string;\n    OrganisationName?: string;\n    OrganisationCode?: string;\n    CreditingDate?: string;\n    TextType?: TextClass;\n    TextFormatEisSocsoId?: TextFormatEisSocso;\n    TextFormatEpfId?: TextFormatEpf;\n    TextFormatAutopayId?: TextFormatAutopay;\n    TextFormatLhdnId?: TextFormatLHDN;\n    PayMonth?: number;\n    PayYear?: number;\n    Download?: boolean;\n    EmployeeRowListBuffer?: number[];\n    EmployeeRowList?: number[];\n    OccupationList?: number[];\n    DepartmentList?: number[];\n    DivisionList?: number[];\n    JobGradeList?: number[];\n    SectionList?: number[];\n    PayslipList?: string;\n    CompanyRegistrationNumber?: string;\n    All?: boolean;\n    Id?: number;\n    EmployeeRowId?: number;\n    EmployeeId?: string;\n    PayDate?: string;\n    Deduction?: number;\n    Earnings?: number;\n    Nett?: number;\n    EmployeeName?: string;\n    EmployeeSocso?: number;\n    EmployeeEpf?: number;\n    EmployeeEis?: number;\n    PayrollTable?: string;\n    Remarks?: string;\n    EmployeePcb?: number;\n    EmployerHrdf?: number;\n    EmployerEpf?: number;\n    EmployerEis?: number;\n    EmployerSocso?: number;\n    EmployerTable?: string;\n    PayPeriodStart?: string;\n    PayPeriodEnd?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class PayrollGeneratingWizardRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'EmployeeId';\n    static readonly localTextPrefix = 'PayrollSettings.PayrollGeneratingWizard';\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = 'Administration:HumanResources';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<PayrollGeneratingWizardRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { PayrollGeneratingWizardRow } from \"./PayrollGeneratingWizardRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace PayrollGeneratingWizardService {\n    export const baseUrl = 'PayrollSettings/PayrollGeneratingWizard';\n\n    export declare function Create(request: SaveRequest<PayrollGeneratingWizardRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<PayrollGeneratingWizardRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<PayrollGeneratingWizardRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<PayrollGeneratingWizardRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PayrollSettings/PayrollGeneratingWizard/Create\",\n        Update: \"PayrollSettings/PayrollGeneratingWizard/Update\",\n        Delete: \"PayrollSettings/PayrollGeneratingWizard/Delete\",\n        Retrieve: \"PayrollSettings/PayrollGeneratingWizard/Retrieve\",\n        List: \"PayrollSettings/PayrollGeneratingWizard/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>PayrollGeneratingWizardService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { MaritalStatus } from \"../EmployeeProfile/MaritalStatus\";\nimport { HRDFClass } from \"../EmployeeProfile/HRDFClass\";\nimport { EPFClass } from \"../EmployeeProfile/EPFClass\";\nimport { SOCSOClass } from \"../EmployeeProfile/SOCSOClass\";\nimport { EISClass } from \"../EmployeeProfile/EISClass\";\nimport { PayrollEarningsRow } from \"./PayrollEarningsRow\";\nimport { PayrollDeductionsRow } from \"./PayrollDeductionsRow\";\nimport { PayslipDeductedOneTimeDeductionsRow } from \"./PayslipDeductedOneTimeDeductionsRow\";\nimport { PayslipPaidOneTimeAllowanceRow } from \"./PayslipPaidOneTimeAllowanceRow\";\nimport { PayslipPaidMoneyClaimingRow } from \"./PayslipPaidMoneyClaimingRow\";\nimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface PayrollRow {\n    BonusSubjectEpf?: boolean;\n    BonusSubjectEis?: boolean;\n    BonusSubjectPcb?: boolean;\n    BonusSubjectSocso?: boolean;\n    BonusSubjectHrdf?: boolean;\n    IncentiveSubjectEpf?: boolean;\n    IncentiveSubjectEis?: boolean;\n    IncentiveSubjectPcb?: boolean;\n    IncentiveSubjectSocso?: boolean;\n    IncentiveSubjectHrdf?: boolean;\n    Bonus?: number;\n    Incentive?: number;\n    EmployeeCp38?: number;\n    SeperateBonus?: boolean;\n    SeperateIncentive?: boolean;\n    AnnualizedIncentive?: boolean;\n    AnnualizedBonus?: boolean;\n    EpfWages?: number;\n    SocsoWages?: number;\n    EisWages?: number;\n    PcbWages?: number;\n    HrdfWages?: number;\n    CompanyRegistrationNumber?: string;\n    SocsoAccountNumber?: string;\n    BankAccountNumber?: string;\n    EPFAccountNumber?: string;\n    PCBnumber?: string;\n    NRIC?: string;\n    OldNRIC?: string;\n    PassportNumber?: string;\n    CountryCode?: string;\n    CompanySocsoAccountNumber?: string;\n    CompanyBankAccountNumber?: string;\n    CompanyEPFAccountNumber?: string;\n    CompanyIncomeTaxAccountNumber?: string;\n    NPLHourlyRate?: number;\n    NPLDailyRate?: number;\n    NPLHourly?: number;\n    NPLDaily?: number;\n    AbsentDaily?: number;\n    AbsentDailyRate?: number;\n    EarlyLeavingRate?: number;\n    LateArrivalRate?: number;\n    EarlyLeaving?: number;\n    LateArrival?: number;\n    FlatOt?: number;\n    OtOne?: number;\n    OtOnePointFive?: number;\n    OtTwo?: number;\n    ChildrenUnderEighteen?: number;\n    ChildrenInUniversity?: number;\n    DisabledChildInUniversity?: number;\n    DisabledChild?: number;\n    WorkingSpouse?: boolean;\n    MaritalStatus?: MaritalStatus;\n    OtSubjectEpf?: boolean;\n    OtSubjectEis?: boolean;\n    OtSubjectPcb?: boolean;\n    OtSubjectSocso?: boolean;\n    OtSubjectHrdf?: boolean;\n    HrdfClass?: HRDFClass;\n    EpfClass?: EPFClass;\n    SocsoClass?: SOCSOClass;\n    EisClass?: EISClass;\n    TaxClass?: number;\n    DaysWorked?: number;\n    DailyRate?: number;\n    HourlyRate?: number;\n    PayrollEarnings?: PayrollEarningsRow[];\n    PayrollDeductions?: PayrollDeductionsRow[];\n    DeductionList?: PayslipDeductedOneTimeDeductionsRow[];\n    AllowanceList?: PayslipPaidOneTimeAllowanceRow[];\n    PaidMoneyClaimingList?: PayslipPaidMoneyClaimingRow[];\n    BasicPay?: number;\n    SocsoAllowance?: number;\n    EisAllowance?: number;\n    EpfAllowance?: number;\n    HrdfAllowance?: number;\n    PcbAllowance?: number;\n    Id?: number;\n    PayMonth?: number;\n    PayYear?: number;\n    CostCentreID?: number;\n    CostCentreName?: string;\n    DepartmentID?: number;\n    DepartmentName?: string;\n    DivisionID?: number;\n    DivisionName?: string;\n    OccupationID?: number;\n    OccupationName?: string;\n    JobGradeID?: number;\n    JobGradeName?: string;\n    SectionID?: number;\n    SectionName?: string;\n    PayslipPath?: string;\n    EmployeeRowId?: number;\n    EmployeeName?: string;\n    EmployeeId?: string;\n    PayrollTable?: string;\n    BirthDay?: string;\n    Age?: number;\n    PayDate?: string;\n    PayPeriodStart?: string;\n    PayPeriodEnd?: string;\n    Deduction?: number;\n    Earnings?: number;\n    Nett?: number;\n    EmployeeEPF?: number;\n    EmployeeEIS?: number;\n    EmployeeSOCSO?: number;\n    EmployeePCB?: number;\n    EmployerHRDF?: number;\n    EmployerEPF?: number;\n    EmployerEIS?: number;\n    EmployerSOCSO?: number;\n    NumberOfWorkingDays?: number;\n    OtOnePointFiveRate?: number;\n    OtTwoRate?: number;\n    Remarks?: string;\n    EmployerTable?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class PayrollRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'PayMonth';\n    static readonly localTextPrefix = 'PayrollSettings.Payroll';\n    static readonly lookupKey = 'Payroll.Payroll';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<PayrollRow>('Payroll.Payroll') }\n    static async getLookupAsync() { return getLookupAsync<PayrollRow>('Payroll.Payroll') }\n\n    static readonly deletePermission = '*';\n    static readonly insertPermission = '*';\n    static readonly readPermission = '*';\n    static readonly updatePermission = '*';\n\n    static readonly Fields = fieldsProxy<PayrollRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { PayrollRow } from \"./PayrollRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace PayrollService {\n    export const baseUrl = 'PayrollSettings/Payroll';\n\n    export declare function Create(request: SaveRequest<PayrollRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<PayrollRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<PayrollRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<PayrollRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function AskGenerationOfPayslip(request: ListRequest, onSuccess?: (response: number[]) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function CalculateAllowance(request: number, onSuccess?: (response: ListResponse<PayrollRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PayrollSettings/Payroll/Create\",\n        Update: \"PayrollSettings/Payroll/Update\",\n        Delete: \"PayrollSettings/Payroll/Delete\",\n        Retrieve: \"PayrollSettings/Payroll/Retrieve\",\n        List: \"PayrollSettings/Payroll/List\",\n        AskGenerationOfPayslip: \"PayrollSettings/Payroll/AskGenerationOfPayslip\",\n        CalculateAllowance: \"PayrollSettings/Payroll/CalculateAllowance\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List', \n        'AskGenerationOfPayslip', \n        'CalculateAllowance'\n    ].forEach(x => {\n        (<any>PayrollService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFexport class PayrollSettingsColumns {\n    static columnsKey = 'PayrollSettings.PayrollSettings';\n}", "\uFEFFimport { BooleanEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface PayrollSettingsForm {\n    SeperateBonus: BooleanEditor;\n    AnnualizedBonus: BooleanEditor;\n    SeperateIncentive: BooleanEditor;\n    AnnualizedIncentive: BooleanEditor;\n    BonusSubjectEpf: BooleanEditor;\n    BonusSubjectSocso: BooleanEditor;\n    BonusSubjectEis: BooleanEditor;\n    BonusSubjectHrdf: BooleanEditor;\n    BonusSubjectPcb: BooleanEditor;\n    IncentiveSubjectEpf: BooleanEditor;\n    IncentiveSubjectSocso: BooleanEditor;\n    IncentiveSubjectEis: BooleanEditor;\n    IncentiveSubjectHrdf: BooleanEditor;\n    IncentiveSubjectPcb: BooleanEditor;\n}\n\nexport class PayrollSettingsForm extends PrefixedContext {\n    static formKey = 'PayrollSettings.PayrollSettings';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!PayrollSettingsForm.init)  {\n            PayrollSettingsForm.init = true;\n\n            var w0 = BooleanEditor;\n\n            initFormType(PayrollSettingsForm, [\n                'SeperateBonus', w0,\n                'AnnualizedBonus', w0,\n                'SeperateIncentive', w0,\n                'AnnualizedIncentive', w0,\n                'BonusSubjectEpf', w0,\n                'BonusSubjectSocso', w0,\n                'BonusSubjectEis', w0,\n                'BonusSubjectHrdf', w0,\n                'BonusSubjectPcb', w0,\n                'IncentiveSubjectEpf', w0,\n                'IncentiveSubjectSocso', w0,\n                'IncentiveSubjectEis', w0,\n                'IncentiveSubjectHrdf', w0,\n                'IncentiveSubjectPcb', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface PayrollSettingsRow {\n    Email?: string;\n    PhoneNumber?: string;\n    ContactPerson?: string;\n    OrganisationName?: string;\n    OrganisationCode?: string;\n    CreditingDay?: number;\n    StateCodeId?: number;\n    TextFormatId?: number;\n    Id?: number;\n    EffectiveFrom?: string;\n    EffectiveUntil?: string;\n    SeperateBonus?: boolean;\n    SeperateIncentive?: boolean;\n    AnnualizedBonus?: boolean;\n    AnnualizedIncentive?: boolean;\n    BonusSubjectEpf?: boolean;\n    BonusSubjectSocso?: boolean;\n    BonusSubjectEis?: boolean;\n    BonusSubjectHrdf?: boolean;\n    BonusSubjectPcb?: boolean;\n    IncentiveSubjectEpf?: boolean;\n    IncentiveSubjectSocso?: boolean;\n    IncentiveSubjectEis?: boolean;\n    IncentiveSubjectHrdf?: boolean;\n    IncentiveSubjectPcb?: boolean;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class PayrollSettingsRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly localTextPrefix = 'PayrollSettings.PayrollSettings';\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = 'Administration:HumanResources';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<PayrollSettingsRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { PayrollSettingsRow } from \"./PayrollSettingsRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace PayrollSettingsService {\n    export const baseUrl = 'PayrollSettings/PayrollSettings';\n\n    export declare function Create(request: SaveRequest<PayrollSettingsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<PayrollSettingsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<PayrollSettingsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<PayrollSettingsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PayrollSettings/PayrollSettings/Create\",\n        Update: \"PayrollSettings/PayrollSettings/Update\",\n        Delete: \"PayrollSettings/PayrollSettings/Delete\",\n        Retrieve: \"PayrollSettings/PayrollSettings/Retrieve\",\n        List: \"PayrollSettings/PayrollSettings/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>PayrollSettingsService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFexport class PayrollWizardColumns {\n    static columnsKey = 'PayrollSettings.PayrollWizard';\n}", "\uFEFFimport { StringEditor, LookupEditor, MultipleImageUploadEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface PayrollWizardForm {\n    PayMonth: StringEditor;\n    OccupationList: LookupEditor;\n    DepartmentList: LookupEditor;\n    DivisionList: LookupEditor;\n    JobGradeList: LookupEditor;\n    SectionList: LookupEditor;\n    EmployeeRowList: LookupEditor;\n    EmployeeRowListBuffer: LookupEditor;\n    PayslipList: MultipleImageUploadEditor;\n}\n\nexport class PayrollWizardForm extends PrefixedContext {\n    static formKey = 'PayrollSettings.PayrollWizard';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!PayrollWizardForm.init)  {\n            PayrollWizardForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = LookupEditor;\n            var w2 = MultipleImageUploadEditor;\n\n            initFormType(PayrollWizardForm, [\n                'PayMonth', w0,\n                'OccupationList', w1,\n                'DepartmentList', w1,\n                'DivisionList', w1,\n                'JobGradeList', w1,\n                'SectionList', w1,\n                'EmployeeRowList', w1,\n                'EmployeeRowListBuffer', w1,\n                'PayslipList', w2\n            ]);\n        }\n    }\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface PayrollWizardRow {\n    EmployeeName?: string;\n    EmployeeRowList?: number[];\n    EmployeeRowListBuffer?: number[];\n    SectionList?: number[];\n    OccupationList?: number[];\n    DepartmentList?: number[];\n    DivisionList?: number[];\n    JobGradeList?: number[];\n    PayslipList?: string;\n    PayMonth?: string;\n    Id?: number;\n    EmployeeRowId?: number;\n    EmployeeId?: string;\n    PayDate?: string;\n    Deduction?: number;\n    Earnings?: number;\n    Nett?: number;\n    EmployeeSocso?: number;\n    EmployeeEpf?: number;\n    EmployeeEis?: number;\n    PayrollTable?: string;\n    Remarks?: string;\n    EmployeePcb?: number;\n    EmployerHrdf?: number;\n    EmployerEpf?: number;\n    EmployerEis?: number;\n    EmployerSocso?: number;\n    EmployerTable?: string;\n    PayPeriodStart?: string;\n    PayPeriodEnd?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class PayrollWizardRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'EmployeeId';\n    static readonly localTextPrefix = 'PayrollSettings.PayrollWizard';\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = 'Administration:HumanResources';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<PayrollWizardRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { PayrollWizardRow } from \"./PayrollWizardRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace PayrollWizardService {\n    export const baseUrl = 'PayrollSettings/PayrollWizard';\n\n    export declare function Create(request: SaveRequest<PayrollWizardRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<PayrollWizardRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<PayrollWizardRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<PayrollWizardRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PayrollSettings/PayrollWizard/Create\",\n        Update: \"PayrollSettings/PayrollWizard/Update\",\n        Delete: \"PayrollSettings/PayrollWizard/Delete\",\n        Retrieve: \"PayrollSettings/PayrollWizard/Retrieve\",\n        List: \"PayrollSettings/PayrollWizard/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>PayrollWizardService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFexport class PayslipDeductedOneTimeDeductionsColumns {\n    static columnsKey = 'PayrollSettings.PayslipDeductedOneTimeDeductions';\n}", "\uFEFFimport { IntegerEditor, DateEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface PayslipDeductedOneTimeDeductionsForm {\n    DeductionId: IntegerEditor;\n    PayslipId: IntegerEditor;\n    IsActive: IntegerEditor;\n    InsertDate: DateEditor;\n    UpdateDate: DateEditor;\n    DeleteDate: DateEditor;\n    InsertUserId: IntegerEditor;\n    UpdateUserId: IntegerEditor;\n    DeleteUserId: IntegerEditor;\n}\n\nexport class PayslipDeductedOneTimeDeductionsForm extends PrefixedContext {\n    static formKey = 'PayrollSettings.PayslipDeductedOneTimeDeductions';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!PayslipDeductedOneTimeDeductionsForm.init)  {\n            PayslipDeductedOneTimeDeductionsForm.init = true;\n\n            var w0 = IntegerEditor;\n            var w1 = DateEditor;\n\n            initFormType(PayslipDeductedOneTimeDeductionsForm, [\n                'DeductionId', w0,\n                'PayslipId', w0,\n                'IsActive', w0,\n                'InsertDate', w1,\n                'UpdateDate', w1,\n                'DeleteDate', w1,\n                'InsertUserId', w0,\n                'UpdateUserId', w0,\n                'DeleteUserId', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface PayslipDeductedOneTimeDeductionsRow {\n    DeductionAmount?: number;\n    Description?: string;\n    code?: string;\n    Id?: number;\n    DeductionId?: number;\n    PayslipId?: number;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class PayslipDeductedOneTimeDeductionsRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly localTextPrefix = 'PayrollSettings.PayslipDeductedOneTimeDeductions';\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = 'Administration:HumanResources';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<PayslipDeductedOneTimeDeductionsRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { PayslipDeductedOneTimeDeductionsRow } from \"./PayslipDeductedOneTimeDeductionsRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace PayslipDeductedOneTimeDeductionsService {\n    export const baseUrl = 'PayrollSettings/PayslipDeductedOneTimeDeductions';\n\n    export declare function Create(request: SaveRequest<PayslipDeductedOneTimeDeductionsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<PayslipDeductedOneTimeDeductionsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<PayslipDeductedOneTimeDeductionsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<PayslipDeductedOneTimeDeductionsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PayrollSettings/PayslipDeductedOneTimeDeductions/Create\",\n        Update: \"PayrollSettings/PayslipDeductedOneTimeDeductions/Update\",\n        Delete: \"PayrollSettings/PayslipDeductedOneTimeDeductions/Delete\",\n        Retrieve: \"PayrollSettings/PayslipDeductedOneTimeDeductions/Retrieve\",\n        List: \"PayrollSettings/PayslipDeductedOneTimeDeductions/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>PayslipDeductedOneTimeDeductionsService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFexport class PayslipPaidMoneyClaimingColumns {\n    static columnsKey = 'PayrollSettings.PayslipPaidMoneyClaiming';\n}", "\uFEFFimport { IntegerEditor, DateEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface PayslipPaidMoneyClaimingForm {\n    PayslipId: IntegerEditor;\n    MoneyClaimingId: IntegerEditor;\n    IsActive: IntegerEditor;\n    InsertDate: DateEditor;\n    UpdateDate: DateEditor;\n    DeleteDate: DateEditor;\n    InsertUserId: IntegerEditor;\n    UpdateUserId: IntegerEditor;\n    DeleteUserId: IntegerEditor;\n}\n\nexport class PayslipPaidMoneyClaimingForm extends PrefixedContext {\n    static formKey = 'PayrollSettings.PayslipPaidMoneyClaiming';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!PayslipPaidMoneyClaimingForm.init)  {\n            PayslipPaidMoneyClaimingForm.init = true;\n\n            var w0 = IntegerEditor;\n            var w1 = DateEditor;\n\n            initFormType(PayslipPaidMoneyClaimingForm, [\n                'PayslipId', w0,\n                'MoneyClaimingId', w0,\n                'IsActive', w0,\n                'InsertDate', w1,\n                'UpdateDate', w1,\n                'DeleteDate', w1,\n                'InsertUserId', w0,\n                'UpdateUserId', w0,\n                'DeleteUserId', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface PayslipPaidMoneyClaimingRow {\n    ClaimingCategory?: string;\n    ClaimAmount?: number;\n    Description?: string;\n    SubjectionEis?: boolean;\n    SubjectionEpf?: boolean;\n    SubjectionHrdf?: boolean;\n    SubjectionSocso?: boolean;\n    SubjectionPcb?: boolean;\n    PayslipId?: number;\n    Id?: number;\n    MoneyClaimingId?: number;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class PayslipPaidMoneyClaimingRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly localTextPrefix = 'PayrollSettings.PayslipPaidMoneyClaiming';\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = 'Administration:HumanResources';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<PayslipPaidMoneyClaimingRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { PayslipPaidMoneyClaimingRow } from \"./PayslipPaidMoneyClaimingRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace PayslipPaidMoneyClaimingService {\n    export const baseUrl = 'PayrollSettings/PayslipPaidMoneyClaiming';\n\n    export declare function Create(request: SaveRequest<PayslipPaidMoneyClaimingRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<PayslipPaidMoneyClaimingRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<PayslipPaidMoneyClaimingRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<PayslipPaidMoneyClaimingRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PayrollSettings/PayslipPaidMoneyClaiming/Create\",\n        Update: \"PayrollSettings/PayslipPaidMoneyClaiming/Update\",\n        Delete: \"PayrollSettings/PayslipPaidMoneyClaiming/Delete\",\n        Retrieve: \"PayrollSettings/PayslipPaidMoneyClaiming/Retrieve\",\n        List: \"PayrollSettings/PayslipPaidMoneyClaiming/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>PayslipPaidMoneyClaimingService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFexport class PayslipPaidOneTimeAllowanceColumns {\n    static columnsKey = 'PayrollSettings.PayslipPaidOneTimeAllowance';\n}", "\uFEFFimport { IntegerEditor, DateEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface PayslipPaidOneTimeAllowanceForm {\n    AllowanceId: IntegerEditor;\n    PayslipId: IntegerEditor;\n    IsActive: IntegerEditor;\n    InsertDate: DateEditor;\n    UpdateDate: DateEditor;\n    DeleteDate: DateEditor;\n    InsertUserId: IntegerEditor;\n    UpdateUserId: IntegerEditor;\n    DeleteUserId: IntegerEditor;\n}\n\nexport class PayslipPaidOneTimeAllowanceForm extends PrefixedContext {\n    static formKey = 'PayrollSettings.PayslipPaidOneTimeAllowance';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!PayslipPaidOneTimeAllowanceForm.init)  {\n            PayslipPaidOneTimeAllowanceForm.init = true;\n\n            var w0 = IntegerEditor;\n            var w1 = DateEditor;\n\n            initFormType(PayslipPaidOneTimeAllowanceForm, [\n                'AllowanceId', w0,\n                'PayslipId', w0,\n                'IsActive', w0,\n                'InsertDate', w1,\n                'UpdateDate', w1,\n                'DeleteDate', w1,\n                'InsertUserId', w0,\n                'UpdateUserId', w0,\n                'DeleteUserId', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface PayslipPaidOneTimeAllowanceRow {\n    code?: string;\n    AllowanceAmount?: number;\n    Description?: string;\n    SubjectionEis?: boolean;\n    SubjectionEpf?: boolean;\n    SubjectionHrdf?: boolean;\n    SubjectionSocso?: boolean;\n    SubjectionPcb?: boolean;\n    Id?: number;\n    AllowanceId?: number;\n    PayslipId?: number;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class PayslipPaidOneTimeAllowanceRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly localTextPrefix = 'PayrollSettings.PayslipPaidOneTimeAllowance';\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = 'Administration:HumanResources';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<PayslipPaidOneTimeAllowanceRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { PayslipPaidOneTimeAllowanceRow } from \"./PayslipPaidOneTimeAllowanceRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace PayslipPaidOneTimeAllowanceService {\n    export const baseUrl = 'PayrollSettings/PayslipPaidOneTimeAllowance';\n\n    export declare function Create(request: SaveRequest<PayslipPaidOneTimeAllowanceRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<PayslipPaidOneTimeAllowanceRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<PayslipPaidOneTimeAllowanceRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<PayslipPaidOneTimeAllowanceRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PayrollSettings/PayslipPaidOneTimeAllowance/Create\",\n        Update: \"PayrollSettings/PayslipPaidOneTimeAllowance/Update\",\n        Delete: \"PayrollSettings/PayslipPaidOneTimeAllowance/Delete\",\n        Retrieve: \"PayrollSettings/PayslipPaidOneTimeAllowance/Retrieve\",\n        List: \"PayrollSettings/PayslipPaidOneTimeAllowance/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>PayslipPaidOneTimeAllowanceService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFexport class PcbSubjectionColumns {\n    static columnsKey = 'PayrollSettings.PcbSubjection';\n}", "\uFEFFimport { BooleanEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface PcbSubjectionForm {\n    BasicSalary: BooleanEditor;\n    PaymentsForUnutilisedAnnualOrMedicalLeaves: BooleanEditor;\n    Bonuses: BooleanEditor;\n    Allowances: BooleanEditor;\n    Commisions: BooleanEditor;\n    Incentives: BooleanEditor;\n    ArrearsOfWages: BooleanEditor;\n    WagesForMaternityLeave: BooleanEditor;\n    WagesForPaternityLeave: BooleanEditor;\n    WagesForStudyLeave: BooleanEditor;\n    ServiceCharges: BooleanEditor;\n    OvertimePayments: BooleanEditor;\n    Gratuity: BooleanEditor;\n    RetirementBenefits: BooleanEditor;\n    TerminationBenefits: BooleanEditor;\n    TravelAllowances: BooleanEditor;\n    PaymentInLieuOfNoticeOfTerminationOfService: BooleanEditor;\n    DirectorFee: BooleanEditor;\n    Gifts: BooleanEditor;\n}\n\nexport class PcbSubjectionForm extends PrefixedContext {\n    static formKey = 'PayrollSettings.PcbSubjection';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!PcbSubjectionForm.init)  {\n            PcbSubjectionForm.init = true;\n\n            var w0 = BooleanEditor;\n\n            initFormType(PcbSubjectionForm, [\n                'BasicSalary', w0,\n                'PaymentsForUnutilisedAnnualOrMedicalLeaves', w0,\n                'Bonuses', w0,\n                'Allowances', w0,\n                'Commisions', w0,\n                'Incentives', w0,\n                'ArrearsOfWages', w0,\n                'WagesForMaternityLeave', w0,\n                'WagesForPaternityLeave', w0,\n                'WagesForStudyLeave', w0,\n                'ServiceCharges', w0,\n                'OvertimePayments', w0,\n                'Gratuity', w0,\n                'RetirementBenefits', w0,\n                'TerminationBenefits', w0,\n                'TravelAllowances', w0,\n                'PaymentInLieuOfNoticeOfTerminationOfService', w0,\n                'DirectorFee', w0,\n                'Gifts', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface PcbSubjectionRow {\n    Id?: number;\n    BasicSalary?: boolean;\n    PaymentsForUnutilisedAnnualOrMedicalLeaves?: boolean;\n    Bonuses?: boolean;\n    Allowances?: boolean;\n    Commisions?: boolean;\n    Incentives?: boolean;\n    ArrearsOfWages?: boolean;\n    WagesForMaternityLeave?: boolean;\n    WagesForPaternityLeave?: boolean;\n    WagesForStudyLeave?: boolean;\n    ServiceCharges?: boolean;\n    OvertimePayments?: boolean;\n    Gratuity?: boolean;\n    RetirementBenefits?: boolean;\n    TerminationBenefits?: boolean;\n    TravelAllowances?: boolean;\n    PaymentInLieuOfNoticeOfTerminationOfService?: boolean;\n    DirectorFee?: boolean;\n    Gifts?: boolean;\n    EffectiveSince?: string;\n    EffectiveUntil?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class PcbSubjectionRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly localTextPrefix = 'PayrollSettings.PcbSubjection';\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = '*';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<PcbSubjectionRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { PcbSubjectionRow } from \"./PcbSubjectionRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace PcbSubjectionService {\n    export const baseUrl = 'PayrollSettings/PcbSubjection';\n\n    export declare function Create(request: SaveRequest<PcbSubjectionRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<PcbSubjectionRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<PcbSubjectionRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<PcbSubjectionRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PayrollSettings/PcbSubjection/Create\",\n        Update: \"PayrollSettings/PcbSubjection/Update\",\n        Delete: \"PayrollSettings/PcbSubjection/Delete\",\n        Retrieve: \"PayrollSettings/PcbSubjection/Retrieve\",\n        List: \"PayrollSettings/PcbSubjection/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>PcbSubjectionService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFexport class SocsoSubjectionColumns {\n    static columnsKey = 'PayrollSettings.SocsoSubjection';\n}", "\uFEFFimport { BooleanEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface SocsoSubjectionForm {\n    BasicSalary: BooleanEditor;\n    PaymentsForUnutilisedAnnualOrMedicalLeaves: BooleanEditor;\n    Bonuses: BooleanEditor;\n    Allowances: BooleanEditor;\n    Commisions: BooleanEditor;\n    Incentives: BooleanEditor;\n    ArrearsOfWages: BooleanEditor;\n    WagesForMaternityLeave: BooleanEditor;\n    WagesForPaternityLeave: BooleanEditor;\n    WagesForStudyLeave: BooleanEditor;\n    ServiceCharges: BooleanEditor;\n    OvertimePayments: BooleanEditor;\n    Gratuity: BooleanEditor;\n    RetirementBenefits: BooleanEditor;\n    TerminationBenefits: BooleanEditor;\n    TravelAllowances: BooleanEditor;\n    PaymentInLieuOfNoticeOfTerminationOfService: BooleanEditor;\n    DirectorFee: BooleanEditor;\n    Gifts: BooleanEditor;\n}\n\nexport class SocsoSubjectionForm extends PrefixedContext {\n    static formKey = 'PayrollSettings.SocsoSubjection';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!SocsoSubjectionForm.init)  {\n            SocsoSubjectionForm.init = true;\n\n            var w0 = BooleanEditor;\n\n            initFormType(SocsoSubjectionForm, [\n                'BasicSalary', w0,\n                'PaymentsForUnutilisedAnnualOrMedicalLeaves', w0,\n                'Bonuses', w0,\n                'Allowances', w0,\n                'Commisions', w0,\n                'Incentives', w0,\n                'ArrearsOfWages', w0,\n                'WagesForMaternityLeave', w0,\n                'WagesForPaternityLeave', w0,\n                'WagesForStudyLeave', w0,\n                'ServiceCharges', w0,\n                'OvertimePayments', w0,\n                'Gratuity', w0,\n                'RetirementBenefits', w0,\n                'TerminationBenefits', w0,\n                'TravelAllowances', w0,\n                'PaymentInLieuOfNoticeOfTerminationOfService', w0,\n                'DirectorFee', w0,\n                'Gifts', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface SocsoSubjectionRow {\n    Id?: number;\n    BasicSalary?: boolean;\n    PaymentsForUnutilisedAnnualOrMedicalLeaves?: boolean;\n    Bonuses?: boolean;\n    Allowances?: boolean;\n    Commisions?: boolean;\n    Incentives?: boolean;\n    ArrearsOfWages?: boolean;\n    WagesForMaternityLeave?: boolean;\n    WagesForPaternityLeave?: boolean;\n    WagesForStudyLeave?: boolean;\n    ServiceCharges?: boolean;\n    OvertimePayments?: boolean;\n    Gratuity?: boolean;\n    RetirementBenefits?: boolean;\n    TerminationBenefits?: boolean;\n    TravelAllowances?: boolean;\n    PaymentInLieuOfNoticeOfTerminationOfService?: boolean;\n    DirectorFee?: boolean;\n    Gifts?: boolean;\n    EffectiveSince?: string;\n    EffectiveUntil?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class SocsoSubjectionRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly localTextPrefix = 'PayrollSettings.SocsoSubjection';\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = '*';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<SocsoSubjectionRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { SocsoSubjectionRow } from \"./SocsoSubjectionRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace SocsoSubjectionService {\n    export const baseUrl = 'PayrollSettings/SocsoSubjection';\n\n    export declare function Create(request: SaveRequest<SocsoSubjectionRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<SocsoSubjectionRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<SocsoSubjectionRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<SocsoSubjectionRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"PayrollSettings/SocsoSubjection/Create\",\n        Update: \"PayrollSettings/SocsoSubjection/Update\",\n        Delete: \"PayrollSettings/SocsoSubjection/Delete\",\n        Retrieve: \"PayrollSettings/SocsoSubjection/Retrieve\",\n        List: \"PayrollSettings/SocsoSubjection/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>SocsoSubjectionService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\n\nexport enum TextClass {\n    EPF = 1,\n    EIS = 2,\n    LHDN = 3,\n    SOCSO = 4,\n    AUTOPAY = 5\n}\nDecorators.registerEnumType(TextClass, 'HRMSoftware.PayrollSettings.TextClass', 'HumanResource.PayrollSettings.TextClass');", "\uFEFFimport { IntegerEditor, EnumEditor, DateEditor, StringEditor, LookupEditor, BooleanEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { TextClass } from \"./TextClass\";\nimport { TextFormatEisSocso } from \"./TextFormatEisSocso\";\nimport { TextFormatEpf } from \"./TextFormatEpf\";\nimport { TextFormatAutopay } from \"./TextFormatAutopay\";\nimport { TextFormatLHDN } from \"./TextFormatLHDN\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface TextDownloadingWizardForm {\n    PayMonth: IntegerEditor;\n    PayYear: IntegerEditor;\n    TextType: EnumEditor;\n    CreditingDate: DateEditor;\n    OrganisationName: StringEditor;\n    OrganisationCode: StringEditor;\n    Email: StringEditor;\n    PhoneNumber: StringEditor;\n    ContactPerson: StringEditor;\n    StateCodeId: LookupEditor;\n    TextFormatEisSocsoId: EnumEditor;\n    TextFormatEpfId: EnumEditor;\n    TextFormatAutopayId: EnumEditor;\n    TextFormatLhdnId: EnumEditor;\n    OccupationList: LookupEditor;\n    DepartmentList: LookupEditor;\n    DivisionList: LookupEditor;\n    JobGradeList: LookupEditor;\n    SectionList: LookupEditor;\n    EmployeeRowListBuffer: LookupEditor;\n    EmployeeRowList: LookupEditor;\n    All: BooleanEditor;\n}\n\nexport class TextDownloadingWizardForm extends PrefixedContext {\n    static formKey = 'PayrollSettings.TextDownloadingWizardForm';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!TextDownloadingWizardForm.init)  {\n            TextDownloadingWizardForm.init = true;\n\n            var w0 = IntegerEditor;\n            var w1 = EnumEditor;\n            var w2 = DateEditor;\n            var w3 = StringEditor;\n            var w4 = LookupEditor;\n            var w5 = BooleanEditor;\n\n            initFormType(TextDownloadingWizardForm, [\n                'PayMonth', w0,\n                'PayYear', w0,\n                'TextType', w1,\n                'CreditingDate', w2,\n                'OrganisationName', w3,\n                'OrganisationCode', w3,\n                'Email', w3,\n                'PhoneNumber', w3,\n                'ContactPerson', w3,\n                'StateCodeId', w4,\n                'TextFormatEisSocsoId', w1,\n                'TextFormatEpfId', w1,\n                'TextFormatAutopayId', w1,\n                'TextFormatLhdnId', w1,\n                'OccupationList', w4,\n                'DepartmentList', w4,\n                'DivisionList', w4,\n                'JobGradeList', w4,\n                'SectionList', w4,\n                'EmployeeRowListBuffer', w4,\n                'EmployeeRowList', w4,\n                'All', w5\n            ]);\n        }\n    }\n}\n\n[TextClass, TextFormatEisSocso, TextFormatEpf, TextFormatAutopay, TextFormatLHDN]; // referenced types", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\n\nexport enum TextFormatEisSocso {\n    CIMB = 1,\n    SOCSO = 2\n}\nDecorators.registerEnumType(TextFormatEisSocso, 'HRMSoftware.PayrollSettings.TextFormatEisSocso', 'HumanResource.PayrollSettings.TextFormatEisSocso');", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\n\nexport enum TextFormatEpf {\n    CIMB = 1,\n    KWSP = 2\n}\nDecorators.registerEnumType(TextFormatEpf, 'HRMSoftware.PayrollSettings.TextFormatEpf', 'HumanResource.PayrollSettings.TextFormatEpf');", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\n\nexport enum TextFormatAutopay {\n    CIMB = 1\n}\nDecorators.registerEnumType(TextFormatAutopay, 'HRMSoftware.PayrollSettings.TextFormatAutopay', 'HumanResource.PayrollSettings.TextFormatAutopay');", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\n\nexport enum TextFormatLHDN {\n    CIMB = 1\n}\nDecorators.registerEnumType(TextFormatLHDN, 'HRMSoftware.PayrollSettings.TextFormatLHDN', 'HumanResource.PayrollSettings.TextFormatLHDN');", "import { Decorators, EntityDialog } from '@serenity-is/corelib';\nimport { EmployeeAllowanceForm, EmployeeAllowanceRow, EmployeeAllowanceService } from '../../../ServerTypes/EmployeeProfile';\nimport { GridEditorDialog } from \"@serenity-is/extensions\";\nimport { PayrollEarningsForm, PayrollEarningsRow, PayrollEarningsService } from '../../../ServerTypes/PayrollSettings';\n\n@Decorators.registerClass('HRMSoftware.PayrollSettings.PayrollEarningsEditDialog')\nexport class PayrollEarningsEditDialog extends GridEditorDialog<PayrollEarningsRow> {\n    protected getFormKey() { return PayrollEarningsForm.formKey; }\n    protected getRowDefinition() { return PayrollEarningsRow; }\n    protected getService() { return PayrollEarningsService.baseUrl; }\n    protected getLocalTextPrefix() { return PayrollEarningsRow.localTextPrefix; }\n    protected getNameProperty() { return PayrollEarningsRow.nameProperty; }\n\n    protected form: PayrollEarningsForm = new PayrollEarningsForm(this.idPrefix);\n\n    constructor() {\n        super();\n        this.form = new PayrollEarningsForm(this.idPrefix);\n\n    }\n}"],
  "mappings": "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",
  "names": ["import_corelib", "import_extensions", "EisSubjectionColumns", "__name", "import_corelib", "import_q", "_EisSubjectionForm", "prefix", "w0", "EisSubjectionForm", "__name", "import_q", "EisSubjectionRow", "__name", "import_q", "EisSubjectionService", "x", "r", "s", "o", "EmployerContributionsColumns", "__name", "import_corelib", "import_q", "_EmployerContributionsForm", "prefix", "w0", "w1", "EmployerContributionsForm", "__name", "import_q", "EmployerContributionsRow", "__name", "import_q", "EmployerContributionsService", "x", "r", "s", "o", "EpfSubjectionColumns", "__name", "import_corelib", "import_q", "_EpfSubjectionForm", "prefix", "w0", "EpfSubjectionForm", "__name", "import_q", "EpfSubjectionRow", "__name", "import_q", "EpfSubjectionService", "x", "r", "s", "o", "HrdfSubjectionColumns", "__name", "import_corelib", "import_q", "_HrdfSubjectionForm", "prefix", "w0", "HrdfSubjectionForm", "__name", "import_q", "HrdfSubjectionRow", "__name", "import_q", "HrdfSubjectionService", "x", "r", "s", "o", "NoPaidLeaveColumns", "__name", "import_corelib", "import_q", "_NoPaidLeaveForm", "prefix", "w0", "w1", "w2", "w3", "w4", "NoPaidLeaveForm", "__name", "import_q", "NoPaidLeaveRow", "__async", "__name", "import_q", "NoPaidLeaveService", "x", "r", "s", "o", "PayrollColumns", "__name", "PayrollDeductionsColumns", "__name", "import_corelib", "import_q", "_PayrollDeductionsForm", "prefix", "w0", "w1", "PayrollDeductionsForm", "__name", "import_q", "PayrollDeductionsRow", "__name", "import_q", "PayrollDeductionsService", "x", "r", "s", "o", "PayrollEarningsColumns", "__name", "import_corelib", "import_q", "_PayrollEarningsForm", "prefix", "w0", "w1", "w2", "PayrollEarningsForm", "__name", "import_q", "PayrollEarningsRow", "__name", "import_q", "PayrollEarningsService", "x", "r", "s", "o", "import_corelib", "import_corelib", "import_extensions", "import_corelib", "import_q", "import_q", "MoneyClaimApplicationDialog", "MoneyClaimApplicationForm", "self", "PcbSubjectionService", "response", "index", "dict", "keys", "j", "key", "NewKey", "EpfSubjectionService", "BufferDict", "EisSubjectionService", "HrdfSubjectionService", "SocsoSubjectionService", "ClaimCategory", "ClaimingCategoryElement", "ClaimingCategoryEditor", "selection", "e", "__async", "MoneyClaimApplicationRow", "MoneyClaimApplicationService", "opt", "EmployeeUpdatedNameElement", "dlg", "EmployeeBasicDataDialog", "HrUpdatedNameNameElement", "ApproveButtons", "element", "RejectButtons", "PermissionKeys", "EmployeeRowIdElement", "EmployeeProfileService", "applicant", "HrStatus", "EmployeeStatus", "applicationStatus", "OrganisationChartService", "PermissionToAck", "error", "arrayOfDict", "input", "extractedText", "trimmedString", "i", "buttons", "Linkx", "__name", "__decorateClass", "MoneyClaimApplicationEditor", "MoneyClaimApplicationColumns", "MoneyClaimApplicationDialog", "MoneyClaimApplicationRow", "__name", "__decorateClass", "import_corelib", "import_extensions", "PayslipPaidOneTimeAllowance", "PayslipPaidOneTimeAllowanceColumns", "PayslipPaidOneTimeAllowanceRow", "PayslipPaidOneTimeAllowanceService", "__name", "__decorateClass", "import_corelib", "import_extensions", "PayslipDeductedOneTimeDeductions", "PayslipDeductedOneTimeDeductionsColumns", "PayslipDeductedOneTimeDeductionsRow", "PayslipDeductedOneTimeDeductionsService", "__name", "__decorateClass", "import_corelib", "import_extensions", "import_corelib", "import_extensions", "PayrollDeductionsEditDialog", "PayrollDeductionsForm", "PayrollDeductionsRow", "PayrollDeductionsService", "__name", "__decorateClass", "PayrollDeductionsEditor", "PayrollDeductionsColumns", "PayrollDeductionsEditDialog", "PayrollDeductionsRow", "row", "id", "__name", "__decorateClass", "import_q", "_PayrollForm", "prefix", "w0", "w1", "w2", "w3", "w4", "w5", "w6", "w7", "w8", "MoneyClaimApplicationEditor", "w9", "PayslipPaidOneTimeAllowance", "w10", "PayslipDeductedOneTimeDeductions", "w11", "PayrollEarningsEditor", "w12", "PayrollDeductionsEditor", "PayrollForm", "__name", "PayrollGeneratingWizardColumns", "__name", "import_corelib", "import_q", "_PayrollGeneratingWizardForm", "prefix", "w0", "w1", "w2", "w3", "PayrollGeneratingWizardForm", "__name", "import_q", "PayrollGeneratingWizardRow", "__name", "import_q", "PayrollGeneratingWizardService", "x", "r", "s", "o", "import_q", "PayrollRow", "__async", "__name", "import_q", "PayrollService", "x", "r", "s", "o", "PayrollSettingsColumns", "__name", "import_corelib", "import_q", "_PayrollSettingsForm", "prefix", "w0", "PayrollSettingsForm", "__name", "import_q", "PayrollSettingsRow", "__name", "import_q", "PayrollSettingsService", "x", "r", "s", "o", "PayrollWizardColumns", "__name", "import_corelib", "import_q", "_PayrollWizardForm", "prefix", "w0", "w1", "w2", "PayrollWizardForm", "__name", "import_q", "PayrollWizardRow", "__name", "import_q", "PayrollWizardService", "x", "r", "s", "o", "PayslipDeductedOneTimeDeductionsColumns", "__name", "import_corelib", "import_q", "_PayslipDeductedOneTimeDeductionsForm", "prefix", "w0", "w1", "PayslipDeductedOneTimeDeductionsForm", "__name", "import_q", "PayslipDeductedOneTimeDeductionsRow", "__name", "import_q", "PayslipDeductedOneTimeDeductionsService", "x", "r", "s", "o", "PayslipPaidMoneyClaimingColumns", "__name", "import_corelib", "import_q", "_PayslipPaidMoneyClaimingForm", "prefix", "w0", "w1", "PayslipPaidMoneyClaimingForm", "__name", "import_q", "PayslipPaidMoneyClaimingRow", "__name", "import_q", "PayslipPaidMoneyClaimingService", "x", "r", "s", "o", "PayslipPaidOneTimeAllowanceColumns", "__name", "import_corelib", "import_q", "_PayslipPaidOneTimeAllowanceForm", "prefix", "w0", "w1", "PayslipPaidOneTimeAllowanceForm", "__name", "import_q", "PayslipPaidOneTimeAllowanceRow", "__name", "import_q", "PayslipPaidOneTimeAllowanceService", "x", "r", "s", "o", "PcbSubjectionColumns", "__name", "import_corelib", "import_q", "_PcbSubjectionForm", "prefix", "w0", "PcbSubjectionForm", "__name", "import_q", "PcbSubjectionRow", "__name", "import_q", "PcbSubjectionService", "x", "r", "s", "o", "SocsoSubjectionColumns", "__name", "import_corelib", "import_q", "_SocsoSubjectionForm", "prefix", "w0", "SocsoSubjectionForm", "__name", "import_q", "SocsoSubjectionRow", "__name", "import_q", "SocsoSubjectionService", "x", "r", "s", "o", "import_corelib", "TextClass", "import_corelib", "import_corelib", "TextFormatEisSocso", "import_corelib", "TextFormatEpf", "import_corelib", "TextFormatAutopay", "import_corelib", "TextFormatLHDN", "import_q", "_TextDownloadingWizardForm", "prefix", "w0", "w1", "w2", "w3", "w4", "w5", "TextDownloadingWizardForm", "__name", "import_corelib", "import_extensions", "PayrollEarningsEditDialog", "PayrollEarningsForm", "PayrollEarningsRow", "PayrollEarningsService", "__name", "__decorateClass", "PayrollEarningsEditor", "PayrollEarningsColumns", "PayrollEarningsEditDialog", "PayrollEarningsRow", "row", "id", "__name", "__decorateClass"]
}
