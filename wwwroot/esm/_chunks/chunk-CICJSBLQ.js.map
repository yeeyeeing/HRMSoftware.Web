{
  "version": 3,
  "sources": ["../../../Modules/ServerTypes/MoneyClaimApplication/MoneyClaimingStatus.ts", "../../../Modules/ServerTypes/MoneyClaimApplication/MoneyClaimApplicationColumns.ts", "../../../Modules/ServerTypes/MoneyClaimApplication/MoneyClaimApplicationRow.ts", "../../../Modules/ServerTypes/MoneyClaimApplication/MoneyClaimApplicationService.ts", "../../../Modules/ServerTypes/MoneyClaimApplication/MoneyClaimReasonColumns.ts", "../../../Modules/ServerTypes/MoneyClaimApplication/MoneyClaimReasonRow.ts", "../../../Modules/ServerTypes/MoneyClaimApplication/MoneyClaimReasonService.ts", "../../../Modules/ServerTypes/MoneyClaimApplication/MoneyClaimApplicationForm.ts", "../../../Modules/ServerTypes/MoneyClaimApplication/MoneyClaimReasonForm.ts"],
  "sourcesContent": ["\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\n\nexport enum MoneyClaimingStatus {\n    Rejected = -1,\n    Pending = 0,\n    Approved = 1,\n    NotNeeded = 2\n}\nDecorators.registerEnumType(MoneyClaimingStatus, 'HRMSoftware.MoneyClaimApplication.MoneyClaimingStatus', 'LeaveApplication.MoneyClaimingStatus');", "\uFEFFimport { MoneyClaimingStatus } from \"./MoneyClaimingStatus\";\nimport { ApplicationStatusFormatter } from \"@/HumanResource/OTApplication/OTApplication/ApplicationStatusFormatter\";\n\nexport class MoneyClaimApplicationColumns {\n    static columnsKey = 'MoneyClaimApplication.MoneyClaimApplication';\n}\n\n[MoneyClaimingStatus, ApplicationStatusFormatter]; // referenced types", "\uFEFFimport { MoneyClaimingStatus } from \"./MoneyClaimingStatus\";\nimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface MoneyClaimApplicationRow {\n    SubjectionEis?: boolean;\n    SubjectionEpf?: boolean;\n    SubjectionHrdf?: boolean;\n    SubjectionSocso?: boolean;\n    SubjectionPcb?: boolean;\n    EmployeeUpdated?: number;\n    HrUpdated?: number;\n    EmployeeUpdatedName?: string;\n    HrUpdatedName?: string;\n    EmployeeStatus?: MoneyClaimingStatus;\n    HrStatus?: MoneyClaimingStatus;\n    CostCentreID?: number;\n    CostCentreName?: string;\n    DepartmentID?: number;\n    DepartmentName?: string;\n    DivisionID?: number;\n    DivisionName?: string;\n    OccupationID?: number;\n    OccupationName?: string;\n    JobGradeID?: number;\n    JobGradeName?: string;\n    Id?: number;\n    Paid?: number;\n    PayrollID?: number;\n    Status?: MoneyClaimingStatus;\n    RejectedBy?: number;\n    RejectedEmployeeName?: string;\n    ClaimAmount?: number;\n    EmployeeRowId?: number;\n    EmployeeName?: string;\n    ClaimReasonId?: number;\n    Description?: string;\n    ClaimingCategory?: string;\n    ApproveEmployeeName?: string;\n    ApprovedBy?: number;\n    ClaimReason?: string;\n    SupportingDocument?: string;\n    ClaimingDate?: string;\n    EmployeeID?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class MoneyClaimApplicationRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'EmployeeRowId';\n    static readonly localTextPrefix = 'MoneyClaimApplication.MoneyClaimApplication';\n    static readonly lookupKey = 'MoneyClaimApplication.MoneyClaimApplication';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<MoneyClaimApplicationRow>('MoneyClaimApplication.MoneyClaimApplication') }\n    static async getLookupAsync() { return getLookupAsync<MoneyClaimApplicationRow>('MoneyClaimApplication.MoneyClaimApplication') }\n\n    static readonly deletePermission = 'Administration:Employee';\n    static readonly insertPermission = 'Administration:Employee';\n    static readonly readPermission = 'Administration:Employee';\n    static readonly updatePermission = 'Administration:Employee';\n\n    static readonly Fields = fieldsProxy<MoneyClaimApplicationRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { MoneyClaimApplicationRow } from \"./MoneyClaimApplicationRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace MoneyClaimApplicationService {\n    export const baseUrl = 'MoneyClaimApplication/MoneyClaimApplication';\n\n    export declare function Create(request: SaveRequest<MoneyClaimApplicationRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<MoneyClaimApplicationRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<MoneyClaimApplicationRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<MoneyClaimApplicationRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"MoneyClaimApplication/MoneyClaimApplication/Create\",\n        Update: \"MoneyClaimApplication/MoneyClaimApplication/Update\",\n        Delete: \"MoneyClaimApplication/MoneyClaimApplication/Delete\",\n        Retrieve: \"MoneyClaimApplication/MoneyClaimApplication/Retrieve\",\n        List: \"MoneyClaimApplication/MoneyClaimApplication/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>MoneyClaimApplicationService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFexport class MoneyClaimReasonColumns {\n    static columnsKey = 'MoneyClaimApplication.MoneyClaimReason';\n}", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface MoneyClaimReasonRow {\n    Id?: number;\n    ClaimReason?: string;\n    Description?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class MoneyClaimReasonRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'ClaimReason';\n    static readonly localTextPrefix = 'MoneyClaimApplication.MoneyClaimReason';\n    static readonly lookupKey = 'MoneyClaimReason.MoneyClaimReason';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<MoneyClaimReasonRow>('MoneyClaimReason.MoneyClaimReason') }\n    static async getLookupAsync() { return getLookupAsync<MoneyClaimReasonRow>('MoneyClaimReason.MoneyClaimReason') }\n\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = 'Administration:HumanResources';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<MoneyClaimReasonRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { MoneyClaimReasonRow } from \"./MoneyClaimReasonRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace MoneyClaimReasonService {\n    export const baseUrl = 'MoneyClaimApplication/MoneyClaimReason';\n\n    export declare function Create(request: SaveRequest<MoneyClaimReasonRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<MoneyClaimReasonRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<MoneyClaimReasonRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<MoneyClaimReasonRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"MoneyClaimApplication/MoneyClaimReason/Create\",\n        Update: \"MoneyClaimApplication/MoneyClaimReason/Update\",\n        Delete: \"MoneyClaimApplication/MoneyClaimReason/Delete\",\n        Retrieve: \"MoneyClaimApplication/MoneyClaimReason/Retrieve\",\n        List: \"MoneyClaimApplication/MoneyClaimReason/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>MoneyClaimReasonService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { StringEditor, LookupEditor, DateEditor, DecimalEditor, BooleanEditor, TextAreaEditor, MultipleImageUploadEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface MoneyClaimApplicationForm {\n    EmployeeUpdatedName: StringEditor;\n    HrUpdatedName: StringEditor;\n    EmployeeUpdated: LookupEditor;\n    HrUpdated: LookupEditor;\n    EmployeeRowId: LookupEditor;\n    EmployeeName: StringEditor;\n    ClaimingDate: DateEditor;\n    ClaimAmount: DecimalEditor;\n    ClaimReasonId: LookupEditor;\n    ClaimingCategory: StringEditor;\n    SubjectionEis: BooleanEditor;\n    SubjectionEpf: BooleanEditor;\n    SubjectionHrdf: BooleanEditor;\n    SubjectionPcb: BooleanEditor;\n    SubjectionSocso: BooleanEditor;\n    Description: TextAreaEditor;\n    SupportingDocument: MultipleImageUploadEditor;\n}\n\nexport class MoneyClaimApplicationForm extends PrefixedContext {\n    static formKey = 'MoneyClaimApplication.MoneyClaimApplication';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!MoneyClaimApplicationForm.init)  {\n            MoneyClaimApplicationForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = LookupEditor;\n            var w2 = DateEditor;\n            var w3 = DecimalEditor;\n            var w4 = BooleanEditor;\n            var w5 = TextAreaEditor;\n            var w6 = MultipleImageUploadEditor;\n\n            initFormType(MoneyClaimApplicationForm, [\n                'EmployeeUpdatedName', w0,\n                'HrUpdatedName', w0,\n                'EmployeeUpdated', w1,\n                'HrUpdated', w1,\n                'EmployeeRowId', w1,\n                'EmployeeName', w0,\n                'ClaimingDate', w2,\n                'ClaimAmount', w3,\n                'ClaimReasonId', w1,\n                'ClaimingCategory', w0,\n                'SubjectionEis', w4,\n                'SubjectionEpf', w4,\n                'SubjectionHrdf', w4,\n                'SubjectionPcb', w4,\n                'SubjectionSocso', w4,\n                'Description', w5,\n                'SupportingDocument', w6\n            ]);\n        }\n    }\n}", "\uFEFFimport { StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface MoneyClaimReasonForm {\n    ClaimReason: StringEditor;\n    Description: StringEditor;\n}\n\nexport class MoneyClaimReasonForm extends PrefixedContext {\n    static formKey = 'MoneyClaimApplication.MoneyClaimReason';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!MoneyClaimReasonForm.init)  {\n            MoneyClaimReasonForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(MoneyClaimReasonForm, [\n                'ClaimReason', w0,\n                'Description', w0\n            ]);\n        }\n    }\n}"],
  "mappings": "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",
  "names": ["import_corelib", "MoneyClaimingStatus", "MoneyClaimApplicationColumns", "__name", "import_q", "MoneyClaimApplicationRow", "__async", "__name", "import_q", "MoneyClaimApplicationService", "x", "r", "s", "o", "MoneyClaimReasonColumns", "__name", "import_q", "MoneyClaimReasonRow", "__async", "__name", "import_q", "MoneyClaimReasonService", "x", "r", "s", "o", "import_corelib", "import_q", "_MoneyClaimApplicationForm", "prefix", "w0", "w1", "w2", "w3", "w4", "w5", "w6", "MoneyClaimApplicationForm", "__name", "import_corelib", "import_q", "_MoneyClaimReasonForm", "prefix", "w0", "MoneyClaimReasonForm", "__name"]
}
