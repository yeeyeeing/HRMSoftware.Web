{
  "version": 3,
  "sources": ["../../../Modules/HumanResource/PerformanceAppraisal/PerformanceAppraisalResponse/PerformanceAppraisalResponseDialog.ts"],
  "sourcesContent": ["import {\n    Decorators,\n    EntityDialog, RetrieveResponse,\n    SaveResponse\n} from '@serenity-is/corelib';\nimport { confirm, alertDialog, serviceCall, ListResponse, Authorization } from \"@serenity-is/corelib/q\";\nimport {\n    PerformanceAppraisalResponseForm,\n    PerformanceAppraisalResponseRow,\n    PerformanceAppraisalResponseService,\n    PerformanceAppraisalTemplateQuestionService,\n    PerformanceAppraisalTemplateQuestionRow,\n    PerformanceAppraisalQuestionService,\n    PerformanceAppraisalQuestionRow,\n    PerformanceAppraisalFormService,\n    PerformanceAppraisalFormRow,\n    PerformanceAppraisalTemplateService,\n    PerformanceAppraisalTemplateRow, PerformanceAppraisalEvaluationService, PerformanceAppraisalEvaluationRow,\n} from \"../../../ServerTypes/PerformanceAppraisal\";\nimport {EmployeeProfileService} from \"@/ServerTypes/EmployeeProfile/EmployeeProfileService\";\nimport {EmployeeProfileRow} from \"@/ServerTypes/EmployeeProfile/EmployeeProfileRow\";\nimport {OrganisationChartService} from \"@/ServerTypes/OrganisationChart/OrganisationChartService\";\n\nimport { PerformanceAppraisalEvaluationDialog } from '../PerformanceAppraisalEvaluation/PerformanceAppraisalEvaluationDialog';\n\n@Decorators.panel()\n@Decorators.registerClass('HRMSoftware.PerformanceAppraisal.PerformanceAppraisalResponseDialog')\nexport class PerformanceAppraisalResponseDialog extends EntityDialog<PerformanceAppraisalResponseRow, any> {\n    protected getFormKey() { return PerformanceAppraisalResponseForm.formKey; }\n    protected getRowDefinition() { return PerformanceAppraisalResponseRow; }\n    protected getService() { return PerformanceAppraisalResponseService.baseUrl; }\n\n    protected form = new PerformanceAppraisalResponseForm(this.idPrefix);\n\n    FormId: number;\n    TemplateId: number;\n    TargetID: number;\n\n    answertypelst: number[] = [];\n    questionlst: string[] = [];\n\n    public getResponseRowID(FormId: number): void {\n        this.FormId = FormId;\n    }\n\n    public getTemplateID(TemplateId: number): void {\n        this.TemplateId = TemplateId;\n    }\n\n    public getTargetID(TargetID: number): void {\n        this.TargetID = TargetID;\n    }\n\n    protected onDialogOpen(): void {\n        super.onDialogOpen();\n\n        this.dialogTitle = \"Performance Appraisal\";\n        this.saveAndCloseButton.hide();\n        this.applyChangesButton.hide();\n\n        const buttonContainer = $('<div></div>').appendTo(this.element);\n        const targetInfoContainer = $('<div id=\"target-info-container\"></div>').appendTo(this.element);\n        const container = $('<div id=\"questions-container\"></div>').appendTo(this.element);\n        const todayDate = new Date().toISOString().slice(0, 10); \n\n        const questionIds: number[] = [];\n        const questions: string[] = [];\n        const answertypeIds: number[] = [];\n        let targetname = \"\";\n        let targetId = \"\";\n        let department = \"\";\n        let jobTitle = \"\";\n        let string_startDate = \"\";\n        let string_endDate = \"\";\n        let submitDate = \"\";\n        let rating = 0;\n\n        EmployeeProfileService.List({\n            Criteria: [[EmployeeProfileRow.Fields.Id], '=', this.TargetID]\n        }, response => {\n            for (var index in response.Entities) {\n                const entity = response.Entities[index];\n                targetname = entity.EmployeeName;\n                targetId = entity.EmployeeID;\n                department = entity.DepartmentDept;\n                jobTitle = entity.Occupation;\n            }\n\n            PerformanceAppraisalFormService.List({\n                Criteria: [[PerformanceAppraisalFormRow.Fields.Id], '=', this.FormId]\n            }).then(dateResponse => {\n\n                for (const dateEntity of dateResponse.Entities) {\n                    string_startDate = dateEntity.StartDate;\n                    string_endDate = dateEntity.EndDate;\n                }\n\n                PerformanceAppraisalResponseService.List({\n                    Criteria: [[PerformanceAppraisalResponseRow.Fields.Id], '=', this.FormId]\n                }).then(dateResponse => {\n                    if (dateResponse.Entities.length === 0) {\n                        submitDate = todayDate;\n                    } else {\n                        const record = dateResponse.Entities[0];\n\n                        if (record.UpdateDate) {\n                            submitDate = record.UpdateDate.split('T')[0]; // 'YYYY-MM-DD' format\n                        } else {\n                            submitDate = record.InsertDate.split('T')[0];\n                        }\n                    }\n\n                    function formatDate(dateString) {\n                        const date = new Date(dateString);\n                        const year = date.getFullYear();\n                        const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-based\n                        const day = String(date.getDate()).padStart(2, '0');\n                        return `${year}-${month}-${day}`;\n                    }\n\n                    const formattedStartDate = formatDate(string_startDate);\n                    const formattedEndDate = new Date(string_endDate).toISOString().split('T')[0];\n                    const formattedPeriodEndDate = formatDate(string_endDate);\n\n                    this.displayEmployeeInfo(targetInfoContainer, targetname, targetId, jobTitle, \n                        department, formattedStartDate, formattedEndDate, formattedPeriodEndDate, submitDate);\n                });\n            });\n        });\n        \n        PerformanceAppraisalTemplateService.List({\n            Criteria: [[PerformanceAppraisalTemplateRow.Fields.Id], '=', this.TemplateId]\n        }, templateResponse => {\n            \n            rating = templateResponse.Entities[0].RatingScale;\n\n            PerformanceAppraisalTemplateQuestionService.List({\n                Criteria: [[PerformanceAppraisalTemplateQuestionRow.Fields.TemplateId], '=', this.TemplateId]\n            }, response => {\n                for (var index in response.Entities) {\n                    const entity = response.Entities[index];\n                    questionIds.push(entity.QuestionId);\n                }\n\n                if (questionIds.length > 0) {\n\n                    questionIds.forEach((questionId) => {\n\n                        PerformanceAppraisalQuestionService.List({\n                            Criteria: [[PerformanceAppraisalQuestionRow.Fields.Id], '=', questionId]\n                        }, response1 => {\n\n                            for (const questionEntity of response1.Entities) {\n                                questions.push(questionEntity.Questions);\n                                answertypeIds.push(questionEntity.AnswerType);\n                            }\n                            // console.log(questionIds);\n                            // console.log(questions);\n\n                            if (questions.length === questionIds.length) {\n\n                                // console.log(\"check\");\n                                this.displayQuestionsAndAnswers(container, buttonContainer, questions, answertypeIds, rating);\n                            }\n\n                            const button = `\n                                <button id=\"scrollToTopBtn\" style=\"display: none; position: fixed; bottom: 20px; right: 20px; z-index: 99; background-color: #34495e; color: white; border: none; padding: 10px 15px; border-radius: 50%; cursor: pointer;\">\n                                    <i class=\"fa fa-upload\"></i>\n                                </button>\n                            `;\n\n                            container.append(button);\n\n                            $(window).scroll(function () {\n                                if ($(window).scrollTop() > 200) {\n                                    $('#scrollToTopBtn').fadeIn();\n                                } else {\n                                    $('#scrollToTopBtn').fadeOut();\n                                }\n                            });\n\n                            $(document).on('click', '#scrollToTopBtn', function () {\n                                $('html, body').animate({ scrollTop: 0 }, 5);\n                            });\n                        });\n                    });\n\n                } else {\n                    PerformanceAppraisalResponseService.List({\n                        Criteria: [[PerformanceAppraisalResponseRow.Fields.FormId], '=', this.FormId]\n                    }, response2 => {\n\n                        if (response2.Entities.length > 0){\n                            this.displayQuestionsAndAnswers(container, buttonContainer, [], [], rating);\n                        }\n                        else if (response2.Entities.length === 0) {\n                            container.append(`\n                            <div id=\"warning-message\" class=\"warning-container\">\n                                <p class=\"warning-text\">Template question not found or has been removed.</p>\n                            </div>\n                        `);\n                            const button = `\n                                <button id=\"scrollToTopBtn\" style=\"display: none; position: fixed; bottom: 20px; right: 20px; z-index: 99; background-color: #34495e; color: white; border: none; padding: 10px 15px; border-radius: 50%; cursor: pointer;\">\n                                    <i class=\"fa fa-upload\"></i>\n                                </button>\n                            `;\n\n                            container.append(button);\n\n                            $(window).scroll(function () {\n                                if ($(window).scrollTop() > 200) {\n                                    $('#scrollToTopBtn').fadeIn();\n                                } else {\n                                    $('#scrollToTopBtn').fadeOut();\n                                }\n                            });\n\n                            $(document).on('click', '#scrollToTopBtn', function () {\n                                $('html, body').animate({ scrollTop: 0 }, 5);\n                            });\n                            \n                            this.applyStyles(container);\n                        }\n                    })\n                }\n            });\n            \n        });\n    }\n\n    public displayEmployeeInfo(employeeInfoContainer: JQuery, employeeName: string, employeeId: string, jobTitle: string, department: string, \n                               string_startDate: string, string_endDate: string, formattedPeriodEndDate: string, submitDate: string): void {\n\n        const employeeInfoHtml = `\n            <hr style=\"border: 1px solid #000000; margin-left: 10%; margin-right: 10%;\">\n            \n            <div id=\"employee-info\" \n            style=\"padding: 20px; margin-right: 10%; margin-left: 10%; color: #ffffff; border-radius: 8px; \n            border: 1px solid transparent; font-family: Arial, sans-serif;\">\n            \n                <div style=\"margin-bottom: 20px; font-size: 22px; color: #000000; font-weight: bold; \n                background-color: #b1b1b1; text-align: center; border-radius: 6px; border: 1px solid #dee2e6;\n                max-width: 100%;\">Employee Information</div>\n                \n                <table style=\"width: 100%; border-spacing: 15px; border-collapse: separate;\">\n                    <tr>\n                        <td style=\"width: 20%; color: #000000; font-weight: bold;\">Name:</td>\n                        <td style=\"width: 30%; color: #000000; border: 1px solid #dee2e6; border-radius: 4px; padding: 8px 12px; background-color: lightgrey;\">${employeeName}</td>\n                        <td style=\"width: 20%; color: #000000; font-weight: bold;\">Employee ID:</td>\n                        <td style=\"width: 30%; color: #000000; border: 1px solid #dee2e6; border-radius: 4px; padding: 8px 12px; background-color: lightgrey;\">${employeeId}</td>\n                    </tr>\n                    <tr>\n                        <td style=\"font-weight: bold; color: #000000;\">Job Title:</td>\n                        <td style=\"border: 1px solid #dee2e6; color: #000000; border-radius: 4px; padding: 8px 12px; \n                        background-color: lightgrey;\">${jobTitle}</td>\n                        <td style=\"font-weight: bold; color: #000000;\">Date:</td>\n                        <td style=\"border: 1px solid #dee2e6; color: #000000; border-radius: 4px; padding: 8px 12px; \n                        background-color: lightgrey;\">${submitDate}</td>\n                    </tr>\n                    <tr>\n                        <td style=\"font-weight: bold; color: #000000;\">Department:</td>\n                        <td style=\"border: 1px solid #dee2e6; color: #000000; border-radius: 4px; padding: 8px 12px; \n                        background-color: lightgrey;\">${department}</td>\n                        <td style=\"font-weight: bold; color: #000000;\">Head Of Dept:</td>\n                        <td style=\"border: 1px solid #dee2e6; color: #000000; border-radius: 4px; padding: 8px 12px; \n                        background-color: lightgrey;\"></td>\n                    </tr>\n                    <tr>\n                        <td style=\"font-weight: bold; color: #000000;\">Appraisal Period:</td>\n                        <td colspan=\"3\" style=\" color: #000000; border: 1px solid #dee2e6; border-radius: 4px; \n                        padding: 8px 12px; background-color:lightgrey;\">${string_startDate}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                        to&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;${formattedPeriodEndDate}</td>\n                    </tr>\n                </table>\n                \n                <hr style=\"border: 1px solid #000000;\">\n            </div>`;\n\n        $(employeeInfoHtml).appendTo(employeeInfoContainer);\n    }\n\n    public isWithinDateRange(startDate: string, endDate: string, today: Date): boolean {\n\n        const start = new Date(startDate);\n        const end = new Date(endDate);\n        \n        // console.log(\"Start: \", start);\n        // console.log(\"End: \", end);\n\n        if (isNaN(start.getTime()) || isNaN(end.getTime())) {\n            console.error(\"Invalid date(s) provided\");\n            return false;\n        }\n        \n        if (today >= start && today <= end) {console.log(start, today, end, today >= start && today <= end)}\n        \n        return today >= start && today <= end;\n    }\n    \n    public displayQuestionsAndAnswers(container: JQuery, buttonContainer: JQuery, questions: string[], answertypeIds: number[], rating: number): void {\n        container.empty();\n\n        const sortedQuestions = questions.map((question, index) => ({\n            question: question,\n            answertypeId: answertypeIds[index]\n        }));\n\n        sortedQuestions.sort((a, b) => a.answertypeId - b.answertypeId);\n\n        this.answertypelst = sortedQuestions.map(q => q.answertypeId);\n        this.questionlst = sortedQuestions.map(q => q.question);\n\n        let textTypeAdded = false;\n        let radioTypeAdded = false;\n        let isEditable = false;\n\n        const today = new Date();\n        const stringToday = String(today);\n        let startDate = \"\";\n        let endDate = \"\";\n\n        let ratingSum = 0;\n        let totalQuestions = 0;\n        let percentage = 0;\n\n        function formatDate(dateString: string): string {\n            const date = new Date(dateString);\n            const year = date.getFullYear();\n            const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-based\n            const day = String(date.getDate()).padStart(2, '0');\n            return `${year}-${month}-${day}`;\n        }\n\n        const formattedTodayDate = formatDate(stringToday);\n\n        PerformanceAppraisalFormService.List({\n            Criteria: [[PerformanceAppraisalFormRow.Fields.Id], '=', this.FormId]\n        }).then((formResponse: ListResponse<any>) => {\n\n            const dueDateStr = formResponse.Entities[0].EndDate;\n            const dueDate = new Date(dueDateStr);\n            \n            // console.log(dueDate);\n\n            if (today >= dueDate) {\n                \n                let warningMSG: string;\n                warningMSG =`\n                    <div id=\"warning-message\" class=\"warning-container\">\n                        <p class=\"warning-text\">The deadline has passed. The following is the last saved record.</p>\n                    </div>\n                `;\n                container.append(warningMSG);\n            \n                PerformanceAppraisalResponseService.List({\n                    Criteria: [[PerformanceAppraisalResponseRow.Fields.FormId], '=', this.FormId]\n                }).then((response: ListResponse<any>) => {\n                    \n                    if (response.Entities.length > 0)\n                    {\n                        PerformanceAppraisalFormService.List({\n                            Criteria: [[PerformanceAppraisalFormRow.Fields.Id], '=', this.FormId]\n                        }).then(dateResponse => {\n\n                            for (const dateEntity of dateResponse.Entities) {\n                                startDate = dateEntity.StartDate;\n                                endDate = dateEntity.EndDate;\n                            }\n\n                            const textQuestions: { question: string, answer: string }[] = [];\n                            const ratingQuestions: { question: string, answer: string }[] = [];\n\n                            response.Entities.forEach((entity) => {\n                                const question = entity.Question;\n                                const answer = entity.Answer;\n                                const answerType = entity.AnswerType;\n\n                                if (answerType === 'text') {\n                                    textQuestions.push({ question, answer });\n                                } else if (answerType === 'rating') {\n                                    ratingQuestions.push({ question, answer });\n                                }\n                            });\n\n                            function formatDate(dateString: string): string {\n                                const date = new Date(dateString);\n                                const year = date.getFullYear();\n                                const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-based\n                                const day = String(date.getDate()).padStart(2, '0');\n                                return `${year}-${month}-${day}`;\n                            }\n\n                            textQuestions.forEach(({ question, answer }, index) => {\n                                let inputHtml: string;\n\n                                if (!textTypeAdded) {\n                                    const formattedStartDate = formatDate(startDate);\n                                    const formattedEndDate = formatDate(endDate);\n\n                                    container.append(`\n                                        <p class=\"reminder-text\">\n                                            Please complete the form between <span class=\"date-text\">${formattedStartDate}</span> and <span class=\"date-text\">${formattedEndDate}</span>.\n                                            During this period, you can edit and resubmit the form as needed. After the deadline, no further submissions or edits will be allowed.\n                                        </p>\n                                        <p class=\"instruction-text\">Appraisee to complete and return to the appraiser prior to the interview.</p>\n                                    `);\n                                    textTypeAdded = true;\n                                }\n\n                                inputHtml = `\n                                    <div class=\"text-answer\">\n                                        <textarea name=\"answer-${index}\" placeholder=\"Enter your answer here...\" \n                                                  style=\"width: 100%; height: 100px; background-color: ${isEditable ? 'white' : '#D3D3D3'};\" \n                                                  ${isEditable ? '' : 'readonly'} required>${answer}</textarea>\n                                    </div>\n                                `;\n\n                                const questionHtml = `\n                                    <div class=\"question-item\">\n                                        <p style=\"font-weight: bold; text-align: justify;\">${question}</p>\n                                        ${inputHtml}\n                                    </div>\n                                `;\n\n                                container.append(questionHtml);\n                            });\n\n                            ratingQuestions.forEach(({ question, answer }, index) => {\n\n                                totalQuestions = totalQuestions + 1;\n                                ratingSum = ratingSum + parseInt(answer);\n                                \n                                let inputHtml: string;\n\n                                if (!radioTypeAdded) {\n                                    container.append(`\n                                        <p class=\"instruction-radio\">Rate your capability or knowledge in the following areas based on your current \n                                        role requirements. Use the rating scale provided, where lower scores represent less capability and higher \n                                        scores represent greater capability, from left to right.</p>\n                                    `);\n                                        radioTypeAdded = true;\n                                }\n\n                                const ratingArray = Array.from({ length: rating }, (_, i) => i + 1);\n                                \n                                inputHtml = `\n                                    <div class=\"rating-container\">\n                                        <div class=\"rating\" style=\"background-color: ${isEditable ? 'transparent' : '#D3D3D3'};\">\n                                            ${ratingArray.map(i => `\n                                                <div class=\"radio-item\">\n                                                    <input type=\"radio\" name=\"answer-${index}\" value=\"${i}\" id=\"rating-${index}-${i}\" ${i == answer ? 'checked' : ''} ${isEditable ? '' : 'disabled'} required />\n                                                    <label for=\"rating-${index}-${i}\" class=\"radio-label\">${i}</label>\n                                                </div>\n                                            `).join('')}\n                                        </div>\n                                    </div>\n                                `;\n\n                                const questionHtml = `\n                                    <div class=\"question-item\">\n                                        <p style=\"font-weight: bold; text-align: justify;\">${question}</p>\n                                        ${inputHtml}\n                                    </div>\n                                `;\n\n                                container.append(questionHtml);\n                            });\n\n                            percentage = (ratingSum / (totalQuestions * rating)) * 100;\n                            if (isNaN(percentage) || percentage === 0) {\n                                percentage = 0.00;\n                            }\n\n                            let overallRatingContainer = `\n                                <div class=\"overallRating\">\n                                    <label>Overall Rating (average the rating numbers above by percentage): </label>\n                                    <input class=\"percentage\" id=\"percentage\" style=\"justify-content: flex-end;\" value=\"${percentage.toFixed(2)}%\" />\n                                </div>\n                            `;\n                            \n                            container.append(overallRatingContainer);\n\n                            // const endline = '<hr style=\"border: 1px solid #000000; margin-left: 10%; margin-right: 10%; margin-top: 8%;\">';\n                            // container.append(endline);\n\n                            this.applyStyles(container);\n\n                            /*const evaluationHtml = `\n\n                                <hr style=\"border: 1px solid #000000; margin-left: 10%; margin-right: 10%; margin-top: 5%;\">\n                                \n                                <div id=\"evaluation-section\" style=\"padding: 0 12%; color: #444; font-family: 'Arial', sans-serif;\">\n                \n                                    <div style=\"margin-bottom: 20px; font-size: 20px; color: #222; font-weight: 700; \n                                    background-color: #f7f7f7; text-align: center; border-radius: 8px; padding: 8px;\">Evaluation</div>\n                                    \n                                    <!-- Instruction Text -->\n                                    <div style=\"margin-bottom: 10px; font-size: 15px; color: #555; font-weight: 400; \n                                    background-color: #f4f4f4; padding: 25px; border-radius: 6px;\">\n                                        <p><strong>To be completed during the appraisal by the appraiser:</strong> Where appropriate and safe to do so, certain items can be completed by the appraiser before the appraisal, and then discussed and validated or amended in discussion with the appraisee during the appraisal.</p>\n                                        <p><strong>Evaluation:</strong> Describe the purpose of the appraiser\u2019s job function. Review and discuss self-appraisal entries; appraiser\u2019s career direction options and wishes. Appraiser may like to discuss specific objectives that will enable the appraisee to reach competence and to meet required performance in the current job, or achieve readiness for the next job level/type, or if no particular next role is identified or sought, to achieve the desired personal growth or experience. These objectives must adhere to the SMARTER rules - specific, measurable, agreed, realistic, time-bound, ethical, recorded. Training and development support may be discussed to help the appraisee meet the agreed objectives above. Other issues may be covered (if any).</p>\n                                    </div>\n                                \n                                    <!-- Evaluation Table -->\n                                    <table style=\"width: 100%; border-spacing: 20px; border-collapse: separate;\">\n                                        <tr>\n                                            <td style=\"font-weight: 600; color: #333; width: 22%;\">Evaluation:</td>\n                                            <td colspan=\"3\" style=\"color: #444; padding: 5px; background-color: #ffffff;\">\n                                                <textarea rows=\"5\" style=\"width: 100%; border: 1px solid #cccccc; font-family: 'Arial', sans-serif; \n                                                background-color: transparent; border-radius: 6px;\" placeholder=\"Describe the purpose of the appraiser\u2019s job function, review self-appraisal entries, etc.\"></textarea>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td style=\"font-weight: 600; color: #333;\">Goals:</td>\n                                            <td colspan=\"3\" style=\"color: #444; padding: 5px; background-color: #ffffff;\">\n                                                <textarea rows=\"3\" style=\"width: 100%; border: 1px solid #cccccc; border-radius: 6px; padding: 10px;\" placeholder=\"Enter goals agreed upon by employee and Head Of Dept.\"></textarea>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td style=\"font-weight: 600; color: #333;\">Grade / Recommendation / Summary as applicable:</td>\n                                            <td colspan=\"3\" style=\"color: #444; padding: 5px; background-color: #ffffff;\">\n                                                <textarea rows=\"3\" style=\"width: 100%; border: 1px solid #cccccc; border-radius: 6px; padding: 10px;\" placeholder=\"Enter grade/recommendation/summary here.\"></textarea>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td style=\"font-weight: 600; color: #333;\">Bonus Rate:</td>\n                                            <td colspan=\"3\" style=\"color: #444; padding: 5px; background-color: #ffffff;\">\n                                                <select style=\"width: 100%; border: 1px solid #cccccc; border-radius: 6px; padding: 10px;\">\n                                                    ${Array.from({ length: 51 }, (_, i) => (i * 0.1).toFixed(1)).map(rate => `\n                                                        <option value=\"${rate}\">${rate}</option>\n                                                    `).join('')}\n                                                </select>\n                                            </td>\n                                        </tr>\n                                    </table>\n                                    \n                                    <div style=\"margin-bottom: 20px; font-size: 20px; color: #222; font-weight: 700; \n                                    background-color: #f7f7f7; text-align: center; border-radius: 8px; padding: 8px;\">Verification of Review</div>\n                                \n                                    <table style=\"width: 100%; border-spacing: 20px; border-collapse: separate;\">\n                                        <tr>\n                                            <td style=\"font-weight: 600; color: #333; width: 200px;\">Employee Signature:</td>\n                                            <td style=\"border: 1px solid #cccccc; color: #444; border-radius: 6px; padding: 15px; background-color: #ffffff; width: 300px; height: 80px; cursor: pointer;\" onclick=\"document.getElementById('employeeSignatureInput').click();\">\n                                                <img id=\"employeeSignaturePreview\" style=\"max-width: 100%; max-height: 100%;\" />\n                                                <input type=\"file\" id=\"employeeSignatureInput\" style=\"display: none;\" accept=\"image/*\" onchange=\"previewSignature('employeeSignatureInput', 'employeeSignaturePreview');\" />\n                                            </td>\n                                            <td style=\"font-weight: 600; color: #333; width: 100px;\">Date:</td>\n                                            <td style=\"border: 1px solid #cccccc; color: #444; border-radius: 6px; padding: 15px; background-color: #ffffff; width: 120px;\">${formattedTodayDate}</td>\n                                        </tr>\n                                        <tr>\n                                            <td style=\"font-weight: 600; color: #333;\">Head Of Dept. Signature:</td>\n                                            <td style=\"border: 1px solid #cccccc; color: #444; border-radius: 6px; padding: 15px; background-color: #ffffff; cursor: pointer;\" onclick=\"document.getElementById('hodSignatureInput').click();\">\n                                                <img id=\"hodSignaturePreview\" style=\"max-width: 100%; max-height: 100%;\" />\n                                                <input type=\"file\" id=\"hodSignatureInput\" style=\"display: none;\" accept=\"image/*\" onchange=\"previewSignature('hodSignatureInput', 'hodSignaturePreview');\" />\n                                            </td>\n                                            <td style=\"font-weight: 600; color: #333;\">Date:</td>\n                                            <td style=\"border: 1px solid #cccccc; color: #444; border-radius: 6px; padding: 15px; background-color: #ffffff;\">${formattedTodayDate}</td>\n                                        </tr>\n                                        <tr>\n                                            <td style=\"font-weight: 600; color: #333;\">General Manager Signature:</td>\n                                            <td style=\"border: 1px solid #cccccc; color: #444; border-radius: 6px; padding: 15px; background-color: #ffffff; cursor: pointer;\" onclick=\"document.getElementById('gmSignatureInput').click();\">\n                                                <img id=\"gmSignaturePreview\" style=\"max-width: 100%; max-height: 100%;\" />\n                                                <input type=\"file\" id=\"gmSignatureInput\" style=\"display: none;\" accept=\"image/*\" onchange=\"previewSignature('gmSignatureInput', 'gmSignaturePreview');\" />\n                                            </td>\n                                            <td style=\"font-weight: 600; color: #333;\">Date:</td>\n                                            <td style=\"border: 1px solid #cccccc; color: #444; border-radius: 6px; padding: 15px; background-color: #ffffff;\">${formattedTodayDate}</td>\n                                        </tr>\n                                    </table>\n\n                                    <script>\n                                        function previewSignature(inputId, previewId) {\n                                            const input = document.getElementById(inputId);\n                                            const preview = document.getElementById(previewId);\n                                    \n                                            if (input.files && input.files[0]) {\n                                                const reader = new FileReader();\n                                                reader.onload = function (e) {\n                                                    preview.src = e.target.result;\n                                                }\n                                                reader.readAsDataURL(input.files[0]);\n                                            }\n                                        }\n                                    </script>\n\n                                </div>\n                             \n                                <hr style=\"border: 1px solid #000000; margin-left: 10%; margin-right: 10%;\">\n                            `;\n\n                            PerformanceAppraisalResponseService.List({\n                                Criteria: [[PerformanceAppraisalResponseRow.Fields.FormId], '=', this.FormId]\n                            }).then((response: ListResponse<any>) => {\n\n                                if (response.Entities && response.Entities.length > 0) {\n                                    container.append(evaluationHtml);\n                                }\n                                else {\n                                    const endline = '<hr style=\"border: 1px solid #000000; margin-left: 10%; margin-right: 10%; margin-top: 8%;\">';\n                                    container.append(endline);\n                                }\n                            });*/\n\n                        });\n                    }else {\n                        console.log(\"Pass deadline but incomplete...\");\n                        \n                        PerformanceAppraisalFormService.List({\n                            Criteria: [[PerformanceAppraisalFormRow.Fields.Id], '=', this.FormId]\n                        }).then(dateResponse => {\n\n                            for (const dateEntity of dateResponse.Entities) {\n                                startDate = dateEntity.StartDate;\n                                endDate = dateEntity.EndDate;\n                            }\n\n                            isEditable = this.isWithinDateRange(startDate, endDate, today);\n\n                            sortedQuestions.forEach(({ question, answertypeId }, index) => {\n                                let inputHtml: string;\n                                const existingAnswers = response.Entities.reduce((map, item) => {\n                                    map[item.Question] = item.Answer; // Map question text to answer\n                                    return map;\n                                }, {} as { [key: string]: string });\n                                const existingAnswer = existingAnswers[question] || '';\n\n                                function formatDate(dateString) {\n                                    const date = new Date(dateString);\n                                    const year = date.getFullYear();\n                                    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-based\n                                    const day = String(date.getDate()).padStart(2, '0');\n                                    return `${year}-${month}-${day}`;\n                                }\n\n                                if (answertypeId===2){\n                                    if (!textTypeAdded) {\n                                        const formattedStartDate = formatDate(startDate);\n                                        const formattedEndDate = formatDate(endDate);\n\n                                        container.append(`\n                                        <p class=\"reminder-text\">\n                                            Please complete the form between <span class=\"date-text\">${formattedStartDate}</span> and <span class=\"date-text\">${formattedEndDate}</span>.\n                                            During this period, you can edit and resubmit the form as needed. After the deadline, no further submissions or edits will be allowed.\n                                        </p>\n                                        <p class=\"instruction-text\">Appraisee to complete and return to the appraiser prior to the interview.</p>\n                                    `);\n                                        textTypeAdded = true;\n                                    }\n\n                                    inputHtml = `\n                                        <div class=\"text-answer\">\n                                            <textarea name=\"answer-${index}\" placeholder=\"Enter your answer here...\" \n                                                      style=\"width: 100%; height: 100px; background-color: ${isEditable ? 'white' : '#D3D3D3'};\" \n                                                      ${isEditable ? '' : 'readonly'} required>${existingAnswer}</textarea>\n                                        </div>\n                                    `;\n                                }else if (answertypeId===3) {\n\n                                    totalQuestions = totalQuestions + 1;\n                                    ratingSum = ratingSum + parseInt(existingAnswer);\n                                    \n                                    if (!radioTypeAdded) {\n                                        container.append('' +\n                                            '<p class=\"instruction-radio\">Rate your capability or knowledge in the following areas based on your current role requirements. ' +\n                                            'Use the rating scale provided, where lower scores represent less capability and higher scores represent greater capability, from ' +\n                                            'left to right.</p>');\n                                        radioTypeAdded = true;\n                                    }\n\n                                    const ratingArray = Array.from({ length: rating }, (_, i) => i + 1);\n\n                                    inputHtml = `\n                                        <div class=\"rating-container\">\n                                            <div class=\"rating\" style=\"background-color: ${isEditable ? 'transparent' : '#D3D3D3'};\">\n                                                ${ratingArray.map(i => `\n                                                    <div class=\"radio-item\">\n                                                        <input type=\"radio\" name=\"answer-${index}\" value=\"${i}\" id=\"rating-${index}-${i}\" ${i == existingAnswer ? 'checked' : ''} ${isEditable ? '' : 'disabled'} required />\n                                                        <label for=\"rating-${index}-${i}\" class=\"radio-label\">${i}</label>\n                                                    </div>\n                                                `).join('')}\n                                            </div>\n                                        </div>\n                                    `;\n                                }\n                                \n                                const questionHtml = `\n                                    <div class=\"question-item\">\n                                        <p style=\"font-weight: bold; text-align: justify;\">${question}</p>\n                                        ${inputHtml}\n                                    </div>\n                                `;\n\n                                container.append(questionHtml);\n                            });\n\n                            percentage = (ratingSum / (totalQuestions * rating)) * 100;\n                            if (isNaN(percentage) || percentage === 0) {\n                                percentage = 0.00;\n                            }\n\n                            let overallRatingContainer = `\n                                <div class=\"overallRating\">\n                                    <label>Overall Rating (average the rating numbers above by percentage): </label>\n                                    <input class=\"percentage\" id=\"percentage\" style=\"justify-content: flex-end;\" value=\"${percentage.toFixed(2)}%\" />\n                                </div>\n                            `;\n\n                            container.append(overallRatingContainer);\n\n                            const endline = '<hr style=\"border: 1px solid #000000; margin-left: 10%; margin-right: 10%; margin-top: 8%;\">';\n                            container.append(endline);\n\n                            this.applyStyles(container);\n\n                        });\n                    }\n                }).catch(error => console.error('Error fetching existing answers:', error));\n                \n            } else {\n                if (questions.length === 0){\n                    PerformanceAppraisalResponseService.List({\n                        Criteria: [[PerformanceAppraisalResponseRow.Fields.FormId], '=', this.FormId]\n                    }).then((response: ListResponse<any>) => {\n\n                        PerformanceAppraisalFormService.List({\n                            Criteria: [[PerformanceAppraisalFormRow.Fields.Id], '=', this.FormId]\n                        }).then(dateResponse => {\n\n                            for (const dateEntity of dateResponse.Entities) {\n                                startDate = dateEntity.StartDate;\n                                endDate = dateEntity.EndDate;\n                            }\n\n                            const textQuestions: { question: string, answer: string }[] = [];\n                            const ratingQuestions: { question: string, answer: string }[] = [];\n\n                            response.Entities.forEach((entity) => {\n                                const question = entity.Question;\n                                const answer = entity.Answer;\n                                const answerType = entity.AnswerType;\n\n                                if (answerType === 'text') {\n                                    textQuestions.push({ question, answer });\n                                } else if (answerType === 'rating') {\n                                    ratingQuestions.push({ question, answer });\n                                }\n                            });\n\n                            function formatDate(dateString: string): string {\n                                const date = new Date(dateString);\n                                const year = date.getFullYear();\n                                const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-based\n                                const day = String(date.getDate()).padStart(2, '0');\n                                return `${year}-${month}-${day}`;\n                            }\n                            \n                            let warningMSG: string;\n                            warningMSG =`\n                                <div id=\"warning-message\" class=\"warning-container\">\n                                    <input class=\"warning-text\">Template question not found or has been removed. The following is the last saved record.</input>\n                                </div>\n                            `;\n                            container.append(warningMSG);\n                           \n                            textQuestions.forEach(({ question, answer }, index) => {\n                                let inputHtml: string;\n\n                                if (!textTypeAdded) {\n                                    const formattedStartDate = formatDate(startDate);\n                                    const formattedEndDate = formatDate(endDate);\n\n                                    container.append(`\n                                        <p class=\"reminder-text\">\n                                            Please complete the form between <span class=\"date-text\">${formattedStartDate}</span> and <span class=\"date-text\">${formattedEndDate}</span>.\n                                            During this period, you can edit and resubmit the form as needed. After the deadline, no further submissions or edits will be allowed.\n                                        </p>\n                                        <p class=\"instruction-text\">Appraisee to complete and return to the appraiser prior to the interview.</p>\n                                    `);\n                                    textTypeAdded = true;\n                                }\n\n                                inputHtml = `\n                                    <div class=\"text-answer\">\n                                        <textarea name=\"answer-${index}\" placeholder=\"Enter your answer here...\" \n                                                  style=\"width: 100%; height: 100px; background-color: ${isEditable ? 'white' : '#D3D3D3'};\" \n                                                  ${isEditable ? '' : 'readonly'} required>${answer}</textarea>\n                                    </div>\n                                `;\n\n                                const questionHtml = `\n                                    <div class=\"question-item\">\n                                        <p style=\"font-weight: bold; text-align: justify;\">${question}</p>\n                                        ${inputHtml}\n                                    </div>\n                                `;\n                                container.append(questionHtml);\n                            });\n\n                            ratingQuestions.forEach(({ question, answer }, index) => {\n\n                                totalQuestions = totalQuestions + 1;\n                                ratingSum = ratingSum + parseInt(answer);\n                                \n                                let inputHtml: string;\n\n                                if (!radioTypeAdded) {\n                                    container.append(`\n                                    <p class=\"instruction-radio\">Rate your capability or knowledge in the following areas based on your current role requirements. \n                                    Use the rating scale provided, where lower scores represent less capability and higher scores represent greater capability, \n                                    from left to right.</p>\n                                    \n                                `);\n                                    radioTypeAdded = true;\n                                }\n\n                                const ratingArray = Array.from({ length: rating }, (_, i) => i + 1);\n\n                                inputHtml = `\n                                    <div class=\"rating-container\">\n                                        <div class=\"rating\" style=\"background-color: ${isEditable ? 'transparent' : '#D3D3D3'};\">\n                                            ${ratingArray.map(i => `\n                                                <div class=\"radio-item\">\n                                                    <input type=\"radio\" name=\"answer-${index}\" value=\"${i}\" id=\"rating-${index}-${i}\" ${i == answer ? 'checked' : ''} ${isEditable ? '' : 'disabled'} required />\n                                                    <label for=\"rating-${index}-${i}\" class=\"radio-label\">${i}</label>\n                                                </div>\n                                            `).join('')}\n                                        </div>\n                                    </div>\n                                `;\n\n                                const questionHtml = `\n                                    <div class=\"question-item\">\n                                        <p style=\"font-weight: bold; text-align: justify;\">${question}</p>\n                                        ${inputHtml}\n                                    </div>\n                                `;\n                                container.append(questionHtml);\n                            });\n\n                            percentage = (ratingSum / (totalQuestions * rating)) * 100;\n                            if (isNaN(percentage) || percentage === 0) {\n                                percentage = 0.00;\n                            }\n\n                            let overallRatingContainer = `\n                                <div class=\"overallRating\">\n                                    <label>Overall Rating (average the rating numbers above by percentage): </label>\n                                    <input class=\"percentage\" id=\"percentage\" style=\"justify-content: flex-end;\" value=\"${percentage.toFixed(2)}%\" />\n                                </div>\n                            `;\n\n                            container.append(overallRatingContainer);\n                            \n                            const endline = '<hr style=\"border: 1px solid #000000; margin-left: 10%; margin-right: 10%; margin-top: 5%;\">';\n                            container.append(endline);\n                            \n                            this.applyStyles(container);\n\n                        });\n                    }).catch(error => console.error('Error fetching existing answers:', error));\n                }\n                else {\n                    \n                    PerformanceAppraisalResponseService.List({\n                        Criteria: [[PerformanceAppraisalResponseRow.Fields.FormId], '=', this.FormId]\n                    }).then((response: ListResponse<any>) => {\n\n                        PerformanceAppraisalFormService.List({\n                            Criteria: [[PerformanceAppraisalFormRow.Fields.Id], '=', this.FormId]\n                        }).then(dateResponse => {\n\n                            for (const dateEntity of dateResponse.Entities) {\n                                startDate = dateEntity.StartDate;\n                                endDate = dateEntity.EndDate;\n                            }\n\n                            isEditable = this.isWithinDateRange(startDate, endDate, today);\n\n                            sortedQuestions.forEach(({ question, answertypeId }, index) => {\n                                let inputHtml: string;\n                                const existingAnswers = response.Entities.reduce((map, item) => {\n                                    map[item.Question] = item.Answer; // Map question text to answer\n                                    return map;\n                                }, {} as { [key: string]: string });\n                                const existingAnswer = existingAnswers[question] || '';\n\n                                function formatDate(dateString) {\n                                    const date = new Date(dateString);\n                                    const year = date.getFullYear();\n                                    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-based\n                                    const day = String(date.getDate()).padStart(2, '0');\n                                    return `${year}-${month}-${day}`;\n                                }\n\n                                if (answertypeId===2){\n                                    if (!textTypeAdded) {\n                                        const formattedStartDate = formatDate(startDate);\n                                        const formattedEndDate = formatDate(endDate);\n\n                                        container.append(`\n                                            <p class=\"reminder-text\">\n                                                Please complete the form between <span class=\"date-text\">${formattedStartDate}</span> and <span class=\"date-text\">${formattedEndDate}</span>.\n                                                During this period, you can edit and resubmit the form as needed. After the deadline, no further submissions or edits will be allowed.\n                                            </p>\n                                            <p class=\"instruction-text\">Appraisee to complete and return to the appraiser prior to the interview.</p>\n                                        `);\n                                        textTypeAdded = true;\n                                    }\n\n                                    inputHtml = `\n                                        <div class=\"text-answer\">\n                                            <textarea name=\"answer-${index}\" placeholder=\"Enter your answer here...\" \n                                                      style=\"width: 100%; height: 100px; background-color: ${isEditable ? 'white' : '#D3D3D3'};\" \n                                                      ${isEditable ? '' : 'readonly'} required>${existingAnswer}</textarea>\n                                        </div>\n                                    `;\n                                }else if (answertypeId===3) {\n                                    \n                                    totalQuestions = totalQuestions + 1;\n                                    ratingSum = ratingSum + parseInt(existingAnswer);\n                                    \n                                    if (!radioTypeAdded) {\n                                        container.append('' +\n                                            '<p class=\"instruction-radio\">Rate your capability or knowledge in the following areas based on your current role requirements. ' +\n                                            'Use the rating scale provided, where lower scores represent less capability and higher scores represent greater capability, from ' +\n                                            'left to right.</p>');\n                                        radioTypeAdded = true;\n                                    }\n\n                                    const ratingArray = Array.from({ length: rating }, (_, i) => i + 1);\n\n                                    inputHtml = `\n                                        <div class=\"rating-container\">\n                                            <div class=\"rating\" style=\"background-color: ${isEditable ? 'transparent' : '#D3D3D3'};\">\n                                                ${ratingArray.map(i => `\n                                                    <div class=\"radio-item\">\n                                                        <input type=\"radio\" name=\"answer-${index}\" value=\"${i}\" id=\"rating-${index}-${i}\" ${i == existingAnswer ? 'checked' : ''} ${isEditable ? '' : 'disabled'} required />\n                                                        <label for=\"rating-${index}-${i}\" class=\"radio-label\">${i}</label>\n                                                    </div>\n                                                `).join('')}\n                                            </div>\n                                        </div>\n                                    `;\n                                }\n\n                                const questionHtml = `\n                                    <div class=\"question-item\">\n                                        <p style=\"font-weight: bold; text-align: justify;\">${question}</p>\n                                        ${inputHtml}\n                                    </div>\n                                `;\n                                \n                                container.append(questionHtml);\n                            });\n\n                            percentage = (ratingSum / (totalQuestions * rating)) * 100;\n                            if (isNaN(percentage) || percentage === 0) {\n                                percentage = 0.00;\n                            }\n\n                            let overallRatingContainer = `\n                                <div class=\"overallRating\">\n                                    <label>Overall Rating (average the rating numbers above by percentage): </label>\n                                    <input class=\"percentage\" id=\"percentage\" style=\"justify-content: flex-end;\" value=\"${percentage.toFixed(2)}%\" />\n                                </div>\n                            `;\n\n                            container.append(overallRatingContainer);\n\n                            const endline = '<hr style=\"border: 1px solid #000000; margin-left: 10%; margin-right: 10%; margin-top: 5%;\">';\n                            container.append(endline);\n                            \n                            const saveButton = $('<button><i class=\"fa fa-save\"></i> Save</button>').appendTo(buttonContainer);\n                            const submitButton = $('<button><i class=\"fa fa-paper-plane\"></i> Submit</button>').appendTo(buttonContainer);\n                            \n                            buttonContainer.css({\n                                'position': 'relative',\n                                'z-index': 1000,\n                                'margin-bottom': '1%'\n                            });\n                            saveButton.css({\n                                'border': '1px solid #b1b1b1',\n                                'background-color': 'white',\n                                'padding': '7px 9px',\n                                'border-radius': '5px',\n                                'font-size': '16px',\n                                'cursor': 'pointer',\n                                'width': '80px',\n                                'display': 'inline-block',\n                                'margin-right': '5px'\n                            });\n                            submitButton.css({\n                                'border': '1px solid #b1b1b1',\n                                'background-color': 'white',\n                                'padding': '7px 9px',\n                                'border-radius': '5px',\n                                'font-size': '16px',\n                                'cursor': 'pointer',\n                                'width': '100px',\n                                'display': 'inline-block'\n                            });\n                            saveButton.hover(\n                                function() {\n                                    $(this).css({\n                                        'background-color': 'gray',\n                                        'color': 'black'\n                                    });\n                                },\n                                function() {\n                                    $(this).css({\n                                        'background-color': 'white',\n                                        'color': 'black'\n                                    });\n                                }\n                            );\n                            submitButton.hover(\n                                function() {\n                                    $(this).css({\n                                        'background-color': 'darkblue',\n                                        'color': 'white'\n                                    });\n                                },\n                                function() {\n                                    $(this).css({\n                                        'background-color': 'white',\n                                        'color': 'black'\n                                    });\n                                }\n                            );\n                            \n                            saveButton.on('click', () => {\n                                confirm(\"Save the answer as draft?\", () => {\n                                    this.saveData();\n                                });\n                            });\n\n                            submitButton.on('click', () => {\n                                confirm(\"Submit appraisal form?\", () => {\n                                    this.submitData();\n                                });\n                            });\n\n                            this.applyStyles(container);\n\n                        });\n                    }).catch(error => console.error('Error fetching existing answers:', error));\n                }\n            }\n        })\n\n        this.evaluation(buttonContainer);\n    }\n    \n    public evaluation(buttonContainer: JQuery){\n        PerformanceAppraisalFormService.List({\n            Criteria: [[PerformanceAppraisalFormRow.Fields.Id], '=', this.FormId]\n        }, response => {\n            \n            let today = new Date();\n            const dueDateStr = response.Entities[0].EvaluateStartDate;\n            const startDate = new Date(dueDateStr);\n            \n            if (response.Entities[0].SubmissionStatus === 2 && (today >= startDate)){\n                \n                const evaluateButton = $('<button><i class=\"fa fa-file-signature\"></i> Evaluation</button>').appendTo(buttonContainer);\n\n                buttonContainer.css({\n                    'position': 'relative',\n                    'z-index': 1000,\n                    'margin-bottom': '1%'\n                });\n                evaluateButton.css({\n                    'border': '1px solid #b1b1b1',\n                    'background-color': 'white',\n                    'padding': '7px 9px',\n                    'border-radius': '5px',\n                    'font-size': '16px',\n                    'cursor': 'pointer',\n                    'width': '125px',\n                    'display': 'inline-block',\n                    'margin-right': '5px'\n                });\n                evaluateButton.hover(\n                    function() {\n                        $(this).css({\n                            'background-color': 'darkred',\n                            'color': 'white'\n                        });\n                    },\n                    function() {\n                        $(this).css({\n                            'background-color': 'white',\n                            'color': 'black'\n                        });\n                    }\n                );\n                evaluateButton.on('click', () => {\n                    \n                    PerformanceAppraisalEvaluationService.List({\n                        Criteria: [[PerformanceAppraisalEvaluationRow.Fields.FormId], '=', this.FormId]\n                    }, formResponse => {\n                       \n                        if (formResponse.Entities.length > 0){\n                            \n                            const evaluationID = formResponse.Entities[0].Id;\n\n                            confirm(\"Evaluate this appraisal form?\", () => {\n                                var dialog = new PerformanceAppraisalEvaluationDialog();\n\n                                dialog.loadByIdAndOpenDialog(evaluationID);\n                            });\n                            \n                        }\n                        \n                    });\n                });\n            }\n\n            console.log(\"check1\");\n            \n        });\n    }\n\n    public applyStyles(container: JQuery): void {\n        \n        container.find('.warning-container').css({\n            'border': '1px solid #ffcc00',\n            'background-color': '#fff3cd',\n            'color': '#856404',\n            'padding': '15px',\n            'margin': '5px 0',\n            'margin-bottom': '40px',\n            'border-radius': '5px',\n            'font-family': 'Arial, sans-serif',\n            'font-size': '16px',\n            'text-align': 'center',\n            'margin-left': '10%',\n            'margin-right': '10%'\n        });\n        container.find('.question-item').css({\n            'margin-bottom': '25px',\n            'padding': '10px',\n            'border': '1px solid #ddd',\n            'border-radius': '5px',\n            'margin-right': '12%',\n            'margin-left': '12%'\n        });\n        container.find('.text-answer').css({\n            'margin-bottom': '10px'\n        });\n        container.find('.text-answer input[type=\"text\"]').css({\n            'width': '100%',\n            'height': '80px',\n            'padding': '8px',\n            'border': '1px solid #ccc',\n            'border-radius': '4px',\n            'font-size': '14px'\n        });\n        container.find('.rating-container').css({\n            'display': 'flex',\n            'align-items': 'center',\n            'justify-content': 'flex-end'\n        });\n        container.find('.rating').css({\n            'display': 'flex',\n            'align-items': 'center',\n            'justify-content': 'space-between'\n        });\n        container.find('.overallRating').css({\n            'margin-bottom': '25px',\n            'padding': '10px',\n            'border': '1px solid #000000',\n            'border-radius': '5px',\n            'margin-right': '12%',\n            'margin-left': '12%',\n            'font-weight': 'bold',\n            'background-color': '#b1b1b1',\n            'display': 'flex',           // Use Flexbox\n            'justify-content': 'space-between', // Space between the label and percentage\n            'align-items': 'center'      // Vertically align elements\n        });\n        container.find('.percentage').css({\n            'font-weight': 'bold',      // Make the percentage stand out\n            'text-align': 'right',       // Align text to the right\n            'margin-right': '5%',\n            'margin-top': '1%'\n        });\n        container.find('.rating input[type=\"radio\"]').css({\n            'margin-left': '30px',\n            'margin-right': '30px',\n            'width': '20px',\n            'height': '20px'\n        });\n        container.find('.instruction-text').css({\n            'font-weight': 'bold',\n            'margin-bottom': '25px',\n            'margin-left': '12%',\n            'color': 'darkblue',\n            'font-size': '17px'\n        });\n        container.find('.reminder-text').css({\n            'font-weight': 'bold',\n            'margin-bottom': '25px',\n            'margin-left': '12%',\n            'margin-right': '12%',\n            'color': 'darkred',\n            'font-size': '17px',\n            'text-align': 'justify'\n        });\n        container.find('.reminder-text .date-text').css({\n            'color': 'orange', \n            'font-weight': 'bold',\n            'font-size': '18px'\n        });\n        container.find('.instruction-radio-label').css({\n            'font-weight': 'bold',\n            'margin-bottom': '5px',\n            'margin-right': '13%',\n            'text-align': 'right',\n            'color': 'darkred',\n            'font-size': '16px'\n        });\n        container.find('.instruction-radio').css({\n            'font-weight': 'bold',\n            'margin-top': '3%',\n            'margin-bottom': '15px',\n            'margin-left': '12%',\n            'margin-right': '13%',\n            'color': 'darkblue',\n            'font-size': '17px',\n            'text-align': 'justify'\n        });\n        container.find('.radio-item').css({\n            'display': 'flex',\n            'flex-direction': 'column',\n            'align-items': 'center',\n            'margin-right': '10px'\n        });\n        container.find('.radio-label').css({\n            'margin-top': '5px',\n            'font-size': '10px',\n            'font-weight': 'bold'\n        });\n    }\n\n    public isEmptyOrNull(value: any): boolean {\n        return value === null || value === undefined || value === '';\n    }\n\n    public saveData(): void {\n        const answers = [];\n        let percentage = 0;\n        let ratingSum = 0;\n        let totalQuestions = 0;\n\n        PerformanceAppraisalFormService.List({\n            Criteria: [[PerformanceAppraisalFormRow.Fields.Id], '=', this.FormId]\n        }, async formResponse => {\n\n            await PerformanceAppraisalTemplateService.List({\n                Criteria: [[PerformanceAppraisalTemplateRow.Fields.Id], '=', formResponse.Entities[0].TemplateId]\n            }, async tempResponse => {\n\n                let rating = tempResponse.Entities[0].RatingScale;\n\n                $('#questions-container .question-item').each((index, element) => {\n                    let answerValue: string;\n        \n                    if (this.answertypelst[index] === 2) {\n                        answerValue = $(element).find('textarea[name^=\"answer-\"]').val()?.toString() || '';\n                    } else if (this.answertypelst[index] === 3) {\n                        answerValue = $(element).find('input[name^=\"answer-\"]:checked').val()?.toString() || '';\n\n                        if (isNaN(parseInt(answerValue)) || parseInt(answerValue) === 0)\n                        {\n                            answerValue = '0';\n                        }\n                        ratingSum = ratingSum + parseInt(answerValue);\n                        totalQuestions = totalQuestions + 1;\n                        \n                    } else {\n                        answerValue = $(element).find('input[name^=\"answer-\"]').val()?.toString() || '';\n                    }\n        \n                    const question = this.questionlst[index];\n                    const answerType = this.answertypelst[index] === 2 ? 'text' : this.answertypelst[index] === 3 ? 'rating' : this.answertypelst[index];\n                    \n                    answers.push({\n                        Question: question,\n                        Answer: answerValue,\n                        AnswerType: answerType,\n                        FormID: this.FormId\n                    });\n                });\n\n                percentage = (ratingSum / (totalQuestions * rating)) * 100;\n                if (isNaN(percentage) || percentage === 0) {\n                    percentage = 0.00;\n                } else {\n                    percentage = parseFloat(percentage.toFixed(2));\n                }\n                \n                PerformanceAppraisalResponseService.List({\n                    Criteria: [[PerformanceAppraisalResponseRow.Fields.FormId], '=', this.FormId]\n                }).then((response: ListResponse<any>) => {\n                    const existingAnswers = response.Entities;\n        \n                    const createAnswers = [];\n                    const updateAnswers = [];\n        \n                    answers.forEach(answer => {\n                        const existingAnswer = existingAnswers.find(e => e.Question === answer.Question);\n        \n                        if (existingAnswer) {\n                            updateAnswers.push({\n                                ...answer,\n                                Id: existingAnswer.Id\n                            });\n                        } else {\n                            createAnswers.push(answer);\n                        }\n                    });\n        \n                    createAnswers.forEach(answer => {\n                        PerformanceAppraisalResponseService.Create({\n                            Entity: answer\n                        }).then(\n                            (response: SaveResponse) => {\n                                // console.log('Create successfully:', response);\n                                alertDialog(\"Answer have been saved.\");\n                            }\n                        ).catch(\n                            (error: any) => {\n                                console.error('Error:', error);\n                            }\n                        );\n                    });\n        \n                    updateAnswers.forEach(answer => {\n                        PerformanceAppraisalResponseService.Update({\n                            Entity: answer\n                        }).then(\n                            (response: SaveResponse) => {\n                                // console.log('Update successfully:', response);\n                                alertDialog(\"Answer have been saved.\");\n                            }\n                        ).catch(\n                            (error: any) => {\n                                console.error('Error:', error);\n                            }\n                        );\n                    });\n        \n                    PerformanceAppraisalFormService.Update({\n                        EntityId: this.FormId,\n                        Entity: {\n                            SubmissionStatus: 3\n                        }\n                    }).then(\n                        (response: SaveResponse) => {\n                            // console.log('Form SubmissionStatus updated to 2:', response);\n                        }\n                    ).catch(\n                        (error: any) => {\n                            console.error('Error updating SubmissionStatus:', error);\n                        }\n                    );\n\n                    PerformanceAppraisalEvaluationService.List({\n                        Criteria: [[PerformanceAppraisalEvaluationRow.Fields.FormId], '=', this.FormId]\n                    }, evaResponse => {\n\n                        if (evaResponse.Entities.length > 0){\n                            PerformanceAppraisalEvaluationService.Update({\n\n                                EntityId: evaResponse.Entities[0].Id,\n                                Entity: {\n                                    OverallRate: percentage\n                                }\n                            });\n                        } else {\n                            PerformanceAppraisalEvaluationService.Create({\n\n                                EntityId: this.FormId,\n                                Entity: {\n                                    FormId: this.FormId,\n                                    OverallRate: percentage\n                                }\n                            });\n                        }\n\n                    });\n        \n                }).catch((error: any) => {\n                    console.error('Error checking FormID:', error);\n                });\n        \n                setTimeout(() => {\n                    this.dialogClose();\n                    window.location.reload();\n                }, 1000);\n            });\n\n        });\n    }\n\n    public submitData(): void {\n        const answers = [];\n        let percentage = 0;\n        let ratingSum = 0;\n        let totalQuestions = 0;\n        \n        PerformanceAppraisalFormService.List({\n            Criteria: [[PerformanceAppraisalFormRow.Fields.Id], '=', this.FormId]\n        }, async formResponse => {\n            \n            await PerformanceAppraisalTemplateService.List({\n                Criteria: [[PerformanceAppraisalTemplateRow.Fields.Id], '=', formResponse.Entities[0].TemplateId]\n            }, async tempResponse => {\n\n                let rating = tempResponse.Entities[0].RatingScale;\n\n                $('#questions-container .question-item').each((index, element) => {\n                    let answerValue: string;\n\n                    if (this.answertypelst[index] === 2) {\n                        answerValue = $(element).find('textarea[name^=\"answer-\"]').val()?.toString() || '';\n                    } else if (this.answertypelst[index] === 3) {\n                        answerValue = $(element).find('input[name^=\"answer-\"]:checked').val()?.toString() || '';\n\n                        ratingSum = ratingSum + parseInt(answerValue);\n                        totalQuestions = totalQuestions + 1;\n\n                    } else {\n                        answerValue = $(element).find('input[name^=\"answer-\"]').val()?.toString() || '';\n                    }\n\n                    if (this.isEmptyOrNull(answerValue)) {\n                        // Q.notifyWarning(\"Please fill in all required fields.\");\n                        return false;\n                    }\n\n                    const question = this.questionlst[index];\n                    const answerType = this.answertypelst[index] === 2 ? 'text' : this.answertypelst[index] === 3 ? 'rating' : this.answertypelst[index];\n\n                    answers.push({\n                        Question: question,\n                        Answer: answerValue,\n                        AnswerType: answerType,\n                        FormID: this.FormId\n                    });\n                });\n\n                percentage = (ratingSum / (totalQuestions * rating)) * 100;\n                if (isNaN(percentage) || percentage === 0) {\n                    percentage = 0.00;\n                }else {\n                    percentage = parseFloat(percentage.toFixed(2));\n                }\n\n                if (this.validateForm()) {\n                    PerformanceAppraisalResponseService.List({\n                        Criteria: [[PerformanceAppraisalResponseRow.Fields.FormId], '=', this.FormId]\n                    }).then((response: ListResponse<any>) => {\n                        const existingAnswers = response.Entities;\n    \n                        const createAnswers = [];\n                        const updateAnswers = [];\n    \n                        answers.forEach(answer => {\n                            const existingAnswer = existingAnswers.find(e => e.Question === answer.Question);\n    \n                            if (existingAnswer) {\n                                updateAnswers.push({\n                                    ...answer,\n                                    Id: existingAnswer.Id\n                                });\n                            } else {\n                                createAnswers.push(answer);\n                            }\n                        });\n    \n                        createAnswers.forEach(answer => {\n                            PerformanceAppraisalResponseService.Create({\n                                Entity: answer\n                            }).then(\n                                (response: SaveResponse) => {\n                                    // console.log('Create successfully:', response);\n                                }\n                            ).catch(\n                                (error: any) => {\n                                    console.error('Error:', error);\n                                }\n                            );\n                        });\n    \n                        updateAnswers.forEach(answer => {\n                            PerformanceAppraisalResponseService.Update({\n                                Entity: answer\n                            }).then(\n                                (response: SaveResponse) => {\n                                    // console.log('Update successfully:', response);\n                                }\n                            ).catch(\n                                (error: any) => {\n                                    console.error('Error:', error);\n                                }\n                            );\n                        });\n    \n                        PerformanceAppraisalFormService.Update({\n                            EntityId: this.FormId,\n                            Entity: {\n                                SubmissionStatus: 2\n                            }\n                        }).then(\n                            (response: SaveResponse) => {\n                                // console.log('Form SubmissionStatus updated to 2:', response);\n                                this.onSaveSuccess({ EntityId: this.FormId });\n                            }\n                        ).catch(\n                            (error: any) => {\n                                console.error('Error updating SubmissionStatus:', error);\n                            }\n                        );\n                        \n                        PerformanceAppraisalEvaluationService.List({\n                            Criteria: [[PerformanceAppraisalEvaluationRow.Fields.FormId], '=', this.FormId]\n                        }, evaResponse => {\n                            \n                            if (evaResponse.Entities.length > 0){\n                                PerformanceAppraisalEvaluationService.Update({\n\n                                    EntityId: evaResponse.Entities[0].Id,\n                                    Entity: {\n                                        OverallRate: percentage\n                                    }\n                                });\n                            } else {\n                                PerformanceAppraisalEvaluationService.Create({\n                                    Entity: {\n                                        FormId: this.FormId,\n                                        OverallRate: percentage\n                                    }\n                                });\n                            }\n                            \n                        });\n    \n                    }).catch((error: any) => {\n                        console.error('Error checking FormID:', error);\n                        // Optionally handle errors related to FormID checking\n                    });\n                }\n\n            });\n            \n        });\n    }\n\n    protected onSaveSuccess(response: SaveResponse): void {\n        super.onSaveSuccess(response);\n        alertDialog(\"Your appraisal form have been submitted.\");\n        \n        setTimeout(() => {\n            this.dialogClose();\n            window.location.reload();\n        }, 1000);\n    }\n\n    public validateForm(): boolean {\n        let isValid = true;\n        let hasError = false;\n\n        $('#questions-container .question-item').each((index, element) => {\n            let answerValue: string;\n\n            if (this.answertypelst[index] === 2) {\n                answerValue = $(element).find('textarea[name^=\"answer-\"]').val()?.toString() || '';\n            } else if (this.answertypelst[index] === 3) {\n                answerValue = $(element).find('input[name^=\"answer-\"]:checked').val()?.toString() || '';\n            } else {\n                answerValue = $(element).find('input[name^=\"answer-\"]').val()?.toString() || '';\n            }\n\n            if (this.isEmptyOrNull(answerValue)) {\n                isValid = false;\n                hasError = true;\n                $(element).find('input, .rating').addClass('error');\n\n                // remove old error message\n                $(element).find('.error-message').remove();\n            } else {\n                $(element).find('input, .rating').removeClass('error');\n                $(element).find('.error-message').remove();\n            }\n        });\n\n        if (hasError) {\n            alertDialog(\"Please fill in all required fields.\");\n        }\n\n        return isValid;\n    }\n\n}\n"],
  "mappings": "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",
  "names": ["import_corelib", "import_q", "PerformanceAppraisalResponseDialog", "PerformanceAppraisalResponseForm", "PerformanceAppraisalResponseRow", "PerformanceAppraisalResponseService", "FormId", "TemplateId", "TargetID", "buttonContainer", "targetInfoContainer", "container", "todayDate", "questionIds", "questions", "answertypeIds", "targetname", "targetId", "department", "jobTitle", "string_startDate", "string_endDate", "submitDate", "rating", "EmployeeProfileService", "EmployeeProfileRow", "response", "index", "entity", "PerformanceAppraisalFormService", "PerformanceAppraisalFormRow", "dateResponse", "dateEntity", "record", "formatDate", "dateString", "date", "year", "month", "day", "__name", "formattedStartDate", "formattedEndDate", "formattedPeriodEndDate", "PerformanceAppraisalTemplateService", "PerformanceAppraisalTemplateRow", "templateResponse", "PerformanceAppraisalTemplateQuestionService", "PerformanceAppraisalTemplateQuestionRow", "questionId", "PerformanceAppraisalQuestionService", "PerformanceAppraisalQuestionRow", "response1", "questionEntity", "button", "response2", "employeeInfoContainer", "employeeName", "employeeId", "employeeInfoHtml", "startDate", "endDate", "today", "start", "end", "sortedQuestions", "question", "a", "b", "q", "textTypeAdded", "radioTypeAdded", "isEditable", "stringToday", "ratingSum", "totalQuestions", "percentage", "formattedTodayDate", "formResponse", "dueDateStr", "dueDate", "warningMSG", "textQuestions", "ratingQuestions", "answer", "answerType", "inputHtml", "questionHtml", "ratingArray", "_", "i", "overallRatingContainer", "answertypeId", "existingAnswer", "map", "item", "endline", "error", "saveButton", "submitButton", "evaluateButton", "PerformanceAppraisalEvaluationService", "PerformanceAppraisalEvaluationRow", "evaluationID", "dialog", "PerformanceAppraisalEvaluationDialog", "value", "answers", "__async", "tempResponse", "element", "_a", "_b", "_c", "answerValue", "existingAnswers", "createAnswers", "updateAnswers", "e", "__spreadProps", "__spreadValues", "evaResponse", "isValid", "hasError", "__decorateClass"]
}
