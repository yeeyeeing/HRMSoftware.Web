{
  "version": 3,
  "sources": ["../../../Modules/HumanResource/EmployeeProfile/UserCreation/UserCreationDialog.ts"],
  "sourcesContent": ["import { Decorators, EntityDialog, EditorUtils, Criteria, RetrieveResponse } from '@serenity-is/corelib';\nimport { EmployeeProfileRow, UserCreationForm, UserCreationRow, UserCreationService } from '../../../ServerTypes/EmployeeProfile';\nimport { alertDialog, isEmptyOrNull } from '@serenity-is/corelib/q';\nimport { confirm, serviceCall, notifySuccess, notifyError } from '@serenity-is/corelib/q';\nimport { Select2Editor } from '@serenity-is/corelib';\nimport { EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { PayrollDialog } from '../../../Payroll/PayrollDialog';\nimport { PayrollWizDialog } from '../../PayrollWiz/PayrollWizDialog';\nimport { PayrollWizardDialog } from '../../PayrollWizard/PayrollWizardDialog';\nimport { CompanySettingsService } from '../../../ServerTypes/CompanySettings';\nimport { UserService } from '../../../ServerTypes/Administration';\n\n@Decorators.registerClass('HRMSoftware.EmployeeProfile.UserCreationDialog')\nexport class UserCreationDialog extends EntityDialog<UserCreationRow, any> {\n    protected getFormKey() { return UserCreationForm.formKey; }\n    protected getRowDefinition() { return UserCreationRow; }\n    protected getService() { return UserCreationService.baseUrl; }\n\n    protected form = new UserCreationForm(this.idPrefix);\n    public multipleSelectHr: any;\n    public UserNamePrefix: string;\n    public PasswordPrefix: string;\n\n    public SearchCallback(): void {\n        var self = this\n        function findEmployee(data, id) {\n            return data.find(item => item.id == id.toString());\n        }\n        if (self.form.AllEmployee.value == true) {\n            self.form.AllEmployee.value = false\n            self.form.EmployeeRowList.value = ''\n        }\n\n\n\n        var OccupationListElement = document.getElementById(this.idPrefix + 'OccupationList');\n        var DepartmentListElement = document.getElementById(this.idPrefix + 'DepartmentList');\n        var DivisionListElement = document.getElementById(this.idPrefix + 'DivisionList');\n        var JobGradeListElement = document.getElementById(this.idPrefix + 'JobGradeList');\n        var SectionListElement = document.getElementById(this.idPrefix + 'SectionList');\n\n        var JobGradeStr = $(JobGradeListElement).val()\n        let JobGradeList = [];\n        let numbers = JobGradeStr.split(',')\n        if (JobGradeStr.length)\n            numbers.forEach(number => {\n                JobGradeList.push(parseInt(number)); // Convert string to integer and push to numberList\n            })\n        var SectionStr = $(SectionListElement).val()\n        let SectionList = [];\n        numbers = SectionStr.split(',')\n        if (SectionStr.length)\n            numbers.forEach(number => {\n                SectionList.push(parseInt(number)); // Convert string to integer and push to numberList\n            })\n        var DivisionStr = $(DivisionListElement).val()\n        numbers = DivisionStr.split(',')\n        let DivisionList = [];\n        if (DivisionStr.length)\n            numbers.forEach(number => {\n                DivisionList.push(parseInt(number)); // Convert string to integer and push to numberList\n            })\n        var DepartmentStr = $(DepartmentListElement).val()\n        numbers = DepartmentStr.split(',')\n        let DepartmentList = [];\n        if (DepartmentStr.length)\n            numbers.forEach(number => {\n                DepartmentList.push(parseInt(number)); // Convert string to integer and push to numberList\n            })\n        var OccupationStr = $(OccupationListElement).val()\n        numbers = OccupationStr.split(',')\n        let OccupationList = [];\n        if (OccupationStr.length)\n            numbers.forEach(number => {\n                OccupationList.push(parseInt(number)); // Convert string to integer and push to numberList\n            })\n        var criteria: any;\n\n        EmployeeProfileService.List({\n            Criteria: Criteria.and(criteria, [[EmployeeProfileRow.Fields.Terminated], '=', 0]\n                , [[EmployeeProfileRow.Fields.Resigned], '=', 0]\n                , [[EmployeeProfileRow.Fields.Retired], '=', 0])\n        }, response => {\n            let EmployeeBuffer: any[] = []\n            for (var index in response.Entities) {\n                if (response.Entities[index].CreateUser == true)\n                    continue\n                var found = 0\n                for (var JobGradeIndex in JobGradeList) {\n                    if (response.Entities[index].JobGradeID == JobGradeList[JobGradeIndex]) {\n                        found = 1\n                        break\n                    }\n                }\n                for (var DivisionIndex in DivisionList) {\n                    if (response.Entities[index].DivisionID == DivisionList[DivisionIndex]) {\n                        found = 1\n                        break\n                    }\n                }\n                for (var DepartmentIndex in DepartmentList) {\n                    if (response.Entities[index].DepartmentID == DepartmentList[DepartmentIndex]) {\n                        found = 1\n                        break\n                    }\n                }\n                for (var OccupationIndex in OccupationList) {\n                    if (response.Entities[index].OccupationID == OccupationList[OccupationIndex]) {\n                        found = 1\n                        break\n                    }\n                }\n                for (var SectionIndex in SectionList) {\n                    if (response.Entities[index].SectionID == SectionList[SectionIndex]) {\n                        found = 1\n                        break\n                    }\n                }\n                if (found == 0) {\n                    let EmployeeRowList = []\n                    var EmployeeRowString = self.form.EmployeeRowList.value\n                    if (EmployeeRowString != \"\") {\n                        let EmployeeRowListBuffer = EmployeeRowString.split(',')\n                        EmployeeRowListBuffer.forEach(number => {\n                            EmployeeRowList.push(parseInt(number)); // Convert string to integer and push to numberList\n                        })\n                        EmployeeRowList = EmployeeRowList.filter(number => number !== response.Entities[index].Id);\n                        self.form.EmployeeRowList.value = EmployeeRowList.join(',')\n                    }\n                    else\n                        self.form.EmployeeRowList.value = \"\"\n                }\n                else {\n\n                    var obj = findEmployee(self.originalItems, response.Entities[index].Id)\n                    EmployeeBuffer.push(obj)\n                    let EmployeeRowList = []\n                    var EmployeeRowString = self.form.EmployeeRowList.value\n                    if (EmployeeRowString != \"\") {\n                        if (EmployeeRowString.includes(',')) {\n                            let EmployeeRowListBuffer = EmployeeRowString.split(',')\n                            EmployeeRowListBuffer.forEach(number => {\n                                EmployeeRowList.push(parseInt(number)); // Convert string to integer and push to numberList\n                            })\n                            if (EmployeeRowList.indexOf(response.Entities[index].Id) === -1)\n                                self.form.EmployeeRowList.value = self.form.EmployeeRowList.value + ' , ' + response.Entities[index].Id.toString()\n                        }\n                        else\n                            self.form.EmployeeRowList.value = self.form.EmployeeRowList.value + ' , ' + response.Entities[index].Id.toString()\n                    }\n                    else\n                        self.form.EmployeeRowList.value = response.Entities[index].Id.toString()\n                }\n            }\n            $(self.form.EmployeeRowHrPriveledge).trigger('change')\n            self.form.EmployeeRowHrPriveledge.items = EmployeeBuffer\n            self.form.EmployeeRowHrPriveledge.values = self.form.EmployeeRowHrPriveledge.values.filter(item => self.form.EmployeeRowList.values.includes(item));\n\n\n        })\n\n\n\n    }\n    public PartialSearchCallback(): void {\n        var self = this\n        function findEmployee(data, id) {\n            return data.find(item => item.id == id.toString());\n        }\n        let EmployeeBuffer: any[] = []\n        for (var index in this.form.EmployeeRowList.values) {\n            var obj = findEmployee(self.originalItems, this.form.EmployeeRowList.values[index])\n            EmployeeBuffer.push(obj)\n        }\n        this.form.EmployeeRowHrPriveledge.values = this.form.EmployeeRowHrPriveledge.values.filter(item => this.form.EmployeeRowList.values.includes(item));\n        self.form.EmployeeRowHrPriveledge.items = EmployeeBuffer\n    }\n    public counter: number;\n    public originalItems: any[];\n\n    public WaitingCounter: number;\n    protected getToolbarButtons() {\n        var self = this;\n        var buttons = super.getToolbarButtons();\n        $(\"#\" + this.idPrefix + 'Toolbar').addClass(\"ms-auto\")\n        buttons.push(\n            {\n\n                title: \"Create Accounts\",\t// *** Get button text from translation\n                cssClass: 'text-bg-success p-2 ml-auto',\n                icon: 'fas fa-hat-wizard text-green',\n                onClick: () => {\n                    if (self.form.EmployeeRowList.value.length == 0) {\n                        alertDialog(\"No employee account to create\")\n\n                        return\n                    }\n\n                    confirm(//  the user confirm dont want to download\n                        \"Are you sure to create account for these employees?\",\n                        () => {\n\n                            if (isEmptyOrNull(self.form.EmployeeRowList.value)) {\n                                notifyError('No employee is selected');\n                                return\n                            }\n                            var EmployeeRowIdString = self.form.EmployeeRowList.value\n                            let EmployeeRowIdList = [];\n                            let numbers = EmployeeRowIdString.split(',')\n                            if (EmployeeRowIdString.length)\n                                numbers.forEach(number => {\n                                    EmployeeRowIdList.push(parseInt(number)); // Convert string to integer and push to numberList\n                                })\n                            var listOfUsedUsername: string[] = [];\n\n                            UserService.List({}, response => {\n                                console.log(response);\n                                for (var res in response.Entities)\n                                    listOfUsedUsername.push(response.Entities[res].Username);\n\n                                async function processEmployees(EmployeeRowIdList: number[]) {\n                                    let listOfUsername: string[] = [];\n                                    let listOfPassword: string[] = [];\n                                    let employeeList: EmployeeProfileRow[] = [];\n                                    let fail = 0;\n\n                                    // Collect all retrieval promises\n                                    let retrievePromises = EmployeeRowIdList.map(id =>\n                                        new Promise<void>((resolve, reject) => {\n                                            EmployeeProfileService.Retrieve({ EntityId: id }, response => {\n                                                if (!isEmptyOrNull(response.Entity.EmployeeID)) {\n                                                    let Username = self.UserNamePrefix + response.Entity.EmployeeID;\n                                                    let PassWord = self.PasswordPrefix + response.Entity.EmployeeID;\n\n                                                    if (Username.length < 5 || PassWord.length < 6) {\n                                                        alertDialog(`Username must be at least 5 characters, Password must be at least 6 characters. Error in creating ${response.Entity.EmployeeID} ${response.Entity.EmployeeName}`);\n                                                        fail = 1;\n                                                        reject(); // Reject promise on failure\n                                                        return;\n                                                    }\n\n                                                    if (listOfUsedUsername.indexOf(Username) !== -1) {\n                                                        alertDialog(`Username ${Username} for Employee ${response.Entity.EmployeeID} ${response.Entity.EmployeeName} already exists, create failed`);\n                                                        fail = 1;\n                                                        reject();\n                                                        return;\n                                                    }\n\n                                                    listOfPassword.push(PassWord);\n                                                    listOfUsername.push(Username);\n                                                    employeeList.push(response.Entity);\n                                                }\n                                                resolve();\n                                            });\n                                        })\n                                    );\n\n                                    try {\n                                        await Promise.all(retrievePromises);\n                                    } catch {\n                                        console.error(\"One or more retrievals failed.\");\n                                        return; // Stop execution if any retrieval failed\n                                    }\n\n                                    // If fail is set, stop execution\n                                    if (fail === 1) {\n                                        return;\n                                    }\n\n                                    // Process user creation\n                                    let createUserPromises = listOfUsername.map((Username, i) =>\n                                        new Promise<void>((resolve, reject) => {\n                                            let PassWord = listOfPassword[i];\n\n                                            UserService.Create({\n                                                Entity: {\n                                                    \"Username\": Username,\n                                                    \"DisplayName\": employeeList[i].EmployeeName,\n                                                    \"Password\": PassWord,\n                                                    \"PasswordConfirm\": PassWord,\n                                                    \"Email\": employeeList[i].EmployeeEmail,\n                                                    \"MobilePhoneNumber\": employeeList[i].TelNumber1,\n                                                    \"EmployeeRowID\": employeeList[i].Id\n                                                }\n                                            }, response => {\n                                                var userRowId = response.EntityId\n                                                let updateData: EmployeeProfileRow = {};\n\n                                                if (self.form.EmployeeRowHrPriveledge.values.indexOf(employeeList[i].Id.toString()) !== -1)\n                                                    updateData.GrantHRPrivilege = true\n                                                updateData.UserPassword = PassWord\n                                                updateData.UserName = Username\n                                                updateData.CreateUser = true\n                                                updateData.UserRowID = userRowId\n\n                                                EmployeeProfileService.Update({\n                                                    EntityId: employeeList[i].Id,\n                                                    Entity: updateData\n                                                }, () => resolve(), () => reject());\n                                            }, () => reject());\n                                        })\n                                    );\n\n                                    try {\n                                        await Promise.all(createUserPromises);\n\n                                        console.log(\"All users created and updated successfully.\");\n\n                                        // \u2705 Moved inside to only trigger on success\n                                        notifySuccess(\n                                            `Account creation success, username will be in format ${self.UserNamePrefix}{EmployeeID},\n                                            default password will be in format ${self.PasswordPrefix}{EmployeeID}`\n                                        );\n                                        self.loadEntity({});\n\n\n                                    } catch {\n                                        console.error(\"Some user creations failed.\");\n                                    }\n                                }\n\n                                // Run the function\n                                processEmployees(EmployeeRowIdList);\n\n                            });\n\n                        })\n                },\n            }\n        );\n        return buttons\n    }\n\n    public dialogOpen(asPanel?: boolean): void {\n        super.dialogOpen();\n        var self = this\n        \n        $.ajax({\n            type: \"POST\",\n            url: '/GetUserNamePasswordPrefix',\n            success: function (response) {\n                console.log(response);\n                const result = response.split(',');\n                self.UserNamePrefix = result[0]\n                self.PasswordPrefix = result[1]\n            },\n            error: function (xhr, status, error) {\n                console.error('Error saving image:', error);\n            }\n        })\n \n        this.saveAndCloseButton.hide()\n        this.editButton.hide()\n        this.applyChangesButton.hide()\n        this.deleteButton.hide()\n        this.localizationButton.hide()\n        this.cloneButton.hide()\n        this.undeleteButton.hide()\n\n        this.originalItems = Array.from(this.form.EmployeeRowHrPriveledge.items)\n        this.form.EmployeeRowHrPriveledge.clearItems()\n \n        var self = this;\n\n\n        var SectionListElement = document.getElementById(this.idPrefix + 'SectionList');\n        var OccupationListElement = document.getElementById(this.idPrefix + 'OccupationList');\n        var DepartmentListElement = document.getElementById(this.idPrefix + 'DepartmentList');\n        var DivisionListElement = document.getElementById(this.idPrefix + 'DivisionList');\n        var JobGradeListElement = document.getElementById(this.idPrefix + 'JobGradeList');\n        var EmployeeRowIdListElement = document.getElementById(this.idPrefix + 'EmployeeRowList');\n        var AllEmployeeElement = document.getElementById(this.idPrefix + 'AllEmployee');\n        $(SectionListElement).on('change', async function () {\n            self.SearchCallback()\n        })\n        $(OccupationListElement).on('change', async function () {\n            self.SearchCallback()\n        })\n        $(DivisionListElement).on('change', async function () {\n            self.SearchCallback();\n        })\n        $(JobGradeListElement).on('change', async function () {\n            self.SearchCallback();\n        })\n        $(DepartmentListElement).on('change', async function () {\n            self.SearchCallback();\n        })\n        $(EmployeeRowIdListElement).on('change', async function () {\n            self.PartialSearchCallback();\n        })\n        $(AllEmployeeElement).on('change', async function () {\n            if (self.form.AllEmployee.value == true) {\n                self.form.DepartmentList.value = ''\n                self.form.SectionList.value = ''\n                self.form.DivisionList.value = ''\n                self.form.JobGradeList.value = ''\n                self.form.OccupationList.value = ''\n                self.form.EmployeeRowList.value = ''\n                var criteria: any;\n\n                EmployeeProfileService.List({\n                    Criteria: Criteria.and(criteria, [[EmployeeProfileRow.Fields.Terminated], '=', 0]\n                        , [[EmployeeProfileRow.Fields.Resigned], '=', 0]\n                        , [[EmployeeProfileRow.Fields.Retired], '=', 0]\n                        , [[EmployeeProfileRow.Fields.CreateUser], '=', 0]\n                    )\n                }, response => {\n                    let EmployeeRowList = []\n\n                    for (var index in response.Entities) {\n                        var number = response.Entities[index].Id\n                        EmployeeRowList.push(number); // Convert string to integer and push to numberList\n\n                    }\n                    self.form.EmployeeRowList.value = EmployeeRowList.join(',')\n\n\n                })\n\n            }\n            else\n                self.form.EmployeeRowList.value = ''\n        })\n\n\n\n    }\n\n\n}"],
  "mappings": "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",
  "names": ["import_corelib", "import_q", "UserCreationDialog", "UserCreationForm", "UserCreationRow", "UserCreationService", "self", "findEmployee", "data", "id", "item", "__name", "OccupationListElement", "DepartmentListElement", "DivisionListElement", "JobGradeListElement", "SectionListElement", "JobGradeStr", "JobGradeList", "numbers", "number", "SectionStr", "SectionList", "DivisionStr", "DivisionList", "DepartmentStr", "DepartmentList", "OccupationStr", "OccupationList", "criteria", "EmployeeProfileService", "EmployeeProfileRow", "response", "EmployeeBuffer", "index", "found", "JobGradeIndex", "DivisionIndex", "DepartmentIndex", "OccupationIndex", "SectionIndex", "EmployeeRowList", "EmployeeRowString", "obj", "buttons", "EmployeeRowIdString", "EmployeeRowIdList", "listOfUsedUsername", "UserService", "res", "processEmployees", "__async", "listOfUsername", "listOfPassword", "employeeList", "fail", "retrievePromises", "resolve", "reject", "Username", "PassWord", "e", "createUserPromises", "i", "userRowId", "updateData", "asPanel", "result", "xhr", "status", "error", "EmployeeRowIdListElement", "AllEmployeeElement", "__decorateClass"]
}
