{
  "version": 3,
  "sources": ["../../../Modules/HumanResource/PerformanceAppraisal/PerformanceAppraisalEvaluation/PerformanceAppraisalEvaluationDialog.ts"],
  "sourcesContent": ["import { Decorators, EntityDialog, SaveResponse} from '@serenity-is/corelib';\nimport { Authorization } from '@serenity-is/corelib/q';\nimport { PerformanceAppraisalEvaluationForm, \n    PerformanceAppraisalEvaluationRow, \n    PerformanceAppraisalEvaluationService,\n    PerformanceAppraisalFormService,\n    PerformanceAppraisalFormRow,\n} from '../../../ServerTypes/PerformanceAppraisal';\n\n@Decorators.registerClass('HRMSoftware.PerformanceAppraisal.PerformanceAppraisalEvaluationDialog')\nexport class PerformanceAppraisalEvaluationDialog extends EntityDialog<PerformanceAppraisalEvaluationRow, any> {\n    protected getFormKey() { return PerformanceAppraisalEvaluationForm.formKey; }\n    protected getRowDefinition() { return PerformanceAppraisalEvaluationRow; }\n    protected getService() { return PerformanceAppraisalEvaluationService.baseUrl; }\n\n    protected form = new PerformanceAppraisalEvaluationForm(this.idPrefix);\n\n    protected onDialogOpen(): void {\n        super.onDialogOpen();\n\n        this.dialogTitle = \"Evaluation Form\";\n        this.cloneButton.hide();\n        this.undeleteButton.hide();\n        this.localizationButton.hide();\n        this.deleteButton.hide();\n\n        this.element.closest(\".ui-dialog\").css({\n            \"position\": \"fixed\",\n            \"left\": \"2%\",\n            \"transform\": \"none\",\n            \"height\": \"730px\",\n            \"width\": \"800px\"\n        });\n        \n        PerformanceAppraisalEvaluationService.Retrieve({\n            EntityId: this.entityId\n        }, response => {\n            console.log(response.Entity.HodSignDate);\n            let a = response.Entity.HodSignDate;\n            \n        })\n\n        PerformanceAppraisalEvaluationService.List({\n            Criteria: [[PerformanceAppraisalEvaluationRow.Fields.Id], '=', this.entityId]\n        }, async response => {\n            if (response.Entities.length > 0) {\n                const formId = response.Entities[0].FormId;\n\n                await PerformanceAppraisalFormService.List({\n                    Criteria: [[PerformanceAppraisalFormRow.Fields.Id], '=', formId]\n                }, formResponse => {\n\n                    if (formResponse.Entities.length > 0) {\n\n                        let today = new Date();\n                        const reviewDueDateStr = formResponse.Entities[0].EvaluateEndDate;\n                        const reviewDueDate = new Date(reviewDueDateStr);\n\n                        const approvalDueDateStr = formResponse.Entities[0].ApprovalEndDate;\n                        const approvalDueDate = new Date(approvalDueDateStr);\n                      \n                        if (today >= reviewDueDate){\n                            this.form.EmployeeSignature.element.attr('readonly', 'readonly');\n                            this.form.Evaluation.element.attr('readonly', 'readonly');\n                            this.form.HodSignature.element.attr('readonly', 'readonly');\n                            this.form.BonusRate.element.attr('readonly', 'readonly');\n                            this.form.Goals.element.attr('readonly', 'readonly');\n                            this.form.OverallRate.element.attr('readonly', 'readonly');\n                            this.form.Summary.element.attr('readonly', 'readonly');\n\n                            this.form.EmployeeSignature.element.find('input[type=\"file\"]').attr('disabled', 'disabled');\n                            this.form.HodSignature.element.find('input[type=\"file\"]').attr('disabled', 'disabled');\n                        }\n\n                        if (today >= approvalDueDate){\n                            this.form.EmployeeSignature.element.attr('readonly', 'readonly');\n                            this.form.Evaluation.element.attr('readonly', 'readonly');\n                            this.form.HodSignature.element.attr('readonly', 'readonly');\n                            this.form.BonusRate.element.attr('readonly', 'readonly');\n                            this.form.Goals.element.attr('readonly', 'readonly');\n                            this.form.OverallRate.element.attr('readonly', 'readonly');\n                            this.form.Summary.element.attr('readonly', 'readonly');\n                            this.form.GeneralManagerSignature.element.attr('readonly', 'readonly');\n\n                            this.form.EmployeeSignature.element.find('input[type=\"file\"]').attr('disabled', 'disabled');\n                            this.form.HodSignature.element.find('input[type=\"file\"]').attr('disabled', 'disabled');\n                            this.form.GeneralManagerSignature.element.find('input[type=\"file\"]').attr('disabled', 'disabled');\n\n                            this.form.EmployeeSignature.element.find('.tool-button.delete-button').attr('disabled', 'disabled');\n                            this.form.HodSignature.element.find('.tool-button.delete-button').attr('disabled', 'disabled');\n                            this.form.GeneralManagerSignature.element.find('.tool-button.delete-button').attr('disabled', 'disabled');\n                        }\n\n                    } else {\n                        console.error('No form found for the given FormId:', formId);\n                    }\n                });\n            } else {\n                console.error('No evaluation found for the given Id:', this.entityId);\n            }\n        });\n        \n\n        PerformanceAppraisalEvaluationService.List({\n            Criteria: [[PerformanceAppraisalEvaluationRow.Fields.Id], '=', this.entityId]\n        }, async response => {\n            if (response.Entities.length > 0) {\n                const formId = response.Entities[0].FormId;\n\n                await PerformanceAppraisalFormService.List({\n                    Criteria: [[PerformanceAppraisalFormRow.Fields.Id], '=', formId]\n                }, formResponse => {\n                    \n                    if (formResponse.Entities.length > 0) {\n\n                        let today = new Date();\n                        const reviewDueDateStr = formResponse.Entities[0].EvaluateEndDate;\n                        const reviewDueDate = new Date(reviewDueDateStr);\n\n                        const approvalStartDateStr = formResponse.Entities[0].ApprovalStartDate;\n                        const approvalStartDate = new Date(approvalStartDateStr);\n\n                        const approvalDueDateStr = formResponse.Entities[0].ApprovalEndDate;\n                        const approvalDueDate = new Date(approvalDueDateStr);\n                        \n                        for (var index of formResponse.Entities){\n                            if (index.Id === formId){\n                                let reviewStatus = index.ReviewStatus;\n\n                                if (reviewStatus === 4) {\n                                    $('div.field.EmployeeSignature > label[title=\"Employee Signature\"]').parent().hide();\n                                    $('div.field.GeneralManagerSignature > label[title=\"General Manager Signature\"]').parent().hide();\n                                }\n                                if (reviewStatus === 5) {\n                                    $('div.field.GeneralManagerSignature > label[title=\"General Manager Signature\"]').parent().hide();\n                                }\n                                if (reviewStatus === 6) {\n                                    \n                                    if (today < approvalStartDate ){\n                                        $('div.field.GeneralManagerSignature > label[title=\"General Manager Signature\"]').parent().hide();\n                                    }\n                                    \n                                }\n                            }\n                        }\n                    } else {\n                        console.error('No form found for the given FormId:', formId);\n                    }\n                });\n            } else {\n                console.error('No evaluation found for the given Id:', this.entityId);\n            }\n        });\n\n    }\n\n    protected onSaveSuccess(response: SaveResponse): void {\n        super.onSaveSuccess(response);\n\n        PerformanceAppraisalEvaluationService.List({\n            Criteria: [[PerformanceAppraisalEvaluationRow.Fields.Id], '=', this.entityId]\n        }, response => {\n\n            let today = new Date();\n            let klTime = new Date(today.toLocaleString('en-US', { timeZone: 'Asia/Kuala_Lumpur' }));\n\n            let year = klTime.getFullYear();\n            let month = String(klTime.getMonth() + 1).padStart(2, '0');\n            let day = String(klTime.getDate()).padStart(2, '0');\n            let hours = String(klTime.getHours()).padStart(2, '0');\n            let minutes = String(klTime.getMinutes()).padStart(2, '0');\n            let seconds = String(klTime.getSeconds()).padStart(2, '0');\n\n            let currentTodayDateTime = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n\n            PerformanceAppraisalFormService.List({\n                Criteria: [[PerformanceAppraisalFormRow.Fields.Id], '=', response.Entities[0].FormId]\n            }, formresponse1 => {\n\n                if (response.Entities[0].HodSignature && response.Entities[0].HodSignature.length > 0 && formresponse1.Entities[0].ReviewStatus === 4) {\n                    PerformanceAppraisalFormService.Update({\n                        EntityId: response.Entities[0].FormId,\n                        Entity: {\n                            ReviewStatus: 5\n                        }\n                    }).then(\n                        (response: SaveResponse) => {\n                           \n                            PerformanceAppraisalEvaluationService.Update({\n                                EntityId: this.entityId,\n                                Entity: {\n                                    HodSignDate: currentTodayDateTime,\n                                    HodSignID: Authorization.userDefinition.UserId\n                                }\n                            })\n                        }\n                    ).catch(\n                        (error: any) => {\n                            console.error('Error updating ReviewStatus:', error);\n                        }\n                    );\n                    \n                }\n\n                if (response.Entities[0].EmployeeSignature && response.Entities[0].EmployeeSignature.length > 0 && formresponse1.Entities[0].ReviewStatus === 5) {\n                    PerformanceAppraisalFormService.Update({\n                        EntityId: response.Entities[0].FormId,\n                        Entity: {\n                            ReviewStatus: 6\n                        }\n                    }).then(\n                        (response: SaveResponse) => {\n                            PerformanceAppraisalEvaluationService.Update({\n                                EntityId: this.entityId,\n                                Entity: {\n                                    EmployeeSignDate: currentTodayDateTime,\n                                    EmployeeSignID: Authorization.userDefinition.UserId\n                                }\n                            })\n                        }\n                    ).catch(\n                        (error: any) => {\n                            console.error('Error updating ReviewStatus:', error);\n                        }\n                    );\n                }\n\n                if (response.Entities[0].GeneralManagerSignature && response.Entities[0].GeneralManagerSignature.length > 0 && formresponse1.Entities[0].ReviewStatus === 6) {\n                    PerformanceAppraisalFormService.Update({\n                        EntityId: response.Entities[0].FormId,\n                        Entity: {\n                            ReviewStatus: 7\n                        }\n                    }).then(\n                        (response: SaveResponse) => {\n                            PerformanceAppraisalEvaluationService.Update({\n                                EntityId: this.entityId,\n                                Entity: {\n                                    GeneralManagerSignDate: currentTodayDateTime,\n                                    GeneralManagerSignID: Authorization.userDefinition.UserId\n                                }\n                            })\n                        }\n                    ).catch(\n                        (error: any) => {\n                            console.error('Error updating ReviewStatus:', error);\n                        }\n                    );\n                }\n                \n            })\n            \n        });\n\n    }\n}"],
  "mappings": "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",
  "names": ["import_corelib", "import_q", "PerformanceAppraisalEvaluationDialog", "PerformanceAppraisalEvaluationForm", "PerformanceAppraisalEvaluationRow", "PerformanceAppraisalEvaluationService", "response", "a", "__async", "formId", "PerformanceAppraisalFormService", "PerformanceAppraisalFormRow", "formResponse", "today", "reviewDueDateStr", "reviewDueDate", "approvalDueDateStr", "approvalDueDate", "approvalStartDateStr", "approvalStartDate", "index", "reviewStatus", "klTime", "year", "month", "day", "hours", "minutes", "seconds", "currentTodayDateTime", "formresponse1", "error", "__name", "__decorateClass"]
}
