{
  "version": 3,
  "sources": ["../../../Modules/HumanResource/PayrollSettings/PayrollWizard/PayrollWizardDialog.ts"],
  "sourcesContent": ["import { Decorators, EditorUtils, EntityDialog, ListResponse, Select2Editor } from '@serenity-is/corelib';\nimport { EmployeeProfileService } from '../../../ServerTypes/EmployeeProfile';\nimport { PayrollService, PayrollWizardForm, PayrollWizardRow, PayrollWizardService } from '../../../ServerTypes/PayrollSettings';\nimport { alertDialog, isEmptyOrNull } from '@serenity-is/corelib/q';\nimport { confirm, serviceCall, notifySuccess, notifyError } from '@serenity-is/corelib/q';\nimport { AnnouncementWizardService } from '../../../ServerTypes/Announcement';\n\n@Decorators.registerClass('HRMSoftware.PayrollSettings.PayrollWizardDialog')\nexport class PayrollWizardDialog extends EntityDialog<PayrollWizardRow, any> {\n    protected getFormKey() { return PayrollWizardForm.formKey; }\n    protected getRowDefinition() { return PayrollWizardRow; }\n    protected getService() { return PayrollWizardService.baseUrl; }\n\n    protected form = new PayrollWizardForm(this.idPrefix);\n    public EmployeeRowIdList: string;\n    public PayMonth: number;\n    public PayYear: number;\n    public RunFromGenerateWiz: boolean;\n    public counter: number;\n    public EmployeeData: any[];\n    public PayrollData: any[];\n\n    constructor(EmployeeRowIdList: string, PayMonth: number, PayYear: number) {\n        super();\n        serviceCall<ListResponse<any>>({\n            service: AnnouncementWizardService.baseUrl + '/GetTodayDateTime',\n            method: \"GET\",\n            data: {\n            },\n            async: false,\n            onSuccess: (response) => {\n                console.log(response)\n            }\n        })\n        this.RunFromGenerateWiz = false\n        if (!isEmptyOrNull(EmployeeRowIdList)) {\n            this.EmployeeRowIdList = EmployeeRowIdList\n            this.RunFromGenerateWiz = true\n\n        }\n        if (!isEmptyOrNull(PayMonth))\n            this.PayMonth = PayMonth\n        if (!isEmptyOrNull(PayYear))\n            this.PayYear = PayYear\n        EmployeeProfileService.List({\n        }, response => {\n            this.EmployeeData = response.Entities\n        })\n        PayrollService.List({\n        }, response => {\n            this.PayrollData = response.Entities\n        })\n    }\n    public SearchCallback(): void {\n        var self = this\n      \n        var PayMonthElement = document.getElementById(this.idPrefix + 'PayMonth');\n        var OccupationListElement = document.getElementById(this.idPrefix + 'OccupationList');\n        var DepartmentListElement = document.getElementById(this.idPrefix + 'DepartmentList');\n        var DivisionListElement = document.getElementById(this.idPrefix + 'DivisionList');\n        var JobGradeListElement = document.getElementById(this.idPrefix + 'JobGradeList');\n        var SectionListElement = document.getElementById(this.idPrefix + 'SectionList');\n\n        if (isEmptyOrNull($(PayMonthElement).val()))\n            return\n\n        var JobGradeStr = $(JobGradeListElement).val()\n        let JobGradeList = [];\n        let numbers = JobGradeStr.split(',')\n        if (JobGradeStr.length)\n            numbers.forEach(number => {\n                JobGradeList.push(parseInt(number)); // Convert string to integer and push to numberList\n            })\n\n        var SectionStr = $(SectionListElement).val()\n        let SectionList = [];\n        numbers = SectionStr.split(',')\n        if (SectionStr.length)\n            numbers.forEach(number => {\n                SectionList.push(parseInt(number)); // Convert string to integer and push to numberList\n            })\n\n\n\n\n        var DivisionStr = $(DivisionListElement).val()\n        numbers = DivisionStr.split(',')\n        let DivisionList = [];\n        if (DivisionStr.length)\n            numbers.forEach(number => {\n                DivisionList.push(parseInt(number)); // Convert string to integer and push to numberList\n            })\n        var DepartmentStr = $(DepartmentListElement).val()\n        numbers = DepartmentStr.split(',')\n        let DepartmentList = [];\n        if (DepartmentStr.length)\n            numbers.forEach(number => {\n                DepartmentList.push(parseInt(number)); // Convert string to integer and push to numberList\n            })\n        var OccupationStr = $(OccupationListElement).val()\n        numbers = OccupationStr.split(',')\n        let OccupationList = [];\n        if (OccupationStr.length)\n            numbers.forEach(number => {\n                OccupationList.push(parseInt(number)); // Convert string to integer and push to numberList\n            })\n      \n        for (var index in self.EmployeeData) {\n            var found = 0\n            for (var SectionIndex in SectionList) {\n                if (self.EmployeeData[index].SectionID == SectionList[SectionIndex]) {\n                    found = 1\n                    break\n                }\n            }\n            for (var JobGradeIndex in JobGradeList) {\n                if (self.EmployeeData[index].JobGradeID == JobGradeList[JobGradeIndex]) {\n                    found = 1\n                    break\n                }\n            }\n\n            for (var DivisionIndex in DivisionList) {\n                if (self.EmployeeData[index].DivisionID == DivisionList[DivisionIndex]) {\n                    found = 1\n                    break\n                }\n            }\n\n            for (var DepartmentIndex in DepartmentList) {\n                if (self.EmployeeData[index].DepartmentID == DepartmentList[DepartmentIndex]) {\n                    found = 1\n                    break\n                }\n            }\n\n            for (var OccupationIndex in OccupationList) {\n                if (self.EmployeeData[index].OccupationID == OccupationList[OccupationIndex]) {\n                    found = 1\n                    break\n                }\n            }\n            if (found == 0) {\n                let EmployeeRowList = []\n                var EmployeeRowString = self.form.EmployeeRowListBuffer.value\n                if (EmployeeRowString != \"\") {\n                    let EmployeeRowListBuffer = EmployeeRowString.split(',')\n                    EmployeeRowListBuffer.forEach(number => {\n                        EmployeeRowList.push(parseInt(number)); // Convert string to integer and push to numberList\n                    })\n                    EmployeeRowList = EmployeeRowList.filter(number => number !== self.EmployeeData[index].Id);\n                    self.form.EmployeeRowListBuffer.value = EmployeeRowList.join(',')\n                }\n                else\n                    self.form.EmployeeRowListBuffer.value = \"\"\n\n            }\n            else {\n                let EmployeeRowList = []\n                var EmployeeRowString = self.form.EmployeeRowListBuffer.value\n                if (EmployeeRowString != \"\") {\n                    if (EmployeeRowString.includes(',')) {\n                        let EmployeeRowListBuffer = EmployeeRowString.split(',')\n                        EmployeeRowListBuffer.forEach(number => {\n                            EmployeeRowList.push(parseInt(number)); // Convert string to integer and push to numberList\n                        })\n                        if (EmployeeRowList.indexOf(self.EmployeeData[index].Id) === -1)\n                            self.form.EmployeeRowListBuffer.value = self.form.EmployeeRowListBuffer.value + ' , ' + self.EmployeeData[index].Id.toString()\n                    }\n                    else\n                        self.form.EmployeeRowListBuffer.value = self.form.EmployeeRowListBuffer.value + ' , ' + self.EmployeeData[index].Id.toString()\n\n                }\n                else\n                    self.form.EmployeeRowListBuffer.value = self.EmployeeData[index].Id.toString()\n            }\n        }\n        self.form.EmployeeRowList.value = self.form.EmployeeRowListBuffer.value \n        self.PayslipSearchCallback()\n\n\n\n    }\n    public PayslipSearchCallback(): void {\n        var self = this\n        var PayMonthElement = document.getElementById(this.idPrefix + 'PayMonth');\n        self.form.EmployeeRowListBuffer.value = self.form.EmployeeRowList.value \n        const months: string[] = [\n            'January',   // 0\n            'February',  // 1\n            'March',     // 2\n            'April',     // 3\n            'May',       // 4\n            'June',      // 5\n            'July',      // 6\n            'August',    // 7\n            'September', // 8\n            'October',   // 9\n            'November',  // 10\n            'December'   // 11\n        ];\n        var PayMonthElementValue = $(PayMonthElement).val().split('/')\n        var PayMonthElementMonth = PayMonthElementValue[1] - 1\n        var PayMonthElementYear = PayMonthElementValue[0]\n        let EmployeeRowList = []\n        var EmployeeRowString = self.form.EmployeeRowList.value\n        let EmployeeRowListBuffer = EmployeeRowString.split(',')\n        EmployeeRowListBuffer.forEach(number => {\n            EmployeeRowList.push(parseInt(number)); // Convert string to integer and push to numberList\n        })\n        let PayrollIdList = [];\n        let EmployeeRowIdList = [];\n        var PayrollIndex = 0\n        if (isEmptyOrNull(self.form.EmployeeRowListBuffer.value)) {\n            self.form.EmployeeRowList.value = \"\"\n            var PayslipString = document.getElementById(self.idPrefix + 'PayslipList');\n            var ulElement = PayslipString.querySelector('ul');\n            var liElements = ulElement.getElementsByTagName('li')\n            if (liElements.length > 0)\n                while (1) {\n                    var liElement = liElements[0];\n                    liElement.remove()\n                    var ulElement = PayslipString.querySelector('ul');\n                    var liElements = ulElement.getElementsByTagName('li')\n                    if (liElements.length == 0)\n                        break\n                }\n            return\n        }\n        else {\n            let CurrentPayslipIdList = []\n            let RemovedEmployeeList = []\n\n            var PayslipString = document.getElementById(self.idPrefix + 'PayslipList');\n            var ulElement = PayslipString.querySelector('ul');\n            var liElements = ulElement.getElementsByTagName('li')\n            for (let i = 0; i < liElements.length; i++) {\n                var liElement = liElements[i];\n                var id = parseInt(liElement.id);\n                CurrentPayslipIdList.push(id)\n            }\n            for (var index in self.PayrollData) {\n                var PayrollId = self.PayrollData[index].Id\n                var EmployeeRowId = self.PayrollData[index].EmployeeRowId\n                var PayYear = self.PayrollData[index].PayYear;\n                var PayMonth = self.PayrollData[index].PayMonth;\n                var MonthString = months[PayMonth];\n                var YearString = PayYear.toString();\n                if (EmployeeRowList.indexOf(EmployeeRowId) === -1\n                    && RemovedEmployeeList.indexOf(EmployeeRowId) === -1)//remove the payslip\n                {\n                    var PayslipString = document.getElementById(self.idPrefix + 'PayslipList');\n                    var ulElement = PayslipString.querySelector('ul');\n                    var liElements = ulElement.getElementsByTagName('li')\n                    for (let i = 0; i < liElements.length; i++) {\n                        var liElement = liElements[i];\n                        if (parseInt(liElement.id) == PayrollId) {\n                            liElement.remove();\n                            RemovedEmployeeList.push(EmployeeRowId)\n                        }\n                    }\n                }\n               else if (EmployeeRowList.indexOf(EmployeeRowId) !== -1 && PayYear == parseInt(PayMonthElementYear)\n                    && PayMonth == PayMonthElementMonth) // if employee row list have employee row id\n                {\n                    PayrollIdList.push(PayrollId)\n                    EmployeeRowIdList.push(EmployeeRowId)\n                    EmployeeProfileService.Retrieve({\n                        EntityId: EmployeeRowId\n                    }, response => {\n                        var search_index = EmployeeRowIdList.indexOf(response.Entity.Id)\n                        var Name = response.Entity.EmployeeName.replace(/\\s/g, '');\n                        var PayrollId = PayrollIdList[search_index]\n                        var queryString = \"PayrollRowId=\" + encodeURIComponent(PayrollId)\n                        var url = window.location.origin + '/PayrollSettings/Payroll/PdfSharpConvert?' + queryString\n                        var xhr = new XMLHttpRequest();\n                        xhr.open('GET', url, true);\n                        xhr.responseType = 'blob';\n                        xhr.onload = function () {\n                            if (xhr.status === 200) {\n                                var blob = xhr.response;\n                                const url = window.URL.createObjectURL(blob);\n                                var li = document.createElement('li');\n                                li.className = \"file-item file-binary\"\n                                li.id = PayrollId.toString()\n                                var a = document.createElement('a');\n                                a.href = url;\n                                a.className = \"thumb\"\n                                a.target = \"_blank\"\n                                a.title = Name + \"Payslip\" + MonthString + YearString + '.pdf'\n                                a.download = Name + \"Payslip\" + MonthString + YearString + '.pdf';\n                                a.id = PayrollId.toString()\n                                li.appendChild(a)\n                                var div = document.createElement('div');\n                                div.className = \"filename\"\n                                div.title = Name + \"Payslip\" + MonthString + YearString + '.pdf'\n                                div.textContent = Name + \"Payslip\" + MonthString + YearString + '.pdf'\n                                var cross = document.createElement('a');\n                                cross.className = 'delete'\n                                cross.addEventListener('click', function (event) {\n                                    event.preventDefault(); // Prevent default anchor behavior (e.g., following a link)\n                                    li.remove(); // Remove the parent element from the DOM\n                                });\n                                div.appendChild(cross)\n                                var PayslipString = document.getElementById(self.idPrefix + 'PayslipList');\n                                var ulElement = PayslipString.querySelector('ul');\n                                var liElements = ulElement.getElementsByTagName('li')\n                                let CurrentPayroll = [];\n                                for (let i = 0; i < liElements.length; i++) {\n                                    var liElement = liElements[i];\n                                    var id = liElement.id;\n                                    CurrentPayroll.push(parseInt(id))\n                                }\n                                if (CurrentPayroll.indexOf(PayrollId) === -1) {\n                                    li.appendChild(div)\n                                    ulElement.appendChild(li)\n                                }\n                                var ulElement = PayslipString.querySelector('ul');\n                                var liElements = ulElement.getElementsByTagName('li')\n                                for (let i = 0; i < liElements.length; i++) {\n                                    var liElement = liElements[i];\n                                    var liId = parseInt(liElement.id);\n                                    if (PayrollIdList.indexOf(liId) === -1)\n                                        liElement.remove()\n                                    liElements = ulElement.getElementsByTagName('li')\n                                }\n                            } else\n                                notifyError('Error encounter when downloading Payslip Pdf');\n\n                        };\n                        xhr.send()\n                        PayrollIndex += 1\n\n                    })\n                }\n              \n\n            }\n        }\n\n\n\n    }\n    public PartialSearchCallback(): void {\n        var self = this\n        const months: string[] = [\n            'January',   // 0\n            'February',  // 1\n            'March',     // 2\n            'April',     // 3\n            'May',       // 4\n            'June',      // 5\n            'July',      // 6\n            'August',    // 7\n            'September', // 8\n            'October',   // 9\n            'November',  // 10\n            'December'   // 11\n        ];\n        var PayMonthElement = document.getElementById(this.idPrefix + 'PayMonth');\n\n        this.counter = 0\n     \n            \n     \n        var PayMonthElementValue = $(PayMonthElement).val().split('/')\n        var PayMonthElementMonth = PayMonthElementValue[1] - 1\n        var PayMonthElementYear = PayMonthElementValue[0]\n        let EmployeeRowList = []\n        var EmployeeRowString = self.form.EmployeeRowList.value\n        let EmployeeRowListBuffer = EmployeeRowString.split(',')\n        EmployeeRowListBuffer.forEach(number => {\n            EmployeeRowList.push(parseInt(number)); // Convert string to integer and push to numberList\n        })\n        let PayrollIdList = [];\n        let EmployeeRowIdList = [];\n        var PayrollIndex = 0\n        if (isEmptyOrNull(self.form.EmployeeRowList.value)) {\n            self.form.EmployeeRowList.value = \"\"\n            var PayslipString = document.getElementById(self.idPrefix + 'PayslipList');\n            var ulElement = PayslipString.querySelector('ul');\n            var liElements = ulElement.getElementsByTagName('li')\n            if (liElements.length > 0)\n                while (1) {\n                    var liElement = liElements[0];\n                    liElement.remove()\n                    var ulElement = PayslipString.querySelector('ul');\n                    var liElements = ulElement.getElementsByTagName('li')\n                    if (liElements.length == 0)\n                        break\n                }\n            return\n        }\n        else {\n            let CurrentPayslipIdList = []\n            var PayslipString = document.getElementById(self.idPrefix + 'PayslipList');\n            var ulElement = PayslipString.querySelector('ul');\n            var liElements = ulElement.getElementsByTagName('li')\n            for (let i = 0; i < liElements.length; i++) {\n                var liElement = liElements[i];\n                var id = parseInt(liElement.id);\n                CurrentPayslipIdList.push(id)\n            }\n\n            for (var index in self.PayrollData) {\n                var PayrollId = self.PayrollData[index].Id\n                var EmployeeRowId = self.PayrollData[index].EmployeeRowId\n                var PayYear = self.PayrollData[index].PayYear;\n                var PayMonth = self.PayrollData[index].PayMonth;\n                var MonthString = months[PayMonth];\n                var YearString = PayYear.toString();\n                if (EmployeeRowList.indexOf(EmployeeRowId) !== -1 && PayYear == PayMonthElementYear\n                    && PayMonth == PayMonthElementMonth) // if employee row list have employee row id\n                {\n                    PayrollIdList.push(PayrollId)\n                    EmployeeRowIdList.push(EmployeeRowId)\n                    EmployeeProfileService.Retrieve({\n                        EntityId: EmployeeRowId\n                    }, response => {\n                        var search_index = EmployeeRowIdList.indexOf(response.Entity.Id)\n                        var Name = response.Entity.EmployeeName.replace(/\\s/g, '');\n                        var PayrollId = PayrollIdList[search_index]\n                        var queryString = \"PayrollRowId=\" + encodeURIComponent(PayrollId)\n                        var url = window.location.origin + '/PayrollSettings/Payroll/PdfSharpConvert?' + queryString\n                        var xhr = new XMLHttpRequest();\n                        xhr.open('GET', url, true);\n                        xhr.responseType = 'blob';\n                        xhr.onload = function () {\n                            if (xhr.status === 200) {\n                                var blob = xhr.response;\n                                const url = window.URL.createObjectURL(blob);\n                                var li = document.createElement('li');\n                                li.className = \"file-item file-binary\"\n                                li.id = PayrollId.toString()\n                                var a = document.createElement('a');\n                                a.href = url;\n                                a.className = \"thumb\"\n                                a.target = \"_blank\"\n                                a.title = Name + \"Payslip\" + MonthString + YearString + '.pdf'\n                                a.download = Name + \"Payslip\" + MonthString + YearString + '.pdf';\n                                a.id = PayrollId.toString()\n\n                                li.appendChild(a)\n                                var div = document.createElement('div');\n                                div.className = \"filename\"\n                                div.title = Name + \"Payslip\" + MonthString + YearString + '.pdf'\n                                div.textContent = Name + \"Payslip\" + MonthString + YearString + '.pdf'\n                                var cross = document.createElement('a');\n                                cross.className = 'delete'\n                                cross.addEventListener('click', function (event) {\n                                    event.preventDefault(); // Prevent default anchor behavior (e.g., following a link)\n                                    li.remove(); // Remove the parent element from the DOM\n                                });\n                                div.appendChild(cross)\n\n                                if (self.RunFromGenerateWiz == false) {\n                                    var PayslipString = document.getElementById(self.idPrefix + 'PayslipList');\n                                    var ulElement = PayslipString.querySelector('ul');\n                                    var liElements = ulElement.getElementsByTagName('li')\n                                    let CurrentPayroll = [];\n                                    for (let i = 0; i < liElements.length; i++) {\n                                        var liElement = liElements[i];\n                                        var id = liElement.id;\n                                        CurrentPayroll.push(parseInt(id))\n                                    }\n                                    if (CurrentPayroll.indexOf(PayrollId) === -1) {\n                                        li.appendChild(div)\n                                        ulElement.appendChild(li)\n                                    }\n                                    var ulElement = PayslipString.querySelector('ul');\n                                    var liElements = ulElement.getElementsByTagName('li')\n                                    for (let i = 0; i < liElements.length; i++) {\n                                        var liElement = liElements[i];\n                                        var liId = parseInt(liElement.id);\n                                        if (PayrollIdList.indexOf(liId) === -1)\n                                            liElement.remove()\n                                        liElements = ulElement.getElementsByTagName('li')\n                                    }\n\n\n                                }\n                                else\n                                    a.click()\n                            } else\n                                notifyError('Error encounter when downloading Payslip Pdf');\n\n                        };\n                        xhr.send()\n                        PayrollIndex += 1\n\n                    })\n                }\n                   \n            }\n        }\n\n\n\n\n\n            self.dialogClose()\n        \n        \n    \n\n\n\n    }\n    public dialogOpen(asPanel?: boolean): void {\n        super.dialogOpen();\n        if (!isEmptyOrNull(this.PayYear)) {\n            let str = this.idPrefix\n            let lastIndex = str.lastIndexOf('_');\n            let result = '#' + str.substring(0, lastIndex);\n            $(result).parent().css(\"display\", \"none\")\n\n        }\n        var PayslipString = document.getElementById(this.idPrefix + 'PayslipList');\n        var SelectFileElement = PayslipString.querySelector('div');\n        SelectFileElement.style.display = 'none'\n        this.saveAndCloseButton.hide()\n        this.editButton.hide()\n        this.applyChangesButton.hide()\n        this.deleteButton.hide()\n        this.localizationButton.hide()\n        this.cloneButton.hide()\n        this.undeleteButton.hide()\n\n        $(`#s2id_${this.idPrefix}EmployeeRowList`).on('click', async function (e) {\n            $(`.select2-drop`).hide()\n            return\n\n        })\n        var self = this;\n        var PayMonthElement = document.getElementById(this.idPrefix + 'PayMonth');\n        var EmployeeRowListElement = document.getElementById(this.idPrefix + 'EmployeeRowList');\n        let PayMonthElementEditor = new Select2Editor($(PayMonthElement))\n        PayrollService.List({\n        }, response => {\n            let YearMonthList: string[] = [];\n            if (!isEmptyOrNull(this.PayYear) && !isEmptyOrNull(this.PayMonth))\n                var required = this.PayYear + '/' + (this.PayMonth + 1).toString().padStart(2, '0')\n            for (var index in response.Entities) {\n                var YearMonth = response.Entities[index].PayYear.toString() + '/' + (response.Entities[index].PayMonth + 1).toString().padStart(2, '0')\n                if (YearMonthList.indexOf(YearMonth) === -1) \n                    YearMonthList.push(YearMonth);\n            }\n            YearMonthList.sort((a, b) => {\n                const [yearA, monthA] = a.split('/').map(Number);\n                const [yearB, monthB] = b.split('/').map(Number);\n                const dateA = new Date(yearA, monthA - 1);  // Months are 0-indexed in Date objects\n                const dateB = new Date(yearB, monthB - 1);\n                return dateB.getTime() - dateA.getTime();\n            });\n            for (var index in YearMonthList)\n                PayMonthElementEditor.addItem({ id: (YearMonthList[index]).toString(), text: (YearMonthList[index]).toString(), }); // 8am - 6pm , will consider lates\n            if (!isEmptyOrNull(this.PayYear) && !isEmptyOrNull(this.PayMonth))\n            {\n                if (YearMonthList.indexOf(required) === -1)\n                    PayMonthElementEditor.addItem({ id: (required).toString(), text: (required).toString(), }); // 8am - 6pm , will consider lates\n                $(PayMonthElement).val(required).trigger('change')\n                $(EmployeeRowListElement).val(this.EmployeeRowIdList).trigger('change')\n            }\n        });\n\n        var OccupationListElement = document.getElementById(this.idPrefix + 'OccupationList');\n        var DepartmentListElement = document.getElementById(this.idPrefix + 'DepartmentList');\n        var SectionListElement = document.getElementById(this.idPrefix + 'SectionList');\n        var DivisionListElement = document.getElementById(this.idPrefix + 'DivisionList');\n        var JobGradeListElement = document.getElementById(this.idPrefix + 'JobGradeList');\n        var EmployeeRowListElement = document.getElementById(this.idPrefix + 'EmployeeRowList');\n        if (this.RunFromGenerateWiz == false) {\n            console.log('haha')\n            $(PayMonthElement).on('change', async function () {\n                if (isEmptyOrNull($(PayMonthElement).val())) {\n                    self.form.EmployeeRowList.value = \"\"\n                    var PayslipString = document.getElementById(self.idPrefix + 'PayslipList');\n                    var ulElement = PayslipString.querySelector('ul');\n                    //PayslipString.appendChild(li)\n                    var liElements = ulElement.getElementsByTagName('li')\n                    if (liElements.length >= 0)\n                        while (1) {\n                            var liElement = liElements[0];\n                            liElement.remove()\n                            var ulElement = PayslipString.querySelector('ul');\n                            var liElements = ulElement.getElementsByTagName('li')\n                            if (liElements.length == 0)\n                                break\n                        }\n                    return\n                }\n\n\n                self.SearchCallback();\n\n            })\n            $(OccupationListElement).on('change', async function () {\n                self.SearchCallback()\n            })\n            $(DivisionListElement).on('change', async function () {\n                self.SearchCallback();\n            })\n            $(JobGradeListElement).on('change', async function () {\n                self.SearchCallback();\n            })\n            $(DepartmentListElement).on('change', async function () {\n                self.SearchCallback();\n            })\n            $(SectionListElement).on('change', async function () {\n                self.SearchCallback();\n            })\n            $(EmployeeRowListElement).on('change', async function () {\n                self.PayslipSearchCallback();\n            })\n\n\n        }\n        else\n        {\n            $(EmployeeRowListElement).on('change', async function () {\n                self.PartialSearchCallback();\n            })\n\n        }\n    }\n    protected getToolbarButtons() {\n        var self = this\n        var buttons = super.getToolbarButtons();\n        $(`#${this.idPrefix}Toolbar`).addClass(\"ms-auto\")\n        buttons.push(\n            {\n                title: \"Click to Download\",\t// *** Get button text from translation\n                cssClass: 'text-bg-success p-2 ml-auto',\n                icon: 'fas fa-hat-wizard text-green',\n                onClick: () => {\n                    confirm(\n                        \"Are you sure to download these payslips?\",\n                        () => {\n                            var PayslipString = document.getElementById(self.idPrefix + 'PayslipList');\n                            var ulElement = PayslipString.querySelector('ul');\n                            var liElements = ulElement.getElementsByTagName('li')\n\n                            for (let i = 0; i < liElements.length; i++) {\n                                var liElement = liElements[i];\n                                var aElements = liElement.getElementsByClassName('thumb')\n                                for (let i = 0; i < aElements.length; i++) {\n                                    var aElement = aElements[i] as HTMLAnchorElement \n                                    aElement.click()\n                                }\n                            }\n                        }\n                    )\n                },\n            }\n        );\n        return buttons\n    }\n}"],
  "mappings": "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",
  "names": ["import_corelib", "import_q", "PayrollWizardDialog", "EmployeeRowIdList", "PayMonth", "PayYear", "PayrollWizardForm", "AnnouncementWizardService", "response", "EmployeeProfileService", "PayrollService", "PayrollWizardRow", "PayrollWizardService", "self", "PayMonthElement", "OccupationListElement", "DepartmentListElement", "DivisionListElement", "JobGradeListElement", "SectionListElement", "JobGradeStr", "JobGradeList", "numbers", "number", "SectionStr", "SectionList", "DivisionStr", "DivisionList", "DepartmentStr", "DepartmentList", "OccupationStr", "OccupationList", "index", "found", "SectionIndex", "JobGradeIndex", "DivisionIndex", "DepartmentIndex", "OccupationIndex", "EmployeeRowList", "EmployeeRowString", "months", "PayMonthElementValue", "PayMonthElementMonth", "PayMonthElementYear", "PayrollIdList", "PayrollIndex", "PayslipString", "ulElement", "liElements", "liElement", "CurrentPayslipIdList", "RemovedEmployeeList", "i", "id", "PayrollId", "EmployeeRowId", "MonthString", "YearString", "search_index", "Name", "queryString", "url", "xhr", "blob", "li", "a", "div", "cross", "event", "CurrentPayroll", "liId", "asPanel", "str", "lastIndex", "result", "SelectFileElement", "e", "__async", "EmployeeRowListElement", "PayMonthElementEditor", "YearMonthList", "required", "YearMonth", "b", "yearA", "monthA", "yearB", "monthB", "dateA", "buttons", "aElements", "aElement", "__name", "__decorateClass"]
}
