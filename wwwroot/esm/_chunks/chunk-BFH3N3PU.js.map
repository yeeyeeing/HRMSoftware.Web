{
  "version": 3,
  "sources": ["../../../Modules/ServerTypes/OrganisationChart/FinalOrganisationChartService.ts", "../../../Modules/ServerTypes/OrganisationChart/OrganisationChartService.ts", "../../../Modules/ServerTypes/OrganisationChart/SplitOrganisationStructureService.ts", "../../../Modules/ServerTypes/OrganisationChart/EmployeeRightsRow.ts", "../../../Modules/ServerTypes/OrganisationChart/EmployeeRightsService.ts", "../../../Modules/ServerTypes/OrganisationChart/FinalOrganisationChartRow.ts", "../../../Modules/ServerTypes/OrganisationChart/OrganisationChartRow.ts", "../../../Modules/ServerTypes/OrganisationChart/SplitOrganisationChartRow.ts", "../../../Modules/ServerTypes/OrganisationChart/SplitOrganisationChartService.ts", "../../../Modules/ServerTypes/OrganisationChart/SplitOrganisationStructureRow.ts"],
  "sourcesContent": ["\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { FinalOrganisationChartRow } from \"./FinalOrganisationChartRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace FinalOrganisationChartService {\n    export const baseUrl = 'OrganisationChart/FinalOrganisationChart';\n\n    export declare function Create(request: SaveRequest<FinalOrganisationChartRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<FinalOrganisationChartRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<FinalOrganisationChartRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<FinalOrganisationChartRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"OrganisationChart/FinalOrganisationChart/Create\",\n        Update: \"OrganisationChart/FinalOrganisationChart/Update\",\n        Delete: \"OrganisationChart/FinalOrganisationChart/Delete\",\n        Retrieve: \"OrganisationChart/FinalOrganisationChart/Retrieve\",\n        List: \"OrganisationChart/FinalOrganisationChart/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>FinalOrganisationChartService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { OrganisationChartRow } from \"./OrganisationChartRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace OrganisationChartService {\n    export const baseUrl = 'OrganisationChart/OrganisationChart';\n\n    export declare function Create(request: SaveRequest<OrganisationChartRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<OrganisationChartRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<OrganisationChartRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<OrganisationChartRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"OrganisationChart/OrganisationChart/Create\",\n        Update: \"OrganisationChart/OrganisationChart/Update\",\n        Delete: \"OrganisationChart/OrganisationChart/Delete\",\n        Retrieve: \"OrganisationChart/OrganisationChart/Retrieve\",\n        List: \"OrganisationChart/OrganisationChart/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>OrganisationChartService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { SplitOrganisationStructureRow } from \"./SplitOrganisationStructureRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace SplitOrganisationStructureService {\n    export const baseUrl = 'OrganisationChart/SplitOrganisationStructure';\n\n    export declare function Create(request: SaveRequest<SplitOrganisationStructureRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<SplitOrganisationStructureRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<SplitOrganisationStructureRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<SplitOrganisationStructureRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"OrganisationChart/SplitOrganisationStructure/Create\",\n        Update: \"OrganisationChart/SplitOrganisationStructure/Update\",\n        Delete: \"OrganisationChart/SplitOrganisationStructure/Delete\",\n        Retrieve: \"OrganisationChart/SplitOrganisationStructure/Retrieve\",\n        List: \"OrganisationChart/SplitOrganisationStructure/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>SplitOrganisationStructureService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface EmployeeRightsRow {\n    Id?: number;\n    EmployeeRowId?: number;\n    Appraisal?: boolean;\n    LeaveApproval?: boolean;\n    OtApproval?: boolean;\n    MoneyClaiming?: boolean;\n    Training?: boolean;\n    NodeId?: string;\n}\n\nexport abstract class EmployeeRightsRow {\n    static readonly idProperty = 'Id';\n    static readonly localTextPrefix = 'OrganisationChart.EmployeeRights';\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = 'Administration:HumanResources';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<EmployeeRightsRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { EmployeeRightsRow } from \"./EmployeeRightsRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace EmployeeRightsService {\n    export const baseUrl = 'OrganisationChart/EmployeeRights';\n\n    export declare function Create(request: SaveRequest<EmployeeRightsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<EmployeeRightsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<EmployeeRightsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<EmployeeRightsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"OrganisationChart/EmployeeRights/Create\",\n        Update: \"OrganisationChart/EmployeeRights/Update\",\n        Delete: \"OrganisationChart/EmployeeRights/Delete\",\n        Retrieve: \"OrganisationChart/EmployeeRights/Retrieve\",\n        List: \"OrganisationChart/EmployeeRights/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>EmployeeRightsService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface FinalOrganisationChartRow {\n    Id?: number;\n    FinalOrgChart?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class FinalOrganisationChartRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'FinalOrgChart';\n    static readonly localTextPrefix = 'OrganisationChart.FinalOrganisationChart';\n    static readonly deletePermission = '*';\n    static readonly insertPermission = '*';\n    static readonly readPermission = '*';\n    static readonly updatePermission = '*';\n\n    static readonly Fields = fieldsProxy<FinalOrganisationChartRow>();\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface OrganisationChartRow {\n    Id?: number;\n    OrgChart?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class OrganisationChartRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'OrgChart';\n    static readonly localTextPrefix = 'OrganisationChart.OrganisationChart';\n    static readonly deletePermission = '*';\n    static readonly insertPermission = '*';\n    static readonly readPermission = '*';\n    static readonly updatePermission = '*';\n\n    static readonly Fields = fieldsProxy<OrganisationChartRow>();\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface SplitOrganisationChartRow {\n    Id?: number;\n    ParentId?: string;\n    NodeId?: string;\n    Name?: string;\n    Title?: string;\n    ClassName?: string;\n    HierarchyLevel?: number;\n    EmployeeRowId?: number;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class SplitOrganisationChartRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'ParentId';\n    static readonly localTextPrefix = 'OrganisationChart.SplitOrganisationChart';\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = 'Administration:HumanResources';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<SplitOrganisationChartRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { SplitOrganisationChartRow } from \"./SplitOrganisationChartRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace SplitOrganisationChartService {\n    export const baseUrl = 'OrganisationChart/SplitOrganisationChart';\n\n    export declare function Create(request: SaveRequest<SplitOrganisationChartRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<SplitOrganisationChartRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<SplitOrganisationChartRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<SplitOrganisationChartRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"OrganisationChart/SplitOrganisationChart/Create\",\n        Update: \"OrganisationChart/SplitOrganisationChart/Update\",\n        Delete: \"OrganisationChart/SplitOrganisationChart/Delete\",\n        Retrieve: \"OrganisationChart/SplitOrganisationChart/Retrieve\",\n        List: \"OrganisationChart/SplitOrganisationChart/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>SplitOrganisationChartService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface SplitOrganisationStructureRow {\n    Id?: number;\n    ParentId?: string;\n    NodeId?: string;\n    Name?: string;\n    Title?: string;\n    ClassName?: string;\n    HierarchyLevel?: number;\n    EmployeeRowId?: number;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n    DeleteUserId?: number;\n    DeleteDate?: string;\n    IsActive?: number;\n}\n\nexport abstract class SplitOrganisationStructureRow {\n    static readonly idProperty = 'Id';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'ParentId';\n    static readonly localTextPrefix = 'OrganisationChart.SplitOrganisationStructure';\n    static readonly deletePermission = 'Administration:HumanResources';\n    static readonly insertPermission = 'Administration:HumanResources';\n    static readonly readPermission = 'Administration:HumanResources';\n    static readonly updatePermission = 'Administration:HumanResources';\n\n    static readonly Fields = fieldsProxy<SplitOrganisationStructureRow>();\n}"],
  "mappings": "sDAEA,IAAAA,EAA+C,SAE9BC,OACAA,EAAA,QAAU,2CAQVA,EAAA,QAAU,CACnB,OAAQ,kDACR,OAAQ,kDACR,OAAQ,kDACR,SAAU,oDACV,KAAM,+CACV,EAEA,CACI,SACA,SACA,SACA,WACA,MACJ,EAAE,QAAQC,GAAK,CACLD,EAA+BC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CACzD,SAAO,kBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IA3BYJ,MAAA,KCFjB,IAAAK,EAA+C,SAE9BC,OACAA,EAAA,QAAU,sCAQVA,EAAA,QAAU,CACnB,OAAQ,6CACR,OAAQ,6CACR,OAAQ,6CACR,SAAU,+CACV,KAAM,0CACV,EAEA,CACI,SACA,SACA,SACA,WACA,MACJ,EAAE,QAAQC,GAAK,CACLD,EAA0BC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CACpD,SAAO,kBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IA3BYJ,MAAA,KCFjB,IAAAK,EAA+C,SAE9BC,OACAA,EAAA,QAAU,+CAQVA,EAAA,QAAU,CACnB,OAAQ,sDACR,OAAQ,sDACR,OAAQ,sDACR,SAAU,wDACV,KAAM,mDACV,EAEA,CACI,SACA,SACA,SACA,WACA,MACJ,EAAE,QAAQC,GAAK,CACLD,EAAmCC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CAC7D,SAAO,kBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IA3BYJ,MAAA,KCJhB,IAAAK,EAA4B,SAatB,IAAeC,EAAf,KAAiC,CASxC,EATsBC,EAAAD,EAAA,qBAAAA,EACF,WAAa,KADXA,EAEF,gBAAkB,mCAFhBA,EAGF,iBAAmB,gCAHjBA,EAIF,iBAAmB,gCAJjBA,EAKF,eAAiB,gCALfA,EAMF,iBAAmB,gCANjBA,EAQF,UAAS,eAA+B,ECnB5D,IAAAE,EAA+C,SAE9BC,OACAA,EAAA,QAAU,mCAQVA,EAAA,QAAU,CACnB,OAAQ,0CACR,OAAQ,0CACR,OAAQ,0CACR,SAAU,4CACV,KAAM,uCACV,EAEA,CACI,SACA,SACA,SACA,WACA,MACJ,EAAE,QAAQC,GAAK,CACLD,EAAuBC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CACjD,SAAO,kBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IA3BYJ,MAAA,KCJhB,IAAAK,EAA4B,SActB,IAAeC,EAAf,KAAyC,CAWhD,EAXsBC,EAAAD,EAAA,6BAAAA,EACF,WAAa,KADXA,EAEF,iBAAmB,WAFjBA,EAGF,aAAe,gBAHbA,EAIF,gBAAkB,2CAJhBA,EAKF,iBAAmB,IALjBA,EAMF,iBAAmB,IANjBA,EAOF,eAAiB,IAPfA,EAQF,iBAAmB,IARjBA,EAUF,UAAS,eAAuC,ECxBnE,IAAAE,EAA4B,SActB,IAAeC,EAAf,KAAoC,CAW3C,EAXsBC,EAAAD,EAAA,wBAAAA,EACF,WAAa,KADXA,EAEF,iBAAmB,WAFjBA,EAGF,aAAe,WAHbA,EAIF,gBAAkB,sCAJhBA,EAKF,iBAAmB,IALjBA,EAMF,iBAAmB,IANjBA,EAOF,eAAiB,IAPfA,EAQF,iBAAmB,IARjBA,EAUF,UAAS,eAAkC,ECxB9D,IAAAE,EAA4B,SAoBtB,IAAeC,EAAf,KAAyC,CAWhD,EAXsBC,EAAAD,EAAA,6BAAAA,EACF,WAAa,KADXA,EAEF,iBAAmB,WAFjBA,EAGF,aAAe,WAHbA,EAIF,gBAAkB,2CAJhBA,EAKF,iBAAmB,gCALjBA,EAMF,iBAAmB,gCANjBA,EAOF,eAAiB,gCAPfA,EAQF,iBAAmB,gCARjBA,EAUF,UAAS,eAAuC,EC5BpE,IAAAE,EAA+C,SAE9BC,OACAA,EAAA,QAAU,2CAQVA,EAAA,QAAU,CACnB,OAAQ,kDACR,OAAQ,kDACR,OAAQ,kDACR,SAAU,oDACV,KAAM,+CACV,EAEA,CACI,SACA,SACA,SACA,WACA,MACJ,EAAE,QAAQC,GAAK,CACLD,EAA+BC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CACzD,SAAO,kBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IA3BYJ,MAAA,KCJhB,IAAAK,EAA4B,SAoBtB,IAAeC,EAAf,KAA6C,CAWpD,EAXsBC,EAAAD,EAAA,iCAAAA,EACF,WAAa,KADXA,EAEF,iBAAmB,WAFjBA,EAGF,aAAe,WAHbA,EAIF,gBAAkB,+CAJhBA,EAKF,iBAAmB,gCALjBA,EAMF,iBAAmB,gCANjBA,EAOF,eAAiB,gCAPfA,EAQF,iBAAmB,gCARjBA,EAUF,UAAS,eAA2C",
  "names": ["import_q", "FinalOrganisationChartService", "x", "r", "s", "o", "import_q", "OrganisationChartService", "x", "r", "s", "o", "import_q", "SplitOrganisationStructureService", "x", "r", "s", "o", "import_q", "EmployeeRightsRow", "__name", "import_q", "EmployeeRightsService", "x", "r", "s", "o", "import_q", "FinalOrganisationChartRow", "__name", "import_q", "OrganisationChartRow", "__name", "import_q", "SplitOrganisationChartRow", "__name", "import_q", "SplitOrganisationChartService", "x", "r", "s", "o", "import_q", "SplitOrganisationStructureRow", "__name"]
}
