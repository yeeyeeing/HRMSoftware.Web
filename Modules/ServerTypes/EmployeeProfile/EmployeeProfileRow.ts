import { EmployeeAllowanceRow } from "./EmployeeAllowanceRow";
import { FixedDeductionRow } from "./FixedDeductionRow";
import { MaritalStatus } from "./MaritalStatus";
import { EmployeeType } from "./EmployeeType";
import { SexType } from "./SexType";
import { SOCSOClass } from "./SOCSOClass";
import { EPFClass } from "./EPFClass";
import { EISClass } from "./EISClass";
import { HRDFClass } from "./HRDFClass";
import { ProbationClass } from "./ProbationClass";
import { getLookup, getLookupAsync, fieldsProxy } from "@serenity-is/corelib/q";

export interface EmployeeProfileRow {
    WorkingHour?: number;
    WorkingDays?: number;
    DailyRateBase?: number;
    NplRateBase?: number;
    OtRateWeekday?: number;
    OtRateWeekend?: number;
    OtRatePublicHoliday?: number;
    OtRate?: number;
    TotalWorkingTimeInMinutes?: number;
    NumberOfWorkingDays?: number;
    DisabledChildInUniversity?: number;
    DisabledChild?: number;
    AllowanceLists?: EmployeeAllowanceRow[];
    FixedDeductionList?: FixedDeductionRow[];
    CountryID?: number;
    PostalCode?: string;
    CountryName?: string;
    FixedOtRateOption?: boolean;
    GrantHRPrivilege?: boolean;
    CreateUser?: boolean;
    OtPayEntitlement?: boolean;
    PayByMonth?: boolean;
    PayByHour?: boolean;
    PayByDay?: boolean;
    MaritalStatus?: MaritalStatus;
    Id?: number;
    Retired?: number;
    JobDescription?: string;
    EmployeeName?: string;
    UserPassword?: string;
    UserRowID?: number;
    UserName?: string;
    EmployeeID?: string;
    Nric?: string;
    Age?: number;
    Terminated?: number;
    Resigned?: number;
    ChildrenUnderEighteen?: number;
    ChildrenInUniversity?: number;
    WorkingSpouse?: boolean;
    CalculationDate?: string;
    LastPaymentDate?: string;
    RecruitmentDate?: string;
    ResignationDate?: string;
    TerminateDate?: string;
    TerminateLeaveDate?: string;
    ResignLeaveDate?: string;
    Birthday?: string;
    EmployeeEmail?: string;
    EpfAccountNumber?: string;
    ProbationPeriod?: number;
    NoticePeriod?: number;
    Address?: string;
    TelNumber1?: string;
    TelNumber2?: string;
    PassportNumber?: string;
    PassportIssueDate?: string;
    PassportValidPeriod?: number;
    PassportExpiryDate?: string;
    BonusFactor?: number;
    BasicSalary?: number;
    NightShiftAllowancePerDay?: number;
    RaceID?: number;
    DepartmentID?: number;
    DivisionID?: number;
    SectionID?: number;
    JobGradeID?: number;
    OccupationID?: number;
    BankID?: number;
    BankAccountNumber?: string;
    CityID?: number;
    DailyWorkingMinute?: number;
    StateID?: number;
    EmployeeImg?: string;
    NationalityID?: number;
    ProbationPeriodEnd?: string;
    Race?: string;
    DepartmentDept?: string;
    Division?: string;
    Section?: string;
    JobGrade?: string;
    Occupation?: string;
    BankName?: string;
    CityName?: string;
    StateName?: string;
    NationalityName?: string;
    EmployeeType?: EmployeeType;
    Sex?: SexType;
    SocsoClass?: SOCSOClass;
    SocsoAccountNumber?: string;
    EpfClass?: EPFClass;
    CostCentreID?: number;
    CostCentreName?: string;
    Cp8dID?: number;
    Cp8dName?: string;
    EisClass?: EISClass;
    HRDFClass?: HRDFClass;
    WorkingPermit?: string;
    SsfwEffectiveDate?: string;
    WorkingPermitIssueDate?: string;
    WorkingPermitExpireDate?: string;
    WorkingPermitValidFrom?: string;
    WorkingPermitValidUntil?: string;
    ArrivalDate?: string;
    PCBnumber?: string;
    ProbationPeriodFrom?: string;
    ProbationPeriodUntil?: string;
    PassedProbation?: ProbationClass;
    RetireDate?: string;
    InsertUserId?: number;
    InsertDate?: string;
    UpdateUserId?: number;
    UpdateDate?: string;
    DeleteUserId?: number;
    DeleteDate?: string;
    IsActive?: number;
}

export abstract class EmployeeProfileRow {
    static readonly idProperty = 'Id';
    static readonly isActiveProperty = 'IsActive';
    static readonly nameProperty = 'EmployeeID';
    static readonly localTextPrefix = 'EmployeeProfile.EmployeeProfile';
    static readonly lookupKey = 'EmployeeProfile.EmployeeProfile';

    /** @deprecated use getLookupAsync instead */
    static getLookup() { return getLookup<EmployeeProfileRow>('EmployeeProfile.EmployeeProfile') }
    static async getLookupAsync() { return getLookupAsync<EmployeeProfileRow>('EmployeeProfile.EmployeeProfile') }

    static readonly deletePermission = '*';
    static readonly insertPermission = '*';
    static readonly readPermission = '*';
    static readonly updatePermission = '*';

    static readonly Fields = fieldsProxy<EmployeeProfileRow>();
}